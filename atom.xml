<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kuangcp Blog</title>
  
  <subtitle>Javaer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.kuangcp.top/"/>
  <updated>2018-12-20T12:59:38.764Z</updated>
  <id>http://blog.kuangcp.top/</id>
  
  <author>
    <name>Kuangcp</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Solution.md</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Blog-Solution/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Blog-Solution/</id>
    <published>2018-12-20T12:59:38.764Z</published>
    <updated>2018-12-20T12:59:38.764Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#解决方案">解决方案</a></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><blockquote><p>关于问题的解决方案</p></blockquote><p><a href="http://www.cnblogs.com/x-xk/archive/2012/11/17/2770935.html" target="_blank" rel="noopener">站内信设计思路之己见（基于上百万用户）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#解决方案&quot;&gt;解决方案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;目录 end&lt;/strong&gt;|&lt;em&gt;2018-12-13 12:06&lt;/em&gt;| &lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>View.md</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Blog-View/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Blog-View/</id>
    <published>2018-12-20T12:59:38.764Z</published>
    <updated>2018-12-20T12:59:38.764Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#前端">前端</a><ol><li><a href="#基础">基础</a><ol><li><a href="#规范">规范</a></li></ol></li><li><a href="#css">CSS</a></li><li><a href="#相关库">相关库</a><ol><li><a href="#jquery">Jquery</a></li><li><a href="#bootstrap">Bootstrap</a></li><li><a href="#layui">LayUI</a></li></ol></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><blockquote><p>半学半就 <a href="https://kuangcp.github.io/main.html" target="_blank" rel="noopener">个人导航页</a></p></blockquote><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><blockquote><p><a href="https://www.cnblogs.com/Smiled/p/8377188.html" target="_blank" rel="noopener">我所理解的前端</a><br><a href="http://blog.csdn.net/limlimlim/article/details/9088161" target="_blank" rel="noopener">Javascript字典操作</a><br><a href="https://segmentfault.com/a/1190000002447815" target="_blank" rel="noopener">js数据结构和算法（五）字典和散列（hash） </a></p></blockquote><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><ul><li><a href="https://juejin.im/post/592d4a5b0ce463006b43b6da" target="_blank" rel="noopener">前端开发命名规范</a></li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li><a href="http://www.html5tricks.com/9-nick-css3-menu-button.html" target="_blank" rel="noopener">酷炫按钮</a></li></ul><h2 id="相关库"><a href="#相关库" class="headerlink" title="相关库"></a>相关库</h2><h3 id="Jquery"><a href="#Jquery" class="headerlink" title="Jquery"></a>Jquery</h3><ul><li><a href="http://www.codeceo.com/article/10-jquery-image-player.html#0-tsina-1-78156-397232819ff9a47a7b7e80a40613cfe1" target="_blank" rel="noopener">10个超赞的jQuery图片滑块动画</a></li></ul><h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><h3 id="LayUI"><a href="#LayUI" class="headerlink" title="LayUI"></a>LayUI</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#前端&quot;&gt;前端&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#基础&quot;&gt;基础&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#规范&quot;&gt;规范&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GraphQL</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Database-GraphQL/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Database-GraphQL/</id>
    <published>2018-12-20T12:59:38.764Z</published>
    <updated>2018-12-20T12:59:38.764Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#graphql">GraphQL</a></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h1><blockquote><p><a href="https://graphql.org" target="_blank" rel="noopener">Official Site</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#graphql&quot;&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;目录 end&lt;/strong&gt;|&lt;em&gt;2018-12-13 12:06&lt;/em&gt;| &lt;a
      
    
    </summary>
    
      <category term="数据库" scheme="http://blog.kuangcp.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="GraphQL" scheme="http://blog.kuangcp.top/tags/GraphQL/"/>
    
      <category term="基础" scheme="http://blog.kuangcp.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Oracle</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Database-Oracle/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Database-Oracle/</id>
    <published>2018-12-20T12:59:38.764Z</published>
    <updated>2018-12-20T12:59:38.764Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#oracle">Oracle</a><ol><li><a href="#安装">安装</a><ol><li><a href="#linux">Linux</a><ol><li><a href="#docker安装">Docker安装</a></li></ol></li><li><a href="#windows">Windows</a></li></ol></li><li><a href="#使用">使用</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h1><blockquote><p>强大的数据库, 稍微理解一下他的设计都觉得精妙</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h4><blockquote><p><a href="/Linux/Container/DockerSoft.md#安装oracle">详情&gt;&gt;</a></p></blockquote><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#oracle&quot;&gt;Oracle&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#安装&quot;&gt;安装&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#linux&quot;&gt;Linux&lt;/a&gt;&lt;ol&gt;
&lt;
      
    
    </summary>
    
      <category term="数据库" scheme="http://blog.kuangcp.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Oracle" scheme="http://blog.kuangcp.top/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>MultipleLanguage</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Java-AdvancedLearning-MultipleLanguage/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Java-AdvancedLearning-MultipleLanguage/</id>
    <published>2018-12-20T12:59:38.764Z</published>
    <updated>2018-12-20T12:59:38.764Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#jvm上的多语言使用">JVM上的多语言使用</a><ol><li><a href="#语言生态学">语言生态学</a><ol><li><a href="#重新实现的语言和原生语言">重新实现的语言和原生语言</a></li></ol></li><li><a href="#jvm上的多语言编程">JVM上的多语言编程</a><ol><li><a href="#groovy">Groovy</a></li><li><a href="#scala">Scala</a></li><li><a href="#clojure">Clojure</a></li><li><a href="#为什么非要用java语言">为什么非要用Java语言</a></li><li><a href="#jvm对备选语言的支持">JVM对备选语言的支持</a></li><li><a href="#编译器小说">编译器小说</a></li></ol></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="JVM上的多语言使用"><a href="#JVM上的多语言使用" class="headerlink" title="JVM上的多语言使用"></a>JVM上的多语言使用</h1><h2 id="语言生态学"><a href="#语言生态学" class="headerlink" title="语言生态学"></a>语言生态学</h2><ul><li>大致讨论 解释型和编译型， 动态和静态， 命令式和函数式</li><li>Java是运行时编译，静态类型的命令式语言。强调安全性，代码清晰，性能，并表现出一定程度的繁琐和死板（例如部署）</li></ul><p><strong><code>解释型和编译型</code></strong></p><ul><li>在80 90 年代，边界较为清晰，类C语言是编译型，Perl和Python是解释型。但Java是两者都有</li><li>基于JVM来划分的边界是：该语言是否将源码编译为类文件并且执行，不产生类文件的语言会由解释器逐行执行。有些语言既有编译器又有解释器，有些是既有解释器又有产生字节码的即时编译器JIT</li></ul><p><strong><code>动态和静态类型</code></strong></p><ul><li>动态类型语言，变量在不同的时间可能会有不同的类型 动态类型语言是跟踪变量的值的类型信息，静态类型语言是跟踪变量的类型信息</li><li>静态类型适合做编译型语言</li></ul><p><strong><code>命令式和函数式</code></strong></p><ul><li>Java是典型的命令式语言，命令式语言把程序的运行状态建模为可修改的数据，用一系列的指令来改变状态。因此在命令式语言中，程序状态是核心概念</li><li>命令式语言主要分为两类，一种是面向过程语言，一种是面向对象语言<ul><li>面向过程：Basic Fortran 这种语言将代码和数据完全分离开，有简单的代码操作数据范式</li><li>面向对象：数据和代码（方法形式）封装在对象中，面向对象语言中或多或少会存在元数据（比如：类信息）引入的额外结构</li></ul></li><li>函数式语言他把计算本身当成最重要的概念。函数式语言和过程式语言一样对值进行操作，但他不会修改输入，而是像数学函数一样返回新值<ul><li>函数被看成是一个小处理机，输入值并输出值，他们没有自己的状态，并且将他们和任何外部状态绑定在一起也没有意义<blockquote><p>Groovy带一点函数式风格，Scala对FP的利用更为充分，Clojure是纯粹的函数式语言，没有丁点儿面向对象特性</p></blockquote></li></ul></li></ul><h3 id="重新实现的语言和原生语言"><a href="#重新实现的语言和原生语言" class="headerlink" title="重新实现的语言和原生语言"></a>重新实现的语言和原生语言</h3><blockquote><p>一般来说，以JVM为目标的语言较重新实现的语言能将自己的类型系统和JVM的类型系统结合的更紧密</p></blockquote><ul><li>重新实现已有语言的JVM语言：<ul><li>JRuby：Ruby是一个动态类型的面向对象语言，有些函数式特性，在JVM上基本算解释型的</li><li>Jython：动态的面向对象语言。运行方式是先生成Python字节码再转化成JVM字节码。这使得他能以看起来像是Python的典型解释型模式下运行</li><li>Rhino：他在JVM上提供了一个JavaScript实现，既支持编译模式，也支持解释模式</li></ul></li></ul><h2 id="JVM上的多语言编程"><a href="#JVM上的多语言编程" class="headerlink" title="JVM上的多语言编程"></a>JVM上的多语言编程</h2><ul><li><p>非Java技术的作用可以分为三个层次 特定领域层，动态层，稳定层，多语言编程金字塔：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Book/Java7Developer/p178.jpg" alt="p178金字塔" title="">                </div>                <div class="image-caption">p178金字塔</div>            </figure></li><li><p>静态类型语言更倾向于稳定层的任务，能力不是那么强，通用性较低的技术在金字塔的顶部更好用</p></li></ul><blockquote><p><a href="https://www.zhihu.com/question/21740715" target="_blank" rel="noopener">Java 、Groovy、 Scala 的未来会怎样？</a><br><a href="https://www.jianshu.com/p/3d01a98da9f9" target="_blank" rel="noopener">Java &amp; Groovy &amp; Scala &amp; Kotlin - 16.方法，Lambda 与闭包</a></p></blockquote><ol><li>喜欢Ruby =&gt; 用Groovy</li><li>喜欢LISP，喜欢STM功能 =&gt; 用Clojure</li><li>喜欢C++ =&gt; 用Kotlin</li></ol><p>Scala有两个流派：FP和Better Java。FP派喜欢scalaz，喜欢shapeless，喜欢type level programming。这一派特点是程序高度抽象但可读性奇差。<br>适合PL研究者验证概念，适合业余项目自嗨，也适合学习PL概念。不适合多人协作的工程项目。Better Java派以前之所以存在，单纯是因为Java语法设计太烂，烂到无法忍受。<br>而JVM上当时也没有其它更好的选择。<br>那些告诉你“写了n年Java以后，我切换到Scala，现在每天都活在幸福中”的人，基本都是这一派。但Scala as a better Java的工程性也不好，因为特性太多太复杂，除非有高手带队，否则很难只用到它“better java”的那个子集。<br>解决一个问题的同时，往往引入更多的问题。所以会有Java8发布以后Linkedin所有新项目全部回归Java这种事情。</p><p>Groovy是动态语言，工程性比Scala还差。但是因为有Gradle这种被广泛采用的项目，所以会存活下去。但是请记住爱因斯坦曾经说过：“任何超过两百行的新项目，都不应该采用动态语言开发，无论是Ruby，Python，Perl，Groovy还是Clojure”。<br>哦，对了，也不要用Clojure。因为它是动态语言，而且是Lisp系的动态语言。“Lisp系”意味着，读书的时候可以靠它开眼界。毕业工作以后，对于这一类语言，能躲多远就躲多远。</p><p>刚刚发布的Kotlin看上去靠谱。它不讲究FP有多纯，目标就一个：“a better java”。Kotlin在“到底引入多少FP特性”上面做得恰到好处。 看到Kotlin，我马上就想起了这个演讲：“Please stop polluting our imperative languages with pure concepts”。<br>Kotlin有以下好处：</p><ol><li>强大的IDE。而且是JetBrains第一方支持，不是3年更新一次的第三方插件；</li><li>库多生态强。Kotlin的设计者非常重视和Java的互操作，所以Kotlin号称可以无缝衔接所有Java库。</li><li>宇宙第一运行时：JVM。</li><li>Android上不能用Java8的新语法，Kotlin恰逢其时的出现，抓了一波完美的timing。如果Kotlin依靠Android开发爆发，那服务器端，大数据界，也会收益，最后多面开花，势不可挡。<br>但是Kotlin刚出来，到底有没有它自称的那么好用还待观察。另外，Kotlin社区现在集中力量攻坚Android，在服务器和大数据方向没什么靠谱项目。所以还是得用Java8。<br>总之，“魔镜啊魔镜，谁是JVM上最好的语言”之最后决战，将是Java10 vs Kotlin（Java9在语法特性上已经输了）。而在这场最终决战之前，C#已经靠着CoreCLR统一世界了。</li></ol><blockquote><p>最后送上人生经验两则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match comment with</span><br><span class="line">| &quot;X怎么不能Y？人家Z就是这样做的。&quot; -&gt;  reply &quot;卡马克能用haskell移植Wolf 3D，你能？&quot;</span><br><span class="line">| _ -&gt; reply &quot;Thank you&quot;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match location with</span><br><span class="line">| Office -&gt; use whatever your boss chose</span><br><span class="line">| Home   -&gt; use F#</span><br></pre></td></tr></table></figure><h3 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h3><blockquote><p>James Strachan 于2003年发明，可以看作动态层语言，擅长DSL构建</p></blockquote><h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><blockquote><p>Martin Odersky 于2003年意外产生，一门支持函数式编程的面向对象语言<br>有一个非常好的ScalaTest测试框架，比Junit更简洁，</p></blockquote><h3 id="Clojure"><a href="#Clojure" class="headerlink" title="Clojure"></a>Clojure</h3><blockquote><p>Rich Hickey设计的属于Lisp家族的语言，动态类型的函数式语言，编译型语言但是通常以源码发布</p></blockquote><h3 id="为什么非要用Java语言"><a href="#为什么非要用Java语言" class="headerlink" title="为什么非要用Java语言"></a>为什么非要用Java语言</h3><ul><li>Java 作为一种通用，静态类型的编译型语言，实现稳定层方便，但是放到金字塔上层就成为负担<ul><li>编译耗时</li><li>静态类型不够灵活，重构时间长</li><li>部署麻烦</li><li>语法不适合生产DSL（领域专用语言 domain specific language）</li></ul></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Book/Java7Developer/p180.jpg" alt="p180 分类" title="">                </div>                <div class="image-caption">p180 分类</div>            </figure><hr><h3 id="JVM对备选语言的支持"><a href="#JVM对备选语言的支持" class="headerlink" title="JVM对备选语言的支持"></a>JVM对备选语言的支持</h3><ul><li>一种语言要在JVM上运行的两种方式：<ul><li>一个产生类文件的编译器</li><li>一个用JVM字节码实现的解释器<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Book/Java7Developer/p183.jpg" alt="p183.jpg" title="">                </div>                <div class="image-caption">p183.jpg</div>            </figure></li></ul></li><li>有一种评估语言运行时环境复杂度的简单方法，看运行实现中Jar的大小，Clojure相对较轻量，JRuby就显得重</li></ul><hr><h3 id="编译器小说"><a href="#编译器小说" class="headerlink" title="编译器小说"></a>编译器小说</h3><blockquote><p>语言的某些特性是由编程环境和高层语言合成的，在底层JVM中不存在，这种特性就称为编译器小说</p></blockquote><ul><li>Java中的编译器小说还包括检查型异常和内部类（通常内部类都会转换成带有特殊合成访问方法的顶层类），如果jar -cvf看jar包，能看到很多含<code>$</code>的类，这些就是被取出转换成<code>常规类</code>的内部类<br><code>备选语言的编译器小说</code><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Book/Java7Developer/p184.jpg" alt="p184.jpg" title="">                </div>                <div class="image-caption">p184.jpg</div>            </figure></li><li>函数一等值：<ul><li>这个就是说可以将函数当成其他普通值一样操作，Java只能把类当做最小的代码和功能单元。解决这种差异的方法是，因为对象只是把数据和操作数据的方法绑定在一起，只要有一个没有状态只有一个方法的对象。</li><li>这似乎就是Java8的lambda表达式的存在条件，单方法的实现用操作符 <code>-&gt;</code></li></ul></li><li>多继承：<ul><li>在Java和JVM中无法实现多继承，只能使用接口，但是接口又没有任何具体的方法</li><li>在Scala中特性机制 trait 允许将方法的实现混合到类中，所以提供了不同的继承视图，这种行为必须由Scala编译器和运行时合成，在VM层面不提供这种特性</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#jvm上的多语言使用&quot;&gt;JVM上的多语言使用&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#语言生态学&quot;&gt;语言生态学&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#重新实现的语言和
      
    
    </summary>
    
      <category term="Java" scheme="http://blog.kuangcp.top/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Server.md</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Blog-Server/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Blog-Server/</id>
    <published>2018-12-20T12:59:38.764Z</published>
    <updated>2018-12-20T12:59:38.764Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#server">Server</a><ol><li><a href="#终端">终端</a></li><li><a href="#内存优化">内存优化</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h1><blockquote><p>服务器运维相关</p></blockquote><h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzIwNjEwNTQ4Mw==&amp;mid=2651580395&amp;idx=1&amp;sn=d311abab344aed97fe8b5244aa51e08d&amp;chksm=8cd9f90fbbae7019fc5ee8fbe423c8027527f068bcb71ad3d7a18b85a503bc4ffd377dfb9b6d&amp;mpshare=1&amp;scene=1&amp;srcid=0110cegY48pxj9fMGcObeEMT&amp;pass_ticket=9AXPGsZExYCvgc64Pq%2Fge7rdAI7U%2F%2BG%2F5NrA4rv24OXW2BDRnIZzo5eMh%2F%2FanrNZ#rd" target="_blank" rel="noopener">效率为王：终端管理工具 Tmux </a></li></ul><h2 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h2><blockquote><p><a href="http://www.cnblogs.com/dongzhiquan/p/5043912.html" target="_blank" rel="noopener">参考博客 大内存页配置实战</a> <code>内存占用大, 访问随机就需要使用大内存页了</code><br><a href="http://www.oracle.com/technetwork/cn/articles/servers-storage-dev/hugepages-2099009-zhs.html" target="_blank" rel="noopener">Oracle官网的使用案例</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#server&quot;&gt;Server&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#终端&quot;&gt;终端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#内存优化&quot;&gt;内存优化&lt;/a&gt;&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JVM</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Java-AdvancedLearning-JVM/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Java-AdvancedLearning-JVM/</id>
    <published>2018-12-20T12:59:38.764Z</published>
    <updated>2018-12-20T12:59:38.764Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#jvm">JVM</a><ol><li><a href="#hotspot-jvm">Hotspot JVM</a></li><li><a href="#openj9">OpenJ9</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><blockquote><p>Oracle 默认采用的是 Hotspot JVM</p></blockquote><h2 id="Hotspot-JVM"><a href="#Hotspot-JVM" class="headerlink" title="Hotspot JVM"></a>Hotspot JVM</h2><h2 id="OpenJ9"><a href="#OpenJ9" class="headerlink" title="OpenJ9"></a>OpenJ9</h2><p>IBM主导开发, 捐赠给Eclipse基金会</p><blockquote><p><a href="http://www.eclipse.org/openj9/" target="_blank" rel="noopener">Officail Site</a> | <a href="https://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/com.ibm.java.vm.80.doc/docs/j9_intro.html" target="_blank" rel="noopener">IBM原文</a></p></blockquote><ul><li><a href="https://github.com/eclipse/openj9" target="_blank" rel="noopener">Github:</a></li></ul><blockquote><p><a href="http://www.infoq.com/cn/news/2017/09/IBM-JVM-OpenJ9-Eclipse" target="_blank" rel="noopener">参考博客: IBM开源JVM实现OpenJ9，并提交Eclipse基金会托管)</a><br><a href="http://www.infoq.com/cn/news/2018/03/OMR-OpenJ9" target="_blank" rel="noopener">参考博客: Eclipse Open J9：Eclipse OMR项目提供的开源JVM</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#jvm&quot;&gt;JVM&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#hotspot-jvm&quot;&gt;Hotspot JVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#openj9&quot;&gt;O
      
    
    </summary>
    
      <category term="Java" scheme="http://blog.kuangcp.top/categories/Java/"/>
    
    
      <category term="JVM" scheme="http://blog.kuangcp.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java的JDK以及JRE</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Java-AdvancedLearning-JDKAndJRE/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Java-AdvancedLearning-JDKAndJRE/</id>
    <published>2018-12-20T12:59:38.760Z</published>
    <updated>2018-12-20T12:59:38.760Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#jdk-and-jre">JDK And JRE</a></li><li><a href="#oracle">Oracle</a><ol><li><a href="#oracle-jdk">Oracle JDK</a></li><li><a href="#oracle-jre">Oracle JRE</a></li></ol></li><li><a href="#openjdk">OpenJDK</a></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="JDK-And-JRE"><a href="#JDK-And-JRE" class="headerlink" title="JDK And JRE"></a>JDK And JRE</h1><blockquote><p>LTS: 8 11</p></blockquote><p>但是11发布后, Oracle修改了使用协议, JDK商用需付费, 仅个人开发演示免费 <a href="https://www.oracle.com/technetwork/java/javase/terms/license/javase-license.html" target="_blank" rel="noopener">License</a></p><h1 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h1><h2 id="Oracle-JDK"><a href="#Oracle-JDK" class="headerlink" title="Oracle JDK"></a>Oracle JDK</h2><blockquote><p>以下是Java8的结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── bin/</span><br><span class="line">├── COPYRIGHT</span><br><span class="line">├── include/</span><br><span class="line">├── javafx-src.zip</span><br><span class="line">├── jre/</span><br><span class="line">├── lib/</span><br><span class="line">├── LICENSE</span><br><span class="line">├── man/</span><br><span class="line">├── README.html</span><br><span class="line">├── release</span><br><span class="line">├── src.zip</span><br><span class="line">├── THIRDPARTYLICENSEREADME-JAVAFX.txt</span><br><span class="line">└── THIRDPARTYLICENSEREADME.txt</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>bin目录下常用工具: <ul><li>java javac javap jar </li><li>jconsole jmap jmc jps jstack jstat jstatd jvisualvm</li></ul></li></ul><blockquote><p> <a href="/Java/AdvancedLearning/JavaPerformance.md">Useage: Java 性能分析</a></p></blockquote><hr><blockquote><p>以下是Java11的目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── bin</span><br><span class="line">├── conf</span><br><span class="line">├── include</span><br><span class="line">├── jmods</span><br><span class="line">├── legal</span><br><span class="line">├── lib</span><br><span class="line">├── README.html</span><br><span class="line">└── release</span><br></pre></td></tr></table></figure></p></blockquote><hr><h2 id="Oracle-JRE"><a href="#Oracle-JRE" class="headerlink" title="Oracle JRE"></a>Oracle JRE</h2><blockquote><p>Java11 开始, 已去掉了JRE</p></blockquote><blockquote><p>以下是Java8的结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── bin/</span><br><span class="line">├── COPYRIGHT</span><br><span class="line">├── lib/</span><br><span class="line">├── LICENSE</span><br><span class="line">├── plugin/</span><br><span class="line">├── README</span><br><span class="line">├── THIRDPARTYLICENSEREADME-JAVAFX.txt</span><br><span class="line">├── THIRDPARTYLICENSEREADME.txt</span><br><span class="line">└── Welcome.html</span><br></pre></td></tr></table></figure></p></blockquote><hr><h1 id="OpenJDK"><a href="#OpenJDK" class="headerlink" title="OpenJDK"></a>OpenJDK</h1><blockquote><p><a href="http://openjdk.java.net/" target="_blank" rel="noopener">Official Site</a> | <a href="https://adoptopenjdk.net/nightly.html" target="_blank" rel="noopener">Open JDK下载地址</a></p></blockquote><blockquote><p><a href="http://jdk.java.net/11/" target="_blank" rel="noopener">Open JDK 11: Download</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#jdk-and-jre&quot;&gt;JDK And JRE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#oracle&quot;&gt;Oracle&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#ora
      
    
    </summary>
    
      <category term="Java" scheme="http://blog.kuangcp.top/categories/Java/"/>
    
    
      <category term="JDK" scheme="http://blog.kuangcp.top/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>Java字节码</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Java-AdvancedLearning-ClassFile/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Java-AdvancedLearning-ClassFile/</id>
    <published>2018-12-20T12:59:38.760Z</published>
    <updated>2018-12-20T12:59:38.760Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#java基础">Java基础</a><ol><li><a href="#类和字节码">类和字节码</a><ol><li><a href="#类加载和类对象">类加载和类对象</a><ol><li><a href="#类加载器">类加载器</a></li><li><a href="#加载和连接">加载和连接</a></li><li><a href="#class对象">Class对象</a></li><li><a href="#类加载器">类加载器</a></li></ol></li><li><a href="#方法句柄">方法句柄</a></li></ol></li><li><a href="#查看class文件">查看class文件</a><ol><li><a href="#常量池">常量池</a></li><li><a href="#字节码">字节码</a><ol><li><a href="#运行时环境">运行时环境</a></li><li><a href="#操作码介绍">操作码介绍</a></li><li><a href="#加载和存储操作码">加载和存储操作码</a></li><li><a href="#数学运算操作码">数学运算操作码</a></li><li><a href="#执行控制操作码">执行控制操作码</a></li><li><a href="#调用操作码">调用操作码</a></li><li><a href="#平台操作码">平台操作码</a></li><li><a href="#操作码的快捷形式">操作码的快捷形式</a></li><li><a href="#invokedynamic">invokedynamic</a></li></ol></li></ol></li><li><a href="#序列化">序列化</a><ol><li><a href="#serialversionuid">serialVersionUID</a></li><li><a href="#其他业内主流编解码框架">其他业内主流编解码框架</a><ol><li><a href="#messagepack">MessagePack</a></li><li><a href="#protobuf">Protobuf</a><ol><li><a href="#proto文件定义">proto文件定义</a></li><li><a href="#linux上安装">Linux上安装</a></li><li><a href="#通过docker使用">通过Docker使用</a></li><li><a href="#对于java的使用">对于Java的使用</a></li></ol></li><li><a href="#thrift">Thrift</a></li><li><a href="#marshalling">Marshalling</a></li></ol></li></ol></li><li><a href="#热更新">热更新</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="类和字节码"><a href="#类和字节码" class="headerlink" title="类和字节码"></a>类和字节码</h2><blockquote><p><a href="https://github.com/Kuangcp/JavaBase/tree/master/java-classfile/src/main/java/com/github/kuangcp" target="_blank" rel="noopener">个人相关代码</a> </p></blockquote><p><strong><code>相关项目</code></strong></p><blockquote><p><a href="http://commons.apache.org/proper/commons-bcel/index.html" target="_blank" rel="noopener">Apache bcel</a></p></blockquote><h3 id="类加载和类对象"><a href="#类加载和类对象" class="headerlink" title="类加载和类对象"></a>类加载和类对象</h3><ul><li>一个<code>.class</code>文件定义了JVM中的类型，包括了域,方法，继承信息，注解和其他元数据</li></ul><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><ul><li style="list-style: none"><input type="checkbox"> TODO 学习类加载器<blockquote><p><a href="https://blog.csdn.net/yuan22003/article/details/6839335\" target="_blank" rel="noopener">类装载器、双亲委托模型、命名空间、安全性</a><br><a href="https://blog.csdn.net/wangyang1354/article/details/49448007" target="_blank" rel="noopener">java ClassLoader类解析-双亲委托机制</a></p></blockquote></li></ul><h4 id="加载和连接"><a href="#加载和连接" class="headerlink" title="加载和连接"></a>加载和连接</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Book/Java7Developer/p107.jpg" alt="图" title="">                </div>                <div class="image-caption">图</div>            </figure><p><a href="http://ifeve.com/%e7%ac%ac%e4%b8%83%e7%ab%a0-%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%b1%bb%e5%8a%a0%e8%bd%bd%e6%9c%ba%e5%88%b6/" target="_blank" rel="noopener">参考博客: 第七章.虚拟机类加载机制</a><br><code>加载</code></p><ul><li>这个过程就是读取字节码文件，创建一个字节数组装在这些内容，加载结束后这个对象还不能直接调用 </li></ul><p><code>连接</code></p><ul><li>加载完成后，类必须连接起来，分为三步：验证，准备，解析。<ul><li>验证：<ul><li>验证文件的合理性，完整性检查，检查常量池，方法的字节码检查。主要的：</li><li>是否所有方法都遵守访问控制关键字的限定</li><li>方法调用的参数个数和静态类型是否正确</li><li>确保字节码不会试图滥用堆栈</li><li>确保变量使用之前被正确初始化了</li><li>检查变量是否仅被赋予恰当类型的值</li></ul></li><li>准备：<ul><li>分配内存，准备初始化类中的静态变量，但不会现在就初始化，也不会执行任何VM字节码</li></ul></li><li>解析：<ul><li>促使VM检查类文件中所引用的类型是不是都是已知的类型。如果有运行时有未知的类型，那又要引发一次类加载过程</li><li>当需要加载的类全部加载解析完毕后，VM就可以初始化最初那个加载的类了。</li><li>这时所有的静态变量都可以进行初始化，所有静态代码块都会运行，这一步完成后，类就能使用了</li></ul></li></ul></li></ul><h4 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h4><ul><li>加载和连接过程的最终结果是一个Class对象，Class对象可以和反射API一起实现对方法，域构造方法等类成员的间接访问</li></ul><blockquote><p>所以一个类的定义就会有一个Class对象, 但是这个对象的类型呢?怎么判断, Class对象的类型就是他的值么?</p></blockquote><h4 id="类加载器-1"><a href="#类加载器-1" class="headerlink" title="类加载器"></a>类加载器</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Book/Java7Developer/p110.jpg" alt="图" title="">                </div>                <div class="image-caption">图</div>            </figure><ul><li>Java平台经典类加载器：<ul><li>根（引导）加载器： 通常在VM启动后不久就实例化，作用是加载系统的基础JAR(主要是rt.jar)，并且不做验证工作</li><li>扩展类加载器： 加载安装时自带的标准扩展，一般包括安全性扩展</li><li>应用或系统类加载器： 应用最广泛的类加载器，负责加载应用类，在大多SE环境中主要工作是由他完成</li><li>定制类载器： 为了企业框架定制的加载器</li></ul></li></ul><hr><h3 id="方法句柄"><a href="#方法句柄" class="headerlink" title="方法句柄"></a>方法句柄</h3><blockquote><p>主要用于反射 用到再学</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Book/Java7Developer/p118.jpg" alt="图" title="">                </div>                <div class="image-caption">图</div>            </figure><hr><h2 id="查看class文件"><a href="#查看class文件" class="headerlink" title="查看class文件"></a>查看class文件</h2><blockquote><p>javap: JDK内置命令, 用来探视类文件内部和反编译class文件</p></blockquote><hr><h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><blockquote><p>常量池是为类文件中的其他常量元素提供快捷访问方式的区域。对于JVM来说常量池相当于符号表<br><a href="http://www.cnblogs.com/LeonNew/p/5314731.html" target="_blank" rel="noopener">参考博客</a></p></blockquote><ul><li><code>javap -v class文件</code> 输出很多额外信息，# 开头的就是常量池信息<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Book/Java7Developer/p120.jpg" alt="图" title="">                </div>                <div class="image-caption">图</div>            </figure></li></ul><hr><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><blockquote><p><a href="https://www.cnblogs.com/beautiful-code/p/6425376.html" target="_blank" rel="noopener">参考博客: 学会阅读Java字节码</a></p></blockquote><ul><li>字节码是程序的中间表达形式，源码和机器码之间的产物</li><li>字节码是由源文件执行javac产生的</li><li>某些高级语言特性（语法糖）在字节码中给去掉了，例如循环结构，会转换成为分支指令</li><li>每个操作都由一个字节表示，因此叫做字节码</li><li>字节码是一种抽象表示方法</li><li><p>字节码进一步编译得到机器码</p></li><li><p><code>javap -c -p class文件</code> 反编译字节码文件，-p 能看到私有属性</p><ul><li>输出所有的属性以及类的定义信息</li><li>静态块</li><li>构造方法</li><li>方法信息</li><li>静态属性信息</li><li>静态方法信息</li></ul></li></ul><h4 id="运行时环境"><a href="#运行时环境" class="headerlink" title="运行时环境"></a>运行时环境</h4><blockquote><p>因为JVM没有CPU那样的寄存器，所以是采用的堆栈来计算的，称为操作数栈或者计算堆栈</p></blockquote><ul><li>当一个类被链接进运行时环境时，字节码会受到检查，其中很多验证都可以归结为对栈中类型模式的分析</li><li>方法需要一块内存区域作为计算堆栈来计算新值，另外每个运行的线程都需要一个调用堆栈来记录当前正在执行的方法，这两个栈会有交互</li></ul><h4 id="操作码介绍"><a href="#操作码介绍" class="headerlink" title="操作码介绍"></a>操作码介绍</h4><ul><li>字节码由操作码 opcode 序列构成，每个指令后可能会带参数，操作码希望看到栈处于指定状态中，然后他对栈进行操作处理，把参数移走，放入结果</li><li>操作码表有四列：<ul><li>名称：操作码类型的通用名称</li><li>参数：操作码的参数，以i开头的是用来作为常量池或局部变量中的查询索引的几个字节，如果有更多的参数，将会合并<ul><li>如果参数出现在括号里，就表明不是所有形式的操作码都会使用他</li></ul></li><li>堆栈布局：他展示了栈在操作码执行前后的状态。括号中的元素表示是可选的</li><li>描述：描述操作码的用处</li></ul></li></ul><p>[ ] 下面的内容需要继续阅读Java7程序员修炼之道</p><h4 id="加载和存储操作码"><a href="#加载和存储操作码" class="headerlink" title="加载和存储操作码"></a>加载和存储操作码</h4><h4 id="数学运算操作码"><a href="#数学运算操作码" class="headerlink" title="数学运算操作码"></a>数学运算操作码</h4><h4 id="执行控制操作码"><a href="#执行控制操作码" class="headerlink" title="执行控制操作码"></a>执行控制操作码</h4><h4 id="调用操作码"><a href="#调用操作码" class="headerlink" title="调用操作码"></a>调用操作码</h4><h4 id="平台操作码"><a href="#平台操作码" class="headerlink" title="平台操作码"></a>平台操作码</h4><h4 id="操作码的快捷形式"><a href="#操作码的快捷形式" class="headerlink" title="操作码的快捷形式"></a>操作码的快捷形式</h4><h4 id="invokedynamic"><a href="#invokedynamic" class="headerlink" title="invokedynamic"></a>invokedynamic</h4><blockquote><p>这个特性是针对 框架开发和非Java语言准备的</p></blockquote><hr><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513589&amp;idx=1&amp;sn=d402d623d9121453f1e570395c7f99d7&amp;chksm=80d67a36b7a1f32054d4c779dd26e8f97a075cf4d9ed1281f16d09f1df50a29319cd37520377&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">码农翻身:序列化： 一个老家伙的咸鱼翻身</a> <code>对象转化为二进制流</code></p></blockquote><h3 id="serialVersionUID"><a href="#serialVersionUID" class="headerlink" title="serialVersionUID"></a>serialVersionUID</h3><blockquote><p>简单的说就是类的版本控制, 标明类序列化时的版本, 版本一致表明这两个类定义一致<br>在进行反序列化时, JVM会把传来的字节流中的serialVersionUID与本地相应实体（类）的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(InvalidCastException)<br><a href="http://swiftlet.net/archives/1268" target="_blank" rel="noopener">参考博客</a></p></blockquote><ul><li>serialVersionUID有两种显示的生成方式： <ul><li>一个是默认的1L</li><li>一个是根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段</li></ul></li></ul><blockquote><p>当你一个类实现了Serializable接口，如果没有定义serialVersionUID，Eclipse会提供这个提示功能告诉你去定义 。<br>在Eclipse中点击类中warning的图标一下，Eclipse就会自动给定两种生成的方式。<br>如果不想定义它，在Eclipse的设置中也可以把它关掉的，设置如下：<br>Window ==&gt; Preferences ==&gt; Java ==&gt; Compiler ==&gt; Error/Warnings ==&gt;Potential programming problems<br>将Serializable class without serialVersionUID的warning改成ignore即可。</p></blockquote><hr><h3 id="其他业内主流编解码框架"><a href="#其他业内主流编解码框架" class="headerlink" title="其他业内主流编解码框架"></a>其他业内主流编解码框架</h3><blockquote><p>因为Java序列化的性能和存储开销都表现不好,而且不能跨语言, 所以一般不使用Java的序列化而是使用以下流行的库</p></blockquote><h4 id="MessagePack"><a href="#MessagePack" class="headerlink" title="MessagePack"></a>MessagePack</h4><blockquote><p><a href="https://github.com/msgpack" target="_blank" rel="noopener">Github:msgpack</a> | <a href="http://hao.jobbole.com/messagepack/" target="_blank" rel="noopener">参考博客: MessagePack：一种高效二进制序列化格式</a></p></blockquote><h4 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h4><blockquote><p>Google开源的库 全称 <code>Google Protocol Buffers</code> |  <a href="https://github.com/google/protobuf" target="_blank" rel="noopener">Github : Protobuf</a></p></blockquote><blockquote><p><a href="http://www.cnblogs.com/dkblog/archive/2012/03/27/2419010.html" target="_blank" rel="noopener">参考博客: Protobuf语言指南</a> <code>较为详细, 只是版本有点旧</code><br><a href="https://juejin.im/entry/59c1214df265da0658151a2c" target="_blank" rel="noopener">参考博客: 详解如何在NodeJS中使用Google的Protobuf</a> | <a href="https://github.com/dcodeIO/protobuf.js" target="_blank" rel="noopener">protocobuf</a><br><a href="https://blog.csdn.net/hguisu/article/details/20721109" target="_blank" rel="noopener">Google 开源技术protobuf </a><br><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/index.html" target="_blank" rel="noopener">Google Protocol Buffer 的使用和原理</a></p></blockquote><blockquote><p><a href="http://blog.jobbole.com/107405/" target="_blank" rel="noopener">参考博客: 数据交换利器 Protobuf 技术浅析</a><br><a href="https://blog.csdn.net/u011518120/article/details/54604615" target="_blank" rel="noopener">参考博客: Protobuf3语言指南</a></p></blockquote><ul><li>他将数据结构以 proto后缀的文件进行描述, 通过代码生成工具, 可以生成对应数据结构的POJO对象和Protobuf相关的方法和属性<ul><li>特点:<ul><li>结构化数据存储格式: XML JSON等</li><li>高效的编解码性能</li><li>语言无关, 平台无关, 扩展性好</li><li>官方支持 Java C++ Python三种语言, 并且Js的支持也比较好<a href="https://github.com/dcodeIO/ProtoBuf.js/" target="_blank" rel="noopener"></a></li></ul></li><li>数据描述文件和代码生成机制优点:<ul><li>文本化的数据结构描述语言, 可以实现语言和平台无关, 特别适合异构系统间的集成</li><li>通过标识字段的顺序, 可以实现协议的前向兼容 <em>在不同版本的数据结构进程间进行数据传递</em></li><li>自动代码生成, 不需要手工编写同样数据结构的C++和Java版本;</li><li>方便后续的管理和维护,相比于代码, 结构化的文档更容易管理和维护</li></ul></li></ul></li><li>习惯性规则:<ul><li>命名: <code>packageName.MessageName.proto</code></li></ul></li></ul><blockquote><p>只是编解码的工具, 不支持读半包, 粘包拆包</p></blockquote><h5 id="proto文件定义"><a href="#proto文件定义" class="headerlink" title="proto文件定义"></a>proto文件定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 用户数据信息</span><br><span class="line">message Article &#123;</span><br><span class="line">    required int32 articleId = 1;         // 文章id</span><br><span class="line">    optinal string articleExcerpt = 4;    // 文章摘要</span><br><span class="line">    repeated string articlePicture = 5;   // 文章附图</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面定义了一个消息, 消息具有三个属性, 且行末的注释都会变成Javadoc注释  </p></blockquote><ol><li>message 是消息定义的关键字</li><li>required 表示这个字段是必需的, 必须在序列化的时候被赋值。</li><li>optional 代表这个字段是可选的，可以为0个或1个但不能大于1个。</li><li>repeated 则代表此字段可以被重复任意多次包括0次。</li><li>int32和string是字段的类型。后面是我们定义的字段名。</li><li>最后的1，2，3则是代表每个字段的一个唯一的编号标签，在同一个消息里不可以重复。这些编号标签用与在消息二进制格式中标识你的字段，并且消息一旦定义就不能更改。<ul><li>需要说明的是标签在1到15范围的采用一个字节进行编码。所以通常将标签1到15用于频繁发生的消息字段。编号标签大小的范围是1 到 2的29次幂–1。</li><li>此外不能使用protobuf系统预留的编号标签（19000 －19999）。</li></ul></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Learn/java/protobuf/protobuf-type.jpeg" alt="数据类型对应表" title="">                </div>                <div class="image-caption">数据类型对应表</div>            </figure><p><em>复杂类型</em>  </p><blockquote><p>定义了enum枚举类型，嵌套的消息。甚至对原有的消息进行了扩展，也可以对字段设置默认值。添加注释等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package &quot;com.github.kuangcp&quot;;</span><br><span class="line">message Article &#123;</span><br><span class="line">  required int32 article_id = 1;</span><br><span class="line">  optional string article_excerpt = 2;</span><br><span class="line">  repeated string article_picture = 3;</span><br><span class="line">  optional int32  article_pagecount = 4 [default = 0];</span><br><span class="line">  enum ArticleType &#123;</span><br><span class="line">    NOVEL = 0;</span><br><span class="line">    PROSE = 1;</span><br><span class="line">    PAPER = 2;</span><br><span class="line">    POETRY = 3;</span><br><span class="line">  &#125;</span><br><span class="line">  optional ArticleType article_type = 5 [default = NOVEL];</span><br><span class="line">  message Author &#123;</span><br><span class="line">    required string name = 1; //作者的名字</span><br><span class="line">    optional string phone = 2;</span><br><span class="line">  &#125;</span><br><span class="line">  optional Author author = 6;</span><br><span class="line">  repeated int32 article_numberofwords = 7 [packed=true];</span><br><span class="line">  reserved  9, 10, 12 to 15;</span><br><span class="line">  extensions 100 to 1000;</span><br><span class="line">&#125;</span><br><span class="line">extend Article &#123;</span><br><span class="line">  optional int32 followers_count = 101;</span><br><span class="line">  optional int32 likes_count= 102;</span><br><span class="line">&#125;</span><br><span class="line">message Other &#123;</span><br><span class="line">  optional string other_info = 1;</span><br><span class="line">  oneof test_oneof &#123;</span><br><span class="line">    string code1 = 2;</span><br><span class="line">    string code2 = 3;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>此外reserved关键字主要用于保留相关编号标签，主要是防止在更新proto文件删除了某些字段，而未来的使用者定义新的字段时重新使用了该编号标签。这会引起一些问题在获取老版本的消息时，譬如数据冲突，隐藏的一些bug等。所以一定要用reserved标记这些编号标签以保证不会被使用</p></blockquote><blockquote><p>当我们需要对消息进行扩展的时候，我们可以用extensions关键字来定义一些编号标签供第三方扩展。这样的好处是不需要修改原来的消息格式。就像上面proto文件，我们用extend关键字来扩展。只要扩展的字段编号标签在extensions定义的范围里。</p></blockquote><blockquote><p>对于基本数值类型，由于历史原因，不能被protobuf更有效的encode。所以在新的代码中使用packed=true可以更加有效率的encode。注意packed只能用于repeated 数值类型的字段。不能用于string类型的字段。</p></blockquote><blockquote><p>在消息Other中我们看到定义了一个oneof关键字。这个关键字作用比较有意思。当你设置了oneof里某个成员值时，它会自动清除掉oneof里的其他成员，也就是说同一时刻oneof里只有一个成员有效。这常用于你有许多optional字段时但同一时刻只能使用其中一个，就可以用oneof来加强这种效果。但需要注意的是oneof里的字段不能用required，optional，repeted关键字</p></blockquote><p><em>导入另一个proto定义</em><br><code>import &quot;article.proto&quot;;</code></p><ul><li>更新Protobuf文件的要求:<ol><li>不能改变已有的任何编号标签。</li><li>只能添加optional和repeated的字段。这样旧代码能够解析新的消息，只是那些新添加的字段会被忽略。但是序列化的时候还是会包含哪些新字段。而新代码无论是旧消息还是新消息都可以解析。</li><li>非required的字段可以被删除，但是编号标签不可以再次被使用，应该把它标记到reserved中去</li><li>非required可以被转换为扩展字段，只要字段类型和编号标签保持一致</li><li>相互兼容的类型，可以从一个类型修改为另一个类型，譬如int32的字段可以修改为int64</li></ol></li></ul><hr><blockquote><ul><li>使用上, 因为有多个消息类型, 那么会采用一个数值id作为code, 进行对应 方便沟通</li></ul></blockquote><h5 id="Linux上安装"><a href="#Linux上安装" class="headerlink" title="Linux上安装"></a>Linux上安装</h5><blockquote><p>只是安装2.5版本 <a href="http://www.cnblogs.com/brainy/archive/2012/05/13/2498671.html" target="_blank" rel="noopener">参考博客: linux下Google的Protobuf安装及使用笔记</a> | <a href="http://dofound.blog.163.com/blog/static/1711432462013524111644655/" target="_blank" rel="noopener">参考:proto buffer 安装 及 调用</a></p></blockquote><ul><li><a href="https://github.com/google/protobuf/releases/tag/v2.5.0" target="_blank" rel="noopener">下载2.5</a> 并解压 <ul><li>进入目录  <code>./configure</code> </li><li><code>make</code> 然后 <code>make check</code> 然后 <code>sudo make install</code></li><li><code>protoc --version</code> 有版本则安装成功</li></ul></li></ul><blockquote><p>注意: ./configure 时, 默认会安装在/usr/local目录下，可以加<code>--prefix=/usr</code>来指定安装到/usr/lib下  </p><blockquote><p>如果不加, 上述参数就要执行 <code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib</code><br>当然,可以将这个环境变量的设置加在 .zshrc 或者 .bashrc 里<br>不然就会报错: <code>protoc: error while loading shared libraries: libprotobuf.so.8: cannot open shared object file: No such file or directory</code></p></blockquote></blockquote><h5 id="通过Docker使用"><a href="#通过Docker使用" class="headerlink" title="通过Docker使用"></a>通过Docker使用</h5><h5 id="对于Java的使用"><a href="#对于Java的使用" class="headerlink" title="对于Java的使用"></a>对于Java的使用</h5><blockquote><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/index.html" target="_blank" rel="noopener">Google Protocol Buffer 的使用和原理</a> <code>C++ 但是原理差不多</code></p></blockquote><p><code>生成Java文件</code><br>touch <em>hi.proto</em><br><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package lm;</span><br><span class="line">message helloworld&#123;</span><br><span class="line">    required int32 id = 1;//ID</span><br><span class="line">    required string str = 2;//str</span><br><span class="line">    optional int32 opt = 3;//optional field</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>据此生成Java文件 <code>mkdir src &amp;&amp; protoc --java_out=./src hi.proto</code><br><em>也可以使用该脚本更新协议</em><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># proto文件中明确定义了一样的包结构就可以直接跑脚本</span></span><br><span class="line">basePath=<span class="string">'minigame/proto/proto'</span></span><br><span class="line">targetPath=<span class="string">'ssss'</span></span><br><span class="line">rm -rf <span class="variable">$targetPath</span> \</span><br><span class="line">&amp;&amp; mkdir <span class="variable">$targetPath</span> \</span><br><span class="line">&amp;&amp; protoc <span class="variable">$basePath</span>/*.proto --java_out=<span class="variable">$targetPath</span> \</span><br></pre></td></tr></table></figure></li></ul><p><code>使用</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化一个构建器</span></span><br><span class="line">helloworld.Builder msg = helloworld.newBuilder();</span><br><span class="line"><span class="comment">// 填充信息</span></span><br><span class="line">msg.setId(<span class="number">12</span>);</span><br></pre></td></tr></table></figure></p><hr><h4 id="Thrift"><a href="#Thrift" class="headerlink" title="Thrift"></a>Thrift</h4><blockquote><p><a href="https://thrift.apache.org/" target="_blank" rel="noopener">官网</a>源于Facebook, 支持多种语言: C++ C# Cocoa Erlang Haskell Java Ocami Perl PHP Python Ruby Smalltalk</p></blockquote><ul><li>它支持数据(对象)序列化和多种类型的RPC服务, Thrift适用于静态的数据交换, 需要预先确定好他的数据结构, 当数据结构发生变化时,需要重新编辑IDL文件</li></ul><h4 id="Marshalling"><a href="#Marshalling" class="headerlink" title="Marshalling"></a>Marshalling</h4><blockquote><p>JBOSS 内部使用的编解码框架</p></blockquote><h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><blockquote><p>通过替换 class 实现不停机热更新</p></blockquote><blockquote><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/howto-hotswapping.html" target="_blank" rel="noopener">Spring hot swapping</a></p></blockquote><ol><li>Instrumentation</li><li>自定义类加载器</li><li>OSGI 热插拔接口</li></ol><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html" target="_blank" rel="noopener">Instrumentation 新功能</a><br><a href="https://www.jianshu.com/p/b72f66da679f" target="_blank" rel="noopener">基于Java Instrument的Agent实现</a><br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-instrumentation/" target="_blank" rel="noopener">Java 5 特性 Instrumentation 实践</a><br><a href="https://blog.csdn.net/javierhui111/article/details/3830833" target="_blank" rel="noopener">java组件中的热插拔（osgi)</a><br><a href="https://www.cnblogs.com/cm4j/p/hot_deploy.html" target="_blank" rel="noopener">agentmain 方式 </a></p><p>相关项目: </p><p><a href="https://github.com/youxijishu/game-hot-update" target="_blank" rel="noopener">game-hot-update</a> <a href="https://www.cnblogs.com/wgslucky/p/9127681.html" target="_blank" rel="noopener">https://www.cnblogs.com/wgslucky/p/9127681.html</a><br><a href="https://github.com/chaopeng/groovy-hotswap-demo" target="_blank" rel="noopener">groovy hotswap demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#java基础&quot;&gt;Java基础&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#类和字节码&quot;&gt;类和字节码&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#类加载和类对象&quot;&gt;类加载和类对象
      
    
    </summary>
    
      <category term="Java" scheme="http://blog.kuangcp.top/categories/Java/"/>
    
    
      <category term="字节码" scheme="http://blog.kuangcp.top/tags/%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>RPC</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Distributed-RPC/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Distributed-RPC/</id>
    <published>2018-12-20T12:59:38.760Z</published>
    <updated>2018-12-20T12:59:38.760Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#rpc">RPC</a></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><blockquote><p>Remote Process Calls </p></blockquote><blockquote><p><a href="https://www.jianshu.com/p/dca5b00e72e4" target="_blank" rel="noopener">参考博客: 良好的RPC接口设计，需要注意这些方面</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rpc&quot;&gt;RPC&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;目录 end&lt;/strong&gt;|&lt;em&gt;2018-12-13 12:06&lt;/em&gt;| &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="分布式" scheme="http://blog.kuangcp.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="RPC" scheme="http://blog.kuangcp.top/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>SpringbootDatabase.md</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Java-Spring-SpringbootDatabase/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Java-Spring-SpringbootDatabase/</id>
    <published>2018-12-20T12:59:38.760Z</published>
    <updated>2018-12-20T12:59:38.760Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#数据库模块">数据库模块</a><ol><li><a href="#relational-database">Relational Database</a><ol><li><a href="#多数据源配置">多数据源配置</a></li><li><a href="#连接池">连接池</a><ol><li><a href="#c3p0">c3p0</a></li><li><a href="#druid">druid</a></li><li><a href="#hikaripool">HikariPool</a></li></ol></li><li><a href="#jpa">JPA</a><ol><li><a href="#configuration">Configuration</a></li></ol></li><li><a href="#mybatis">Mybatis</a><ol><li><a href="#自定义查询">自定义查询</a><ol><li><a href="#hql">HQL</a></li><li><a href="#原生sql">原生SQL</a></li></ol></li><li><a href="#mysql">Mysql</a></li><li><a href="#映射关系">映射关系</a><ol><li><a href="#一对一">一对一</a></li><li><a href="#一对多">一对多</a></li><li><a href="#多对多">多对多</a></li></ol></li></ol></li><li><a href="#restful设计">Restful设计</a><ol><li><a href="#特别注意">【特别注意】</a></li></ol></li><li><a href="#jpa数据分页">Jpa数据分页</a></li><li><a href="#数据库上的事务支持">数据库上的事务支持</a></li></ol></li><li><a href="#non-relational-database">Non Relational database</a><ol><li><a href="#jpa">JPA</a><ol><li><a href="#redis的简单使用">Redis的简单使用</a></li><li><a href="#关于stringredistemplate的方法使用">关于StringRedisTemplate的方法使用</a></li><li><a href="#消息订阅和发布">消息订阅和发布</a></li></ol></li></ol></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="数据库模块"><a href="#数据库模块" class="headerlink" title="数据库模块"></a>数据库模块</h1><blockquote><p>主要是采用的JPA，极大的缩减了代码量，但是要注意不要过度依赖框架，丧失了基本的能力</p></blockquote><h2 id="Relational-Database"><a href="#Relational-Database" class="headerlink" title="Relational Database"></a>Relational Database</h2><h3 id="多数据源配置"><a href="#多数据源配置" class="headerlink" title="多数据源配置"></a>多数据源配置</h3><blockquote><p>为什么要有多数据源? 思考</p></blockquote><blockquote><p><a href="https://www.jianshu.com/p/34730e595a8c" target="_blank" rel="noopener">Spring Boot多数据源配置与使用</a></p></blockquote><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><h4 id="c3p0"><a href="#c3p0" class="headerlink" title="c3p0"></a>c3p0</h4><ul><li><a href="http://www.cnblogs.com/520playboy/p/7526252.html" target="_blank" rel="noopener">参考博客</a></li></ul><h4 id="druid"><a href="#druid" class="headerlink" title="druid"></a>druid</h4><ul><li><a href="http://makaidong.com/L_Sail/1/40930_11573921.html" target="_blank" rel="noopener">druid连接池的配置</a></li></ul><h4 id="HikariPool"><a href="#HikariPool" class="headerlink" title="HikariPool"></a>HikariPool</h4><blockquote><p>性能最好的数据库连接池</p></blockquote><ul><li style="list-style: none"><input type="checkbox"> 听说代码很精简, 阅读源码学习</li></ul><hr><h3 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h3><blockquote><p>连接池:1.x 默认是tomcat-jdbc连接池 2.x 是 HikariPool</p></blockquote><blockquote><p><a href="https://www.jianshu.com/p/3b31270a44b1" target="_blank" rel="noopener">参考博客: spring boot2 整合（二）JPA</a></p></blockquote><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h4><blockquote><p><a href="https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#howto-configure-jpa-properties" target="_blank" rel="noopener">Official Doc</a><br><strong><code>ddl-auto</code></strong></p><ul><li>JPA 默认是该配置 <code>spring.jpa.hibernate.ddl-auto</code></li><li>但是如上配置没有生效的话就要用 这个 <code>spring.jpa.properties.hibernate.hbm2ddl.auto</code> <ol><li>none 什么都不做</li><li>create-only </li><li>create 先删除, 然后建立新的表</li><li>create-drop 先删除, 然后建立新的表, 然后在SessionFactory实例关闭后再删除</li><li>update 创建和修改</li><li>validate 校验是否一致, 不一致就报错,启动失败</li></ol></li></ul></blockquote><ul><li><p><a href="http://blog.csdn.net/Amy_Queen/article/details/72454099" target="_blank" rel="noopener">Blog: 原生SQL的写法</a></p></li><li><p>[ ] 怎么映射视图到实体上?</p></li></ul><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><blockquote><p><a href="https://blog.csdn.net/juewang_love/article/details/53769906" target="_blank" rel="noopener">IDEA下创建Springboot，thymeleaf，Mybatis，Postgresql，Gradle项目</a></p></blockquote><h4 id="自定义查询"><a href="#自定义查询" class="headerlink" title="自定义查询"></a>自定义查询</h4><h5 id="HQL"><a href="#HQL" class="headerlink" title="HQL"></a>HQL</h5><ul><li>使用Hibernate语法模式,将对象和数据库的表看成一个实体,方便书写SQL,但是在Controller层和Service层<ul><li>进行写代码的时候,参数的传递全是实体对象,要不停的new,这样真的没问题么(当有各种复杂的关联关系的时候,单个对象的CURD基本没有什么问题)</li><li><code>TODO</code> 所以还不如直接写原生SQL! 那么JPA就真的没有使用的必要性了,直接用Mybatis结合插件生成自动的CRUD的代码,这样更为轻量</li><li>待后续使用后再回来填坑</li></ul></li></ul><h5 id="原生SQL"><a href="#原生SQL" class="headerlink" title="原生SQL"></a>原生SQL</h5><ul><li>涉及到数据的修改,就要加上前两个前缀,查询就直接写Query注解即可<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"update a set b=?1"</span>, nativeQuery = <span class="keyword">true</span>)</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><ul><li><p>1.引入依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span>)</span><br><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter-jdbc'</span>)</span><br><span class="line">runtime(<span class="string">'mysql:mysql-connector-java'</span>)</span><br></pre></td></tr></table></figure></li><li><p>2.继承接口，打好实体类的注解 @Entity </p></li><li><p>3.<em>切记 属性名不能使用下划线（数据库风格）不然写声明方法就会报错，jpa只是看下划线前半部分，会说找不到属性</em></p><ul><li>jpa在创建表时会把驼峰命名改成数据库风格的形式</li></ul></li><li><p>4.jpa是声明特定方法的接口，让jpa来实现并自动注入，如果是没有的方法，就可以使用@Query注解</p><ul><li>默认使用的是HQL（HQL是基于类的所以使用的是类的名字不是表的名字），可以设置下使用原生SQL</li></ul></li></ul><h4 id="映射关系"><a href="#映射关系" class="headerlink" title="映射关系"></a>映射关系</h4><h5 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h5><blockquote><p>据说这是性能最好的方式, 但是有一点让人不舒服, A的id是名存实亡的, 数据库都没有这个字段, 实际上就是B的id, 但是对象又一定要保留这个id, 不然约束通不过<br>也就是说, 创建的时候要设置A的id的值, 但是后面却用不到这个值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="meta">@OneToOne</span>(fetch = FetchType.LAZY)</span><br><span class="line">  <span class="meta">@MapsId</span></span><br><span class="line">  <span class="keyword">private</span> B b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h5><ul><li><p>一方的配置是当前类的id，多方则按基本ER的规则来，注解中配置的是外键的名字, 所以当前类中的属性,外键名是不能重复的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 一方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOne</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String testOneId;</span><br><span class="line">    <span class="meta">@OneToMany</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"testOneId"</span>)<span class="comment">//这个名字可以重复，最终会有一个随机码生成</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;TestMany&gt; testManySet;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 多方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMany</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String testManyId;</span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"testOneId"</span>)</span><br><span class="line">    <span class="keyword">private</span> TestOne testOneId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>[ ] 问题: 当两个表互相引用了, 需要修改表结构 ,怎么删除重建两张表结构, 简单的命令会陷入死锁</p></li></ul><hr><h5 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h5><hr><h3 id="Restful设计"><a href="#Restful设计" class="headerlink" title="Restful设计"></a>Restful设计</h3><ul><li>1.添加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.引入自动配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestConfiguration</span> <span class="keyword">extends</span> <span class="title">RepositoryRestMvcConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RepositoryRestConfiguration <span class="title">config</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.config();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProfileResourceProcessor <span class="title">profileResourceProcessor</span><span class="params">(RepositoryRestConfiguration config)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置rest根目录是应用路径下的路径 : localhost:8080/rest</span></span><br><span class="line">        config.setBasePath(<span class="string">"/rest"</span>);</span><br><span class="line">        <span class="comment">// 允许输出id</span></span><br><span class="line">        config.exposeIdsFor(Goods.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.profileResourceProcessor(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.配置repository的名字例如：（只要配置repository就能用REST了）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RepositoryRestResource</span>(path = <span class="string">"book"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>,<span class="title">Long</span>&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>4.启动应用，控制台有如下输出</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Java/Spring/output.png" alt="输出" title="">                </div>                <div class="image-caption">输出</div>            </figure></li><li><p>所有路径的使用方法：</p><ul><li><code>GET</code> 查询单个 <code>/repo/id</code> 成功：200 失败404</li><li><code>GET</code> 查询所有 <code>/repo</code> 成功200 失败404</li><li><code>POST</code> 新增 <code>/repo</code> json数据发送 成功 201 失败404</li><li><code>DELETE</code> 删除 <code>/repo/id</code> json数据 成功204 失败404</li><li><code>PUT</code> 更新 <code>/repo/id</code> json 更新成功200 没有该id就插入201 失败404（使用主键自动增长就不会遇到404）</li></ul></li></ul><h4 id="【特别注意】"><a href="#【特别注意】" class="headerlink" title="【特别注意】"></a>【特别注意】</h4><ul><li>rest得到的数据没有id<ul><li>添加配置 <code>config.exposeIdsFor(Goods.class);</code> 即可查看到id <a href="http://tommyziegler.com/how-to-expose-the-resourceid-with-spring-data-rest/" target="_blank" rel="noopener">参考博客</a></li></ul></li></ul><h3 id="Jpa数据分页"><a href="#Jpa数据分页" class="headerlink" title="Jpa数据分页"></a>Jpa数据分页</h3><blockquote><p><a href="https://www.tianmaying.com/tutorial/spring-jpa-page-sort" target="_blank" rel="noopener">参考博客</a></p></blockquote><ul><li>分页 page 从0开始 size是个数 sort可以不需要（如果本来就是id排序就没必要了） <ul><li>原理就是 预编译SQL然后查询总数，然后再执行 必须有两条SQL执行</li></ul></li><li>查询的结果不包含实体的id属性</li></ul><h3 id="数据库上的事务支持"><a href="#数据库上的事务支持" class="headerlink" title="数据库上的事务支持"></a>数据库上的事务支持</h3><ul><li>JPA对所有默认方法都开启了事务支持，查询类事务默认启用readOnly=true</li></ul><hr><h2 id="Non-Relational-database"><a href="#Non-Relational-database" class="headerlink" title="Non Relational database"></a>Non Relational database</h2><h3 id="JPA-1"><a href="#JPA-1" class="headerlink" title="JPA"></a>JPA</h3><h4 id="Redis的简单使用"><a href="#Redis的简单使用" class="headerlink" title="Redis的简单使用"></a>Redis的简单使用</h4><p><em>配置连接信息</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># REDIS (RedisProperties)</span><br><span class="line"># Redis数据库索引（默认为0）</span><br><span class="line">spring.redis.database=0</span><br><span class="line"># Redis服务器地址</span><br><span class="line">spring.redis.host=127.0.0.1</span><br><span class="line"># Redis服务器连接端口</span><br><span class="line">spring.redis.port=6379</span><br><span class="line"># Redis服务器连接密码（默认为空）</span><br><span class="line">spring.redis.password=</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-active=8</span><br><span class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-wait=-1</span><br><span class="line"># 连接池中的最大空闲连接</span><br><span class="line">spring.redis.pool.max-idle=8</span><br><span class="line"># 连接池中的最小空闲连接</span><br><span class="line">spring.redis.pool.min-idle=0</span><br><span class="line"># 连接超时时间（毫秒）0不超时</span><br><span class="line">spring.redis.timeout=0</span><br></pre></td></tr></table></figure></p><p><code>在一个配置类中复制如下代码即可使用 StringRedisTemplate RedisTemplate 的实例</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object,Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object,Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 值序列化采用 jackson2JsonRedisSerializer</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 键序列化采用 StringRedisSerializer</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">StringRedisTemplate <span class="title">template</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringRedisTemplate(connectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">``` </span><br><span class="line">`两个对象的简单使用`</span><br><span class="line">```java</span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">"aaa"</span>, <span class="string">"hello"</span>);</span><br><span class="line">    String result = stringRedisTemplate.opsForValue().get(<span class="string">"aaa"</span>);</span><br><span class="line">    <span class="comment">//获取所有</span></span><br><span class="line">    Set&lt;String&gt; keysList =  stringRedisTemplate.keys(<span class="string">"*"</span>);</span><br><span class="line">    <span class="keyword">for</span>(String temp :keysList)&#123;</span><br><span class="line">        log.info(temp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><ul><li>以上配置的template都是只是建立在最简单的键值对上，String-String，所以对象使用的是json来存储</li><li>但是使用的时候如同使用MySQL一样，是ORM框架自动处理数据的转换</li></ul><h4 id="关于StringRedisTemplate的方法使用"><a href="#关于StringRedisTemplate的方法使用" class="headerlink" title="关于StringRedisTemplate的方法使用"></a>关于StringRedisTemplate的方法使用</h4><ul><li><p>常见数据类型的中间对象</p><ul><li>opsForValue() 操作简单键值对数据<ul><li>hasKey()</li></ul></li><li>opsForHash() 操作含有hash的数据</li><li>opsForList() 操作含有list的数据</li><li>opsForZSet() 操作含有zset（有序）的数据<ul><li>range()方法返回指定范围的数据 Java中Set类型的（诡异的是顺序保持了一致）</li></ul></li><li>opsForSet() 操作含有set的数据</li></ul></li><li><p>设置超时时间</p><ul><li><code>redisTemplate.expire(&quot;max&quot;,tempTime,TimeUnit.SECONDS);</code></li></ul></li></ul><h4 id="消息订阅和发布"><a href="#消息订阅和发布" class="headerlink" title="消息订阅和发布"></a>消息订阅和发布</h4><p><a href="https://www.tianmaying.com/tutorial/springboot-redis-message" target="_blank" rel="noopener">参考博客: Spring Boot使用Redis进行消息的发布订阅</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#数据库模块&quot;&gt;数据库模块&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#relational-database&quot;&gt;Relational Database&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringSecurity.md</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Java-Spring-SpringSecurity/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Java-Spring-SpringSecurity/</id>
    <published>2018-12-20T12:59:38.760Z</published>
    <updated>2018-12-20T12:59:38.760Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#springsecurity">SpringSecurity</a><ol><li><a href="#配置">配置</a><ol><li><a href="#配置静态口令使用">配置静态口令使用</a></li></ol></li></ol></li><li><a href="#使用该配置即可自定义用户名密码">使用该配置即可自定义用户名密码</a><ol><li><a href="#springboot的集成demo">SpringBoot的集成Demo</a><ol><li><a href="#创建单用户单角色的安全控制">创建单用户单角色的安全控制</a></li><li><a href="#多用户多角色的实现思路">多用户多角色的实现思路</a><ol><li><a href="#每个身份都使用一个登录实体类">每个身份都使用一个登录实体类</a></li><li><a href="#另一种思路">另一种思路：</a></li></ol></li></ol></li><li><a href="#jwt">JWT</a><ol><li><a href="#跨域问题">跨域问题</a></li></ol></li><li><a href="#oauth">Oauth</a></li><li><a href="#实现细节">实现细节</a><ol><li><a href="#关于注解的几种使用方式">关于注解的几种使用方式</a><ol><li><a href="#@secured">@Secured</a></li><li><a href="#@rolesallowed">@RolesAllowed</a></li><li><a href="#springsecurity30-开始提供了-spel表达式">SpringSecurity3.0 开始提供了 SpEL表达式</a></li></ol></li><li><a href="#保护方法应用">保护方法应用</a></li></ol></li><li><a href="#社交登录">社交登录</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h1><blockquote><p><a href="https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle" target="_blank" rel="noopener">Spring Security 5.0.6 doc</a></p></blockquote><p><a href="http://www.spring4all.com/article/428" target="_blank" rel="noopener">参考博客: Spring Security 入门系列</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置静态口令使用"><a href="#配置静态口令使用" class="headerlink" title="配置静态口令使用"></a>配置静态口令使用</h3><p>当添加了Security依赖之后, 只会生成一个默认的随机密码, 如下简单配置:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用该配置即可自定义用户名密码</span></span><br><span class="line">spring.security.user.name=admin</span><br><span class="line">spring.security.user.password=secret</span><br></pre></td></tr></table></figure></p><p>如果要用 curl 访问则是 <code>curl -i  -u admin:secret  http://tomcat.kcp/hi</code>  </p><blockquote><p>注意 : 前提是要关闭 crsf 校验<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.csrf().disable();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><h2 id="SpringBoot的集成Demo"><a href="#SpringBoot的集成Demo" class="headerlink" title="SpringBoot的集成Demo"></a>SpringBoot的集成Demo</h2><h3 id="创建单用户单角色的安全控制"><a href="#创建单用户单角色的安全控制" class="headerlink" title="创建单用户单角色的安全控制"></a>创建单用户单角色的安全控制</h3><ol><li>Gradle : <code>compile(&#39;org.springframework.boot:spring-boot-starter-security&#39;)</code></li><li><a href="https://gitee.com/kcp1104/codes/n2berl0tfg8wq9s4ko7xa78#SecurityConfig.java" target="_blank" rel="noopener">Security主要配置类</a></li><li><a href="https://gitee.com/kcp1104/codes/n2berl0tfg8wq9s4ko7xa78#Reader.java" target="_blank" rel="noopener">登录实体类</a></li><li>Jpa实现的Dao层 <code>public interface ReaderRepository extends JpaRepository&lt;Reader, String&gt; {}</code></li></ol><hr><h3 id="多用户多角色的实现思路"><a href="#多用户多角色的实现思路" class="headerlink" title="多用户多角色的实现思路"></a>多用户多角色的实现思路</h3><ul><li><p>使用多个实体类（实现了UserDetails接口），一个权限类，再一个多对多连接，就得到了多用户，多权限的控制</p><ul><li>在页面上加上角色的判断来控制数据显示，业务操作等功能</li></ul></li><li><p>根据书上案例代码，可以得出结论，用户表，角色表，用户角色关联表，用户表是可以多张的，角色公用一张即可，然后关联表也对应的多张，就能实现具体的业务需求</p><ul><li>例如：一个网上在线阅读书城，作家和读者以及编辑，网站后台管理员等角色的不同权限对应的页面甚至页面上细分的各个模块</li><li><code>Author</code> <code>Admin</code> <code>Reader</code> 三个类</li></ul></li><li><code>继承了UserDetails接口的实体类的配置</code> <a href="https://gitee.com/kcp1104/codes/n2berl0tfg8wq9s4ko7xa78#Readers.java" target="_blank" rel="noopener">代码片段</a></li></ul><h4 id="每个身份都使用一个登录实体类"><a href="#每个身份都使用一个登录实体类" class="headerlink" title="每个身份都使用一个登录实体类"></a>每个身份都使用一个登录实体类</h4><ul><li>然后使用不同的dao层查询，显然的实体类登录查询的效率及其低且不易扩展</li><li>设置好<code>spirng.jpa.hibernate.ddl-auto=update</code></li><li>第一次运行还会有没有实体对应的表这样的提示,说明了他正在根据多对多映射创建实体表，也体现了这个多种用户模式下需要实体等量的连接表</li><li>所以这个是要查询多张表了<ul><li>（除非UserDetailService接口的loadUserByUsername能收到表类别的参数）</li><li>也可以考虑使用一个字符串，然后用<code>特殊字符</code>把类型放进去，然后正则取出来</li><li>登录页面就需要自定义一个函数进行拼接（或者使用校验来拼接？）</li></ul></li></ul><h4 id="另一种思路："><a href="#另一种思路：" class="headerlink" title="另一种思路："></a>另一种思路：</h4><ul><li>使用一个登录用户表（序列id，用户名，密码，用户编码（对应多张表））<ul><li>角色表（序列id，用户编码，角色） </li><li>这样的话扩展就只要加表，使用同一个主键生成策略就可以了</li></ul></li></ul><blockquote><ul><li>思考：</li><li>其实这个安全框架使用的是角色控制，而不是权限控制，目前的了解，达不到Oracle那样的权限加角色的精细化控制</li></ul></blockquote><hr><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><blockquote><p><a href="/Skills/Base/WebSecurity.md#jwt">JWT相关原理</a> | <a href="https://github.com/Kuangcp/SpringBoot2-Security-Jwt" target="_blank" rel="noopener">Github SpringBoot2使用Security整合Jwt案例项目</a>  </p></blockquote><ul><li><a href="https://gitee.com/kcp1104/codes/kw31qf40iz9p8mt2x7bcd49" target="_blank" rel="noopener">个人代码片段</a>  |</li></ul><blockquote><p><a href="http://www.saily.top/2016/12/08/spring-boot-jwt/" target="_blank" rel="noopener">集成JWT到Spring Boot项目</a> | <a href="https://segmentfault.com/a/1190000009231329" target="_blank" rel="noopener">使用JWT保护你的Spring Boot应用</a><br><a href="https://juejin.im/post/58c29e0b1b69e6006bce02f4" target="_blank" rel="noopener">重拾后端之Spring Boot（四）：使用JWT和Spring Security保护REST API</a><br><a href="http://www.cnblogs.com/grissom007/p/6294746.html" target="_blank" rel="noopener">开箱即用 - jwt 无状态分布式授权</a></p></blockquote><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><blockquote><p><a href="https://segmentfault.com/q/1010000005067552" target="_blank" rel="noopener">跨域(CORS) 解决方案中，为什么 Access-Control-Allow-Methods 不起作用？</a><br><a href="https://bbs.csdn.net/topics/392006333" target="_blank" rel="noopener">WEB应用前后端分离实践 关键词：rest架构+跨域访问+JWT校验</a></p></blockquote><p><a href="https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#csrf" target="_blank" rel="noopener">csrf</a></p><hr><h2 id="Oauth"><a href="#Oauth" class="headerlink" title="Oauth"></a>Oauth</h2><blockquote><p><a href="https://github.com/spring-projects/spring-security-oauth" target="_blank" rel="noopener">oauth</a></p></blockquote><hr><h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><h3 id="关于注解的几种使用方式"><a href="#关于注解的几种使用方式" class="headerlink" title="关于注解的几种使用方式"></a>关于注解的几种使用方式</h3><h4 id="Secured"><a href="#Secured" class="headerlink" title="@Secured"></a>@Secured</h4><ul><li>这是基于Spring特定的注解<h4 id="RolesAllowed"><a href="#RolesAllowed" class="headerlink" title="@RolesAllowed"></a>@RolesAllowed</h4></li><li>JSR-250的@RolesAllowed Java标准定义的注解，与上面的注解是差不多的</li><li><p>但是都是有局限性，只能判断请求是否有权限，不能进行更多的自定义判断</p><h4 id="SpringSecurity3-0-开始提供了-SpEL表达式"><a href="#SpringSecurity3-0-开始提供了-SpEL表达式" class="headerlink" title="SpringSecurity3.0 开始提供了 SpEL表达式"></a>SpringSecurity3.0 开始提供了 SpEL表达式</h4><p><code>需要先配置这个配置类，后面的注解才会生效</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodSecurityConfig</span> <span class="keyword">extends</span> <span class="title">GlobalMethodSecurityConfiguration</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@PreAuthorize</code> 方法调用前，基于表达式的计算结果来限制方法的访问</p></li><li><code>@PostAuthorize</code> 允许方法调用，如果表达式是false 抛出安全异常</li><li><code>@PostFilter</code> 允许方法调用，按照表达式来过滤方法的结果</li><li><p><code>@PreFilter</code> 允许方法调用，必须进入方法前过滤输入值</p></li><li><p>方法调用前验证权限，示例:</p><ul><li><code>@PreAuthorize(&quot;hasRole(&#39;ROLE_ADMIN&#39;)&quot;)</code> 只允许该权限的用户访问</li><li>方法入参user，限定读者用户的text长度小于140，或者是作家用户无限制</li><li><code>@PreAuthorize(&quot;(hasRole(&#39;ROLE_READER&#39;) and #user.text.length()&lt;=140 ) or hasRole(&#39;ROLE_AUTHOR&#39;)&quot;)</code></li></ul></li><li>方法调用之后验证权限，示例;<ul><li><code>@PostAuthorize(&quot;returnObject.spitter.username == principal.username&quot;)</code></li><li>public Spittle getSpittleById(long id){} </li><li>保护方法，只有当返回的对象就是当前登录的用户时，才返回，不然抛出安全异常<br><code>以上是保护方法的调用，但是有时候保护的是数据的输入输出：</code></li></ul></li><li>过滤方法的输入输出<ul><li>事后对方法的返回值进行过滤<ul><li><code>@PreAuthorize(&quot;hasAnyRole({&#39;ROLE_ADMIN&#39;,&#39;ROLE_USER&#39;})&quot;)</code></li><li><code>@PostFilter(&quot;hasRole(&#39;ROLE_ADMIN&#39;) || filterObject.user.username == principal.name&quot;)</code></li><li><code>public List&lt;User&gt; getUsers(){}</code></li><li>该示例就是限制了如果是管理员可以获取到所有数据，普通用户只能看到自己</li><li>但是这种实现是不好的，只是一个例子，只获取自己，重载方法加个id参数就好了，上面的实现，把数据全拿出来再判断，性能上。。。</li></ul></li><li>事先对方法的参数进行过滤<ul><li><code>@PreAuthorize(&quot;hasAnyRole({&#39;ROLE_ADMIN&#39;,&#39;ROLE_USER&#39;})&quot;)</code></li><li><code>@PreFilter(&quot;hasRole(&#39;ROLE_ADMIN&#39;) || targetObject.user.username == principal.name&quot;)</code></li><li><code>public void deleteUsers(){List&lt;User&gt; users}</code></li><li>示例实现了传入一个集合，要删除的用户，但是当前用户只能删除自己，管理员才能删除集合里所有的用户</li></ul></li><li>定义许可计算器<ul><li><code>@PreFilter(&quot;hasPermission(targetObject,&#39;delete&#39;)&quot;)</code> 用户是否有权限删除目标对象？</li><li>使用了自定义的计算器类来实现这个判断，表达式简洁，但是自定义类不好写</li><li>实现PermissionEvaluator接口，新建hasPermission方法，功能就是判断是否有权限，其实就是对比目标对象是不是当前用户</li><li>创建好类后，重载GlobalMethodSecurityConfiguration配置类的createExpressionHalder方法，注册进去</li><li><code>DefaultMethodSecurityExperssionHandler ex = new De...();</code></li><li><code>ex.setPermissionEvaluator(new 自定义类);</code></li><li><code>return ex;</code></li></ul></li></ul></li></ul><h3 id="保护方法应用"><a href="#保护方法应用" class="headerlink" title="保护方法应用"></a>保护方法应用</h3><ul><li>@Secured 注解限制方法调用</li></ul><hr><h2 id="社交登录"><a href="#社交登录" class="headerlink" title="社交登录"></a>社交登录</h2><blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzU0MDEwMjgwNA==&amp;mid=2247484230&amp;idx=1&amp;sn=358f684bd122888270730f2b102ee1b2&amp;chksm=fb3f1abdcc4893ab9dc400a44edfe7a9d483c070b78db1d81f70c4a3d7870d113d9287d81b0f&amp;mpshare=1&amp;scene=1&amp;srcid=0121kLxdu4ezkmeJAoJcdMZ1&amp;pass_ticket=LGmo8DCbLhUXTV%2FDVv1W9SyGxNSXxxYLrKODVeXD8f3lkWt2HnMB5b7racYt5W6V#rd" target="_blank" rel="noopener">SpringForAll社区:Spring Security源码分析（三）：Spring Social实现QQ社交登录 </a><br><a href="https://mp.weixin.qq.com/s?__biz=MzU0MDEwMjgwNA==&amp;mid=2247484233&amp;idx=1&amp;sn=1e84ffd8c9169db56a0d48ccb31bc842&amp;chksm=fb3f1ab2cc4893a4263799c466d73ee67971ce9deb22a91b8ae8e968621679de3bce83a2c558&amp;mpshare=1&amp;scene=1&amp;srcid=0121cjpvaOeB0nktdOSQNitj&amp;pass_ticket=LGmo8DCbLhUXTV%2FDVv1W9SyGxNSXxxYLrKODVeXD8f3lkWt2HnMB5b7racYt5W6V#rd" target="_blank" rel="noopener">SpringForAll社区:Spring Security 源码分析（四）：Spring Social实现微信社交登录 </a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#springsecurity&quot;&gt;SpringSecurity&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#配置&quot;&gt;配置&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#配置静态口令
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC.md</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Java-Spring-SpringMVC/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Java-Spring-SpringMVC/</id>
    <published>2018-12-20T12:59:38.760Z</published>
    <updated>2018-12-20T12:59:38.760Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#springmvc">SpringMVC</a><ol><li><a href="#mvc思想">MVC思想</a><ol><li><a href="#原理">原理</a></li></ol></li><li><a href="#api">API</a></li><li><a href="#传统项目配置完整流程">传统项目配置完整流程</a><ol><li><a href="#配置依赖">配置依赖</a><ol><li><a href="#maven">Maven</a></li><li><a href="#gradle">Gradle</a></li></ol></li><li><a href="#webxml">web.xml</a></li><li><a href="#applicationcontextxml">ApplicationContext.xml</a><ol><li><a href="#全局异常处理">全局异常处理</a></li><li><a href="#自定义错误页面">自定义错误页面</a></li><li><a href="#中文编码问题">中文编码问题</a></li></ol></li><li><a href="#创建controller">创建Controller</a></li></ol></li><li><a href="#使用">使用</a><ol><li><a href="#配置类型转换">配置类型转换</a></li><li><a href="#拦截器">拦截器</a><ol><li><a href="#拦截器机制">拦截器机制</a></li><li><a href="#自定义拦截器">自定义拦截器</a></li></ol></li><li><a href="#q&amp;a">Q&amp;A</a></li></ol></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-20 10:44</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><blockquote><p><a href="https://legacy.gitbook.com/book/linesh/spring-mvc-documentation-linesh-translation/details" target="_blank" rel="noopener">Spring MVC 4.2.4.RELEASE 中文文档</a></p></blockquote><h2 id="MVC思想"><a href="#MVC思想" class="headerlink" title="MVC思想"></a>MVC思想</h2><blockquote><p><a href="http://blog.csdn.net/besley/article/details/8479943" target="_blank" rel="noopener">参考博客</a><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Model/mvc.png" alt="图" title="">                </div>                <div class="image-caption">图</div>            </figure></p></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote><p>统一使用一个Servlet 进行请求的收发, 通过配置的URL对应的方法, 进行调用, 然后返回视图解析器进行渲染</p></blockquote><ul><li>核心类是DispatchServlet 由它来接收各种请求</li><li>发出request请求，到controller解析器，得到Model和view等的名字</li><li>发送到controller执行，返回view名字</li><li>发送到视图解析器</li><li>执行视图返回到dispatchServlet</li></ul><hr><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><blockquote><p><a href="http://www.csdn.net/article/2013-05-02/2815115-stop-designing-fragile-web-api" target="_blank" rel="noopener">简洁的API设计</a></p></blockquote><hr><h2 id="传统项目配置完整流程"><a href="#传统项目配置完整流程" class="headerlink" title="传统项目配置完整流程"></a>传统项目配置完整流程</h2><blockquote><p>也就是Maven的Web结构，甚至是Eclipse那样的DynamicWeb项目结构， <a href="https://www.cnblogs.com/Sinte-Beuve/p/5730553.html" target="_blank" rel="noopener">参考 博客</a></p></blockquote><h3 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h3><h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.9.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果使用JSP作为视图层,还需 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile(<span class="string">'org.springframework:spring-web:4.3.9.RELEASE'</span>)</span><br><span class="line">compile(<span class="string">'org.springframework:spring-webmvc:4.3.9.RELEASE'</span>)</span><br></pre></td></tr></table></figure><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ApplicationContext-xml"><a href="#ApplicationContext-xml" class="headerlink" title="ApplicationContext.xml"></a>ApplicationContext.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.sprinControllergframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--启用spring的一些annotation --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.test.controller"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--HandlerMapping 无需配置，springmvc可以默认启动--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--静态资源映射--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--本项目把静态资源放在了WEB-INF的statics目录下，资源映射如下--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;mvc:resources mapping="/css/**" location="/WEB-INF/statics/css/"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;mvc:resources mapping="/js/**" location="/WEB-INF/statics/js/"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;mvc:resources mapping="/image/**" location="/WEB-INF/statics/image/"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--但是项目部署到linux下发现WEB-INF的静态资源会出现无法解析的情况，但是本地tomcat访问正常，因此建议还是直接把静态资源放在webapp的statics下，映射配置如下--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;mvc:resources mapping="/css/**" location="/statics/css/"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;mvc:resources mapping="/js/**" location="/statics/js/"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;mvc:resources mapping="/image/**" location="/statics/images/"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置注解驱动 可以将request参数与绑定到controller参数上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="prefix" value="/WEB-INF/views/"/&gt;&amp;lt;!&amp;ndash;设置JSP文件的目录位置&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="suffix" value=".jsp"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springmvc文件上传需要配置的节点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"20971500"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resolveLazily"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandler</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; model = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        model.put(<span class="string">"ex"</span>, ex);</span><br><span class="line">        ex.printStackTrace();<span class="comment">//打印异常信息</span></span><br><span class="line">        <span class="comment">// 根据不同错误转向不同页面</span></span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> CSRFException) &#123;<span class="comment">//受到csrf攻击</span></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"/errorPage/error"</span>, model);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BusinessException) &#123;<span class="comment">//业务逻辑处理出错</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"errorPage/businessError"</span>, model);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> ParameterException) &#123;<span class="comment">//参数处理出错。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"errorPage/parameterError"</span>, model);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">//其他数据类型错误</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"errorPage/error"</span>, model);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者是在 Controller 层直接处理</span></span><br><span class="line">    <span class="meta">@ControllerAdvice</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandle</span></span>&#123;</span><br><span class="line">    <span class="meta">@EXceptionHandler</span>(&#123;Exception.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">dealException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        ModelAndView view = <span class="keyword">new</span> ModelAndView(<span class="string">"exception"</span>;</span><br><span class="line">        Exception e = <span class="keyword">new</span> Exception(<span class="string">"错误信息"</span>);</span><br><span class="line">        view.addObject(<span class="string">""</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>但如果是前后端分离的话， 就只能统一处理异常然后然后对应的错误码和提示信息了<br><a href="http://www.cnblogs.com/exmyth/p/5601288.html" target="_blank" rel="noopener">参考博客</a><br><a href="https://blog.csdn.net/xin917480852/article/details/78023911" target="_blank" rel="noopener">ResponseBody方案</a></p></blockquote><h4 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义错误页面 需要放在静态资源下面</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainerCustomizer <span class="title">containerCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (container -&gt; &#123;</span><br><span class="line">        ErrorPage error401Page = <span class="keyword">new</span> ErrorPage(HttpStatus.FORBIDDEN, <span class="string">"/500.html"</span>);</span><br><span class="line">        ErrorPage error404Page = <span class="keyword">new</span> ErrorPage(HttpStatus.NOT_FOUND, <span class="string">"/404.html"</span>);</span><br><span class="line">        ErrorPage error500Page = <span class="keyword">new</span> ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, <span class="string">"/500.html"</span>);</span><br><span class="line">        container.addErrorPages(error401Page, error404Page, error500Page);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中文编码问题"><a href="#中文编码问题" class="headerlink" title="中文编码问题"></a>中文编码问题</h4><blockquote><p><a href="http://www.cnblogs.com/dyllove98/p/3180158.html" target="_blank" rel="noopener">参考博客</a> <code>但是奇怪的是某些方法用第二种正常，有些还是要用第一种</code></p><ol><li>单个方法：<code>@GetMapping(value = &quot;/target/all&quot;,  produces = &quot;application/json; charset=utf-8&quot;)</code></li><li>或者整个应用 注意：<code>&lt;/mvc:annotation-driven&gt;</code> 只能有一个，要将上面的覆盖掉<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!-- 如果是前后端使用JSON作为主要数据交换格式就把JSON列为第一个， 否则就会被认为是Text --&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json; charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain; charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html; charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="创建Controller"><a href="#创建Controller" class="headerlink" title="创建Controller"></a>创建Controller</h3><p>包 com.test.controller 下创建一个类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hi"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hi"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>使用上 ResponseEntity 让响应结果规范<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/handle"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  URI location = ...;</span><br><span class="line">  HttpHeaders responseHeaders = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">  responseHeaders.setLocation(location);</span><br><span class="line">  responseHeaders.set(<span class="string">"MyResponseHeader"</span>, <span class="string">"MyValue"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;String&gt;(<span class="string">"Hello World"</span>, responseHeaders, HttpStatus.CREATED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>在Springboot框架中，static templates 文件夹下分别代表了tomcat管理的静态文件和MVC负责跳转的HTML文件或JSP文件<br>在static中对于路径的使用一定要带上应用路径，而在templates中就只要写相对路径即可</p></blockquote><h3 id="配置类型转换"><a href="#配置类型转换" class="headerlink" title="配置类型转换"></a>配置类型转换</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置ConversionService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"DateConverter"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><h4 id="拦截器机制"><a href="#拦截器机制" class="headerlink" title="拦截器机制"></a>拦截器机制</h4><p>implements HandleInterceptor 有三个方法</p><p>preHandle 返回true就继续往后，false就被拦截<br>PostHandle 在渲染视图之前，<br>afterCompletion 渲染视图之后调用，释放资源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h4><ul><li><a href="http://www.jianshu.com/p/f14ed6ca4e56" target="_blank" rel="noopener">相关博客</a>|<a href="http://blog.csdn.net/catoop/article/details/50501696" target="_blank" rel="noopener">相关博客</a></li></ul><p><code>定义拦截器类</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MythInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Long startTime = System.currentTimeMillis();</span><br><span class="line">        request.setAttribute(<span class="string">"startTime"</span>,startTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">// true就继续跳转，false就停止</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = (Long)request.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">        request.removeAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">        Long endTime = System.currentTimeMillis();</span><br><span class="line">        log.info(request.getRequestURL()+<span class="string">"发起请求耗时:[ "</span>+ (endTime - startTime) +<span class="string">"  ms]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>配置MVC的配置类</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class="line">    <span class="comment">//自定义拦截器bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MythInterceptor <span class="title">mythInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MythInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注册拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//拦截器的URL正则</span></span><br><span class="line">        registry.addInterceptor(mythInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><blockquote><p>URL 中带了 jsessionid 参数，导致页面各种问题</p><ul><li>一种原因：禁用cookie导致的</li><li>最终解决： chrome中在设置里清除localhost的所有cookie和缓存</li></ul></blockquote><ul><li><a href="https://yq.aliyun.com/articles/101169" target="_blank" rel="noopener">解决问题参考博客</a></li><li><p><a href="http://sxsoft.blog.163.com/blog/static/190412229200911103116773" target="_blank" rel="noopener">jsessionid的作用</a></p></li><li><p>[ ] ModelAndView中的addObject 的值能用js获取到么</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#springmvc&quot;&gt;SpringMVC&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#mvc思想&quot;&gt;MVC思想&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#原理&quot;&gt;原理&lt;/a&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript.md</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-FrontEnd-JavaScript/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-FrontEnd-JavaScript/</id>
    <published>2018-12-20T12:59:38.760Z</published>
    <updated>2018-12-20T12:59:38.760Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#javascript">JavaScript</a><ol><li><a href="#数据类型">数据类型</a><ol><li><a href="#字符串">字符串</a></li></ol></li><li><a href="#函数">函数</a><ol><li><a href="#函数传值">函数传值</a></li></ol></li><li><a href="#json">JSON</a></li><li><a href="#常用功能小模块">常用功能小模块</a><ol><li><a href="#输入校验">输入校验</a></li></ol></li><li><a href="#ajax">Ajax</a></li><li><a href="#事件">事件</a><ol><li><a href="#鼠标">鼠标</a><ol><li><a href="#滚轮">滚轮</a></li></ol></li></ol></li><li><a href="#常用库和框架">常用库和框架</a><ol><li><a href="#jquery">Jquery</a><ol><li><a href="#ajax">Ajax</a></li><li><a href="#form插件">form插件</a></li></ol></li><li><a href="#echarts">echarts</a></li></ol></li><li><a href="#资源文件">资源文件</a><ol><li><a href="#图片">图片</a></li></ol></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p>虽然是弱类型,但还是要注意一下</p></blockquote><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>字符串转码:<ul><li><a href="http://www.cnblogs.com/xcsn/archive/2013/05/15/3079373.html" target="_blank" rel="noopener">参考博客:JS字符串相关转码函数</a></li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数传值"><a href="#函数传值" class="headerlink" title="函数传值"></a>函数传值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerGet</span>(<span class="params">url, role, success, fail</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = $.ajax(&#123;</span><br><span class="line">    method: <span class="string">'GET'</span>,</span><br><span class="line">    url : <span class="string">'xxx'</span>+url</span><br><span class="line">  &#125;);</span><br><span class="line">  request.done(success);</span><br><span class="line">  request.fail(fail);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testRole</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    handlerGet(<span class="string">'/world'</span>, <span class="string">'student'</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            layer.msg(<span class="string">'获取成功'</span>);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            layer.msg(<span class="string">'身份认证已过期， 请重新登录'</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><blockquote><p><a href="http://blog.51yip.com/jsjquery/1583.html" target="_blank" rel="noopener">json 数据 添加 删除 排序</a></p></blockquote><ul><li><p>直接点引用属性或者a[‘b’]的方式,</p><ul><li>迭代集合:自带foreach循环 <code>data.forEach(function(value){})</code></li></ul></li><li><p>但是有时候不能使用，会undefined，eval(‘(‘+data+’)’)解析后才能用</p><ul><li>原因在于Response Headers 的 <code>Content-Type:application/json;charset=UTF-8</code> 如果回应的类型是 text/plain 就需要使用 eval(‘(‘+data+’)’)才能用</li><li>如果设置成JSON就可以直接点引用和循环迭代, <em>并且不需要强制的JSON规范, 值为数字时不加双引号也是正常解析的</em></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = &#123;</span><br><span class="line">    <span class="string">"a"</span>: <span class="string">"abc"</span>,</span><br><span class="line">    <span class="string">"b"</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    <span class="string">"c"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"d"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"james"</span>,</span><br><span class="line">        <span class="string">"age"</span>: <span class="number">28</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"e"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">"f"</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历array方式1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> array) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> array[x] == <span class="string">'object'</span> &amp;&amp; array[x] != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> y <span class="keyword">in</span> array[x]) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"&gt;&gt;key = "</span> + y + <span class="string">" value = "</span> + array[x][y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"key = "</span> + x + <span class="string">" value = "</span> + array[x]); <span class="comment">// 非array object</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用功能小模块"><a href="#常用功能小模块" class="headerlink" title="常用功能小模块"></a>常用功能小模块</h2><h3 id="输入校验"><a href="#输入校验" class="headerlink" title="输入校验"></a>输入校验</h3><ul><li><a href="http://yuncode.net/code/c_5039bb4a3fccf28" target="_blank" rel="noopener">Blog:关于Input的输入校验</a><code>数字,字母汉字等限制</code></li></ul><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><blockquote><p><a href="https://segmentfault.com/q/1010000005162727" target="_blank" rel="noopener">js 原生 post请求</a></p></blockquote><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">参考博客: 使用 Fetch</a></p></blockquote><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h3><h4 id="滚轮"><a href="#滚轮" class="headerlink" title="滚轮"></a>滚轮</h4><blockquote><p><a href="https://www.web-tinker.com/article/20037.html" target="_blank" rel="noopener">JavaScript 鼠标滚轮事件</a></p></blockquote><h2 id="常用库和框架"><a href="#常用库和框架" class="headerlink" title="常用库和框架"></a>常用库和框架</h2><ul><li>lozad.js 懒加载<br><a href="https://www.logicbig.com/tutorials/java-ee-tutorial/jpa/group-by-criteria.html" target="_blank" rel="noopener">网页底部的浏览 </a> </li></ul><h3 id="Jquery"><a href="#Jquery" class="headerlink" title="Jquery"></a>Jquery</h3><blockquote><p>jquery有是slim版(没有ajax的精简版 ) <a href="http://jquery.com/" target="_blank" rel="noopener">JQuery官网</a> | <a href="http://www.w3school.com.cn/jquery/index.asp" target="_blank" rel="noopener">Jquery教程</a></p></blockquote><ul><li>事件绑定 <code>$(&#39;#Button&#39;).on(&#39;click&#39;, function(){})</code></li><li>在HTML的DOM上绑定数据:设置 <code>data-*</code> 属性 然后jq拿到元素直接调用 <code>$(this).data(&#39;id&#39;)</code>拿到值就可以避免函数传值</li></ul><p><em>原生方式异步提交</em><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#set-form"</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'prepare submit'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="Ajax-1"><a href="#Ajax-1" class="headerlink" title="Ajax"></a>Ajax</h4><blockquote><p><a href="https://api.jquery.com/jQuery.ajax/" target="_blank" rel="noopener">ajax文档</a></p></blockquote><h4 id="form插件"><a href="#form插件" class="headerlink" title="form插件"></a>form插件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用jquery 的 form插件进行异步提交</span></span><br><span class="line">$(<span class="string">".submit"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'dfs'</span>)</span><br><span class="line">    <span class="comment">// var jk = $("#contents").submit()</span></span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">        <span class="comment">// target:'#contents', //后台将把传递过来的值赋给该元素</span></span><br><span class="line">        url:<span class="string">'../teacher/topic/add'</span>, <span class="comment">//提交给哪个执行</span></span><br><span class="line">        type:<span class="string">'POST'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125; <span class="comment">//显示操作提示</span></span><br><span class="line">    &#125;;</span><br><span class="line">    $(<span class="string">'#contents'</span>).ajaxSubmit(options);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a>echarts</h3><blockquote><p><a href="http://echarts.baidu.com/index.html" target="_blank" rel="noopener">官网</a> | 做图表展示很简单</p></blockquote><hr><h2 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><blockquote><p><a href="http://www.cnblogs.com/wujingtao/p/5196836.html" target="_blank" rel="noopener">参考博客: JS 图片转Base64</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#javascript&quot;&gt;JavaScript&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#数据类型&quot;&gt;数据类型&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#字符串&quot;&gt;字符串&lt;/
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.kuangcp.top/categories/JavaScript/"/>
    
    
      <category term="基础" scheme="http://blog.kuangcp.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot.md</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Java-Spring-SpringBoot/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Java-Spring-SpringBoot/</id>
    <published>2018-12-20T12:59:38.760Z</published>
    <updated>2018-12-20T12:59:38.760Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#springboot">SpringBoot</a><ol><li><a href="#思考">思考</a></li><li><a href="#参考教程">参考教程</a><ol><li><a href="#系列">系列</a></li></ol></li><li><a href="#开始使用">开始使用</a></li><li><a href="#安装springbootcli">安装SpringBootCLI</a></li><li><a href="#测试模块">测试模块</a></li><li><a href="#配置文件">配置文件</a><ol><li><a href="#多种配置文件并切换">多种配置文件并切换</a><ol><li><a href="#yml方式">yml方式</a></li><li><a href="#yml和properties结合">yml和Properties结合</a></li></ol></li><li><a href="#应用配置文件">应用配置文件</a></li></ol></li><li><a href="#日志模块">日志模块</a></li><li><a href="#web模块">Web模块</a><ol><li><a href="#lisener">Lisener</a><ol><li><a href="#servletcontextlistener">ServletContextListener</a></li></ol></li><li><a href="#上传下载文件">上传下载文件</a></li><li><a href="#错误页面跳转配置">错误页面跳转配置</a></li><li><a href="#跨域">跨域</a></li></ol></li><li><a href="#全局异常处理">全局异常处理</a></li><li><a href="#https的配置">HTTPS的配置</a></li><li><a href="#线程池">线程池</a></li><li><a href="#项目部署">项目部署</a><ol><li><a href="#生成指定文件">生成指定文件</a><ol><li><a href="#war">war</a></li><li><a href="#jar">jar</a></li></ol></li><li><a href="#构建docker镜像">构建docker镜像</a><ol><li><a href="#手动方式">手动方式</a></li><li><a href="#gradle结合docker">gradle结合docker</a></li></ol></li><li><a href="#热部署">热部署</a></li></ol></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><blockquote><p><a href="https://spring.io/projects/spring-boot#learn" target="_blank" rel="noopener">首页</a></p></blockquote><blockquote><p>一个简化Spring开发的框架,微服务SpringCloud的基础<br><a href="https://docs.spring.io/spring-boot/docs/1.5.14.RELEASE/reference/htmlsingle/" target="_blank" rel="noopener">1.5.14 官方文档</a></p></blockquote><ul><li><a href="https://github.com/spring-projects/spring-boot/releases" target="_blank" rel="noopener">Github:Springboot</a></li></ul><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul><li><p><a href="https://www.zhihu.com/question/39483566" target="_blank" rel="noopener">SpringBoot优缺点</a> </p><ul><li><code>大大降低编程门槛, 但是, 将大量细节隐藏在默认配置中, 需要详细阅读文档和源码才能更好的玩转SpringBoot, 不然到处是坑</code></li></ul></li><li><p><a href="https://www.cnblogs.com/trgl/p/7353782.html" target="_blank" rel="noopener">SpringBoot启动流程解析</a><code>原理才是王道</code></p></li><li><p><a href="https://yq.aliyun.com/articles/6056" target="_blank" rel="noopener">spring boot应用启动原理分析 </a></p></li><li><p>Spring 是单例模式, 全部使用IOC容器进行管理, 那么怎么处理并发呢, </p><ul><li>答案是 ? 多线程 然后 ThreadLocal 分别存储了各自的数据, 所以才说, 不能在Controller层 放置属性, 使其具有状态, 从而导致并发问题</li><li>那么WebSocket服务器, 处理并发会不会有并发问题?</li></ul></li><li><p><a href="http://www.ityouknow.com/springboot/2018/06/12/spring-boo-java-simple.html" target="_blank" rel="noopener">为什么说 Java 程序员到了必须掌握 Spring Boot 的时候？</a></p></li></ul><blockquote><p><a href="https://spring.io/guides/gs/actuator-service/" target="_blank" rel="noopener">Guide</a></p></blockquote><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="http://springboot.fun/" target="_blank" rel="noopener">SpringBoot中文索引</a></li><li><a href="http://www.spring4all.com/article/246" target="_blank" rel="noopener">参考博客: Spring Boot 入门系列</a></li><li><a href="https://juejin.im/post/598dd709f265da3e213f0c57" target="_blank" rel="noopener">Springboot探索</a></li><li><a href="http://blog.csdn.net/jsyxcjw/article/details/46763639" target="_blank" rel="noopener">SpringBoot入门</a></li></ul><h3 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h3><ul><li><a href="https://github.com/guoxiaoxu/guo-projects/tree/master/guns-admin/note" target="_blank" rel="noopener">一系列专栏</a></li><li><a href="http://tengj.top/tags/Spring-Boot/" target="_blank" rel="noopener">个人博客专栏: SpringBoot干货系列</a></li><li><a href="http://www.ityouknow.com/spring-boot" target="_blank" rel="noopener">SpringBoot系列文章</a></li><li><a href="https://www.jianshu.com/u/092df3f77bca" target="_blank" rel="noopener">恒宇少年</a><code>大量Boot博客</code></li></ul><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><blockquote><p>使用Idea的话就可以直接创建项目 使用别的可以下载zip进行导入 | <a href="http://start.spring.io/" target="_blank" rel="noopener">官方初始项目构建 下载地址</a></p></blockquote><p><em>目录结构最好如下</em> <code>*Application类要处于所有用了Springboot注解的类的顶级目录, 这样默认才能扫描到</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── config/</span><br><span class="line">├── controller/</span><br><span class="line">├── dao/</span><br><span class="line">├── domain/</span><br><span class="line">├── GraduateApplication.java</span><br><span class="line">├── service/</span><br><span class="line">├── ServletInitializer.java</span><br><span class="line">└── util/</span><br></pre></td></tr></table></figure></p><h2 id="安装SpringBootCLI"><a href="#安装SpringBootCLI" class="headerlink" title="安装SpringBootCLI"></a>安装SpringBootCLI</h2><ul><li>使用 SDKMAN 进行安装<ul><li>使用git bash运行  <code>curl -s get.sdkman.io | bash</code></li><li><code>source &quot;/Users/{yourname}/.sdkman/bin/sdkman-init.sh&quot;</code>根据实际目录去运行</li><li>spring –version</li></ul></li><li>官方下载地址 <a href="https://repo.spring.io/release/org/springframework/boot/spring-boot-cli/" target="_blank" rel="noopener">所有版本</a></li></ul><h2 id="测试模块"><a href="#测试模块" class="headerlink" title="测试模块"></a>测试模块</h2><ul><li style="list-style: none"><input type="checkbox"> 了解这些测试注解 的作用和使用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 依赖于Springboot环境的测试类的必备注解</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用内存数据库测试</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.github.kuagncp"</span>) <span class="comment">// 如果有类没注入需要手动设置扫面</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@DataJpaTest</span></span><br></pre></td></tr></table></figure><ul><li>可以使用MockMvc来测试Controller层的代码</li><li>可以使用MockMvc的SpringSecurity支持来测试安全模块</li><li>使用 WebIntegraionTest 测试运行中的Web容器<ul><li>启动嵌入式的Servlet容器来进行测试，下断言</li></ul></li><li>使用随机端口启动服务器 配置local.server.port=0</li><li>使用Selenium来测试HTML页面，模拟浏览器的动作，查看系统运行状态</li></ul><hr><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><blockquote><p>配置文件(<code>application.properties或者yml</code>)加载顺序 <a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config-application-property-files" target="_blank" rel="noopener">官方文档说明</a></p><blockquote><p>1.当前Jar/War目录下的/config目录 <code>file:./config/</code><br>2.当前目录 <code>file:./</code><br>3.classpath 里的/config目录 <code>classpath:/config/</code><br>4.classpath 根目录 <code>classpath:/</code>  </p></blockquote></blockquote><blockquote><p>自定义配置文件名就要运行时加参数  </p><blockquote><p><code>java -jar myproject.jar --spring.config.name=myproject</code><br><code>java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties</code> <br></p></blockquote></blockquote><ul><li><a href="http://www.itwendao.com/article/detail/391009.html" target="_blank" rel="noopener">配置文件的使用</a></li><li><a href="https://www.tuicool.com/articles/veUjQba" target="_blank" rel="noopener">Spring boot配置文件 application.properties</a></li><li><a href="https://my.oschina.net/wangnian/blog/666641" target="_blank" rel="noopener">SpringBoot常用配置</a></li><li><a href="https://segmentfault.com/a/1190000008968295" target="_blank" rel="noopener">使用Gradle整合SpringBoot+Vue.js-开发调试与打包</a></li><li><p><a href="https://yq.aliyun.com/articles/182720" target="_blank" rel="noopener">配置文件加密</a></p></li><li><p><a href="http://www.cnblogs.com/java-zhao/p/5542154.html" target="_blank" rel="noopener">自定义配置文件</a><code>将应用配置外置并注入成bean</code></p></li><li><a href="http://www.cnblogs.com/xiaoqi/p/6955288.html" target="_blank" rel="noopener">配置文件外置</a></li></ul><h3 id="多种配置文件并切换"><a href="#多种配置文件并切换" class="headerlink" title="多种配置文件并切换"></a>多种配置文件并切换</h3><h4 id="yml方式"><a href="#yml方式" class="headerlink" title="yml方式"></a>yml方式</h4><ul><li><p>单文件<code>配置文件 application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">     profiles:</span></span><br><span class="line"><span class="attr">       active:</span> <span class="string">development</span> <span class="comment"># 选用开发模式</span></span><br><span class="line"><span class="bullet">   -</span><span class="bullet">--</span></span><br><span class="line"><span class="attr">   spring:</span></span><br><span class="line"><span class="attr">     profiles:</span> <span class="string">development</span></span><br><span class="line">     <span class="string">//一系列配置</span></span><br><span class="line"><span class="bullet">   -</span><span class="bullet">--</span></span><br><span class="line"><span class="attr">   spring:</span></span><br><span class="line"><span class="attr">     profiles:</span> <span class="string">production</span></span><br><span class="line">     <span class="string">//一系列配置</span></span><br></pre></td></tr></table></figure></li><li><p>或者 多文件放 <code>application-{profile}.yml</code></p></li></ul><h4 id="yml和Properties结合"><a href="#yml和Properties结合" class="headerlink" title="yml和Properties结合"></a>yml和Properties结合</h4><ul><li>格式：<code>application-{profile}.properties</code></li><li>将上面的开发部分，发行部分的配置创建两个配置文件 <code>application-dev.properties</code> 和 <code>application-prod.properties</code></li><li>在主配置文件<code>application.yml</code>中指明<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev或者是prod</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="应用配置文件"><a href="#应用配置文件" class="headerlink" title="应用配置文件"></a>应用配置文件</h3><blockquote><p>依赖于 <code>org.springframework.boot:spring-boot-configuration-processor</code><br>配置对应的实体类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"graduate.main"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String delimiter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>应用配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(MainConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoCustomConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>application.yml<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">graduate:</span></span><br><span class="line"><span class="attr">  main:</span></span><br><span class="line"><span class="attr">    delimiter:</span> <span class="string">,</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="日志模块"><a href="#日志模块" class="headerlink" title="日志模块"></a>日志模块</h2><p>默认可以通过 application.properties 配置框架的日志,以及应用具体到包和类的日志等级,日志文件等等</p><blockquote><p><a href="https://www.cnblogs.com/lixuwu/p/5804793.html" target="_blank" rel="noopener">参考博客: Spring boot——logback 基础使用篇（一）</a></p></blockquote><blockquote><p><a href="https://springframework.guru/using-logback-spring-boot/" target="_blank" rel="noopener">参考博客: springboot use logback</a><code>能根据Profile配置,还能写if</code></p></blockquote><p>使用 logback 则需要配置 logback.xml 或者 logback-spring.xml 建议使用后者</p><hr><h2 id="Web模块"><a href="#Web模块" class="headerlink" title="Web模块"></a>Web模块</h2><h3 id="Lisener"><a href="#Lisener" class="headerlink" title="Lisener"></a>Lisener</h3><h4 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContext</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Servlet容器初始化"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Servlet容器销毁"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上传下载文件"><a href="#上传下载文件" class="headerlink" title="上传下载文件"></a>上传下载文件</h3><blockquote><p>第一种直接上传到应用的webroot或者resources目录下，第二种上传到数据库中，第三种使用ftp。</p></blockquote><ul><li><a href="http://www.cnblogs.com/studyCenter/p/6665171.html" target="_blank" rel="noopener">Springboot上传文件</a></li><li>上传文件有大小限制，使用如下方法进行配置 <a href="http://makaidong.com/studyDetail/11882_45833.html" target="_blank" rel="noopener">参考博客</a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartConfigElement <span class="title">multipartConfigElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MultipartConfigFactory factory = <span class="keyword">new</span> MultipartConfigFactory();</span><br><span class="line">    <span class="comment">//单个文件最大</span></span><br><span class="line">    factory.setMaxFileSize(<span class="string">"80MB"</span>); <span class="comment">//KB,MB</span></span><br><span class="line">    <span class="comment">// 设置总上传数据总大小</span></span><br><span class="line">    factory.setMaxRequestSize(<span class="string">"102400KB"</span>);</span><br><span class="line">    <span class="keyword">return</span> factory.createMultipartConfig();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="错误页面跳转配置"><a href="#错误页面跳转配置" class="headerlink" title="错误页面跳转配置"></a>错误页面跳转配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmbeddedServletContainerCustomizer <span class="title">containerCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (container -&gt; &#123;</span><br><span class="line">            ErrorPage error401Page = <span class="keyword">new</span> ErrorPage(HttpStatus.FORBIDDEN, <span class="string">"/403.html"</span>);</span><br><span class="line">            ErrorPage error404Page = <span class="keyword">new</span> ErrorPage(HttpStatus.NOT_FOUND, <span class="string">"/404.html"</span>);</span><br><span class="line">            ErrorPage error500Page = <span class="keyword">new</span> ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, <span class="string">"/500.html"</span>);</span><br><span class="line">            container.addErrorPages(error401Page, error404Page, error500Page);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><blockquote><p>不同的域名（主机）端口都会导致跨域问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> CorsConfiguration <span class="title">buildConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">"*"</span>); <span class="comment">// 允许任何域名使用</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">"*"</span>); <span class="comment">// 允许任何头</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"*"</span>); <span class="comment">// 允许任何方法（post、get等）</span></span><br><span class="line">        <span class="keyword">return</span> corsConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, buildConfig()); <span class="comment">// 4</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h2><ol><li>新建类, 加上注解 ControllerAdvice</li><li>方法上使用注解 <code>ExceptionHandler(Exception.class)</code> 处理所有异常</li><li>然后返回值的写法和普通Controller一样, 返回JSON就<code>ResponseBody</code></li></ol><hr><h2 id="HTTPS的配置"><a href="#HTTPS的配置" class="headerlink" title="HTTPS的配置"></a>HTTPS的配置</h2><blockquote><p><a href="https://www.drissamri.be/blog/java/enable-https-in-spring-boot/" target="_blank" rel="noopener">参考博客</a></p></blockquote><ul><li>签发证书：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> tomcat -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  context-path:</span> <span class="string">/myth</span></span><br><span class="line"><span class="attr">  ssl:</span></span><br><span class="line"><span class="attr">    key-store:</span> <span class="attr">classpath:keystore.p12</span></span><br><span class="line"><span class="attr">    key-store-password:</span> <span class="string">demo1429336</span></span><br><span class="line"><span class="attr">    key-store-type:</span> <span class="string">PKCS12</span></span><br><span class="line"><span class="attr">    key-alias:</span> <span class="string">tomcat</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">  session:</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><p><code>任意的一个@Configuration注解类里添加</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="title">servletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TomcatEmbeddedServletContainerFactory factory =</span><br><span class="line">        <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//SecurityConstraint必须存在，可以通过其为不同的URL设置不同的重定向策略。</span></span><br><span class="line">                SecurityConstraint securityConstraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                collection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">                securityConstraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(securityConstraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    factory.addAdditionalTomcatConnectors(createHttpConnector());</span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Connector <span class="title">createHttpConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connector connector = <span class="keyword">new</span> Connector(<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</span><br><span class="line">    connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line">    connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">    connector.setPort(<span class="number">8887</span>);<span class="comment">//http端口（这是要新增加的一个端口）</span></span><br><span class="line">    connector.setRedirectPort(<span class="number">8888</span>);<span class="comment">// https 端口配置文件中tomcat启动的默认端口</span></span><br><span class="line">    <span class="keyword">return</span> connector;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>另一种方式 <a href="http://www.cnblogs.com/xinzhao/p/4950689.html" target="_blank" rel="noopener">参考博客</a><br><code>方式不一样，没有成功</code><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############ 证书颁发机构</span></span><br><span class="line"><span class="comment"># CA机构私钥</span></span><br><span class="line">openssl genrsa -out ca.key 2048</span><br><span class="line"><span class="comment"># CA证书</span></span><br><span class="line">openssl req -x509 -new -key ca.key -out ca.crt</span><br><span class="line"><span class="comment">############ 服务端</span></span><br><span class="line"><span class="comment"># 生成服务端私钥</span></span><br><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line"><span class="comment"># 生成服务端证书请求文件</span></span><br><span class="line">openssl req -new -key server.key -out server.csr</span><br><span class="line"><span class="comment"># 使用CA证书生成服务端证书  关于sha256，默认使用的是sha1，在新版本的chrome中会被认为是不安全的，因为使用了过时的加密算法。</span></span><br><span class="line">openssl x509 -req -sha256 -<span class="keyword">in</span> server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650 -out server.crt    </span><br><span class="line"><span class="comment"># 打包服务端的资料为pkcs12格式(非必要，只是换一种格式存储上一步生成的证书) 生成过程中，需要创建访问密码，请记录下来。</span></span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -<span class="keyword">in</span> server.crt -inkey server.key -out server.pkcs12</span><br><span class="line"><span class="comment"># 生成服务端的keystore（.jks文件, 非必要，Java程序通常使用该格式的证书） 生成过程中，需要创建访问密码，请记录下来。</span></span><br><span class="line">keytool -importkeystore -srckeystore server.pkcs12 -destkeystore server.jks -srcstoretype pkcs12</span><br><span class="line"><span class="comment"># 把ca证书放到keystore中（非必要）</span></span><br><span class="line">keytool -importcert -keystore server.jks -file ca.crt</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><ul><li><a href="https://hacpai.com/article/1501152977477?p=1&amp;m=0" target="_blank" rel="noopener">参考博客</a></li><li>多线程以及异常处理 <a href="http://www.liuhaihua.cn/archives/496733.html" target="_blank" rel="noopener">参考博客</a><ul><li>因为多线程的特性，所以异常只能在子线程中处理不能抛出到主线程里，但是 Spring实现的线程池可以返回一个异常信息对象</li></ul></li></ul><hr><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><h3 id="生成指定文件"><a href="#生成指定文件" class="headerlink" title="生成指定文件"></a>生成指定文件</h3><h4 id="war"><a href="#war" class="headerlink" title="war"></a>war</h4><ul><li><p>部署为war必须的类，一般在创建项目时选war就会自动生成，选jar就要手动添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(DemoApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>maven： <code>mvn war</code> 即可 mvn package -DskipTests</p></li><li>gradle: <code>gradle war</code> 然后 <code>gradle bootRepackage</code> 即可</li></ul><h4 id="jar"><a href="#jar" class="headerlink" title="jar"></a>jar</h4><ul><li>没有特殊的配置，打包即用<ul><li>maven: <code>mvn package</code> 即可生成可执行的jar</li><li>gradle:<code>gradle jar</code> 然后 <code>gradle bootRepackage</code> 也生成可执行jar</li></ul></li></ul><h3 id="构建docker镜像"><a href="#构建docker镜像" class="headerlink" title="构建docker镜像"></a>构建docker镜像</h3><blockquote><p>方便监控应用状态，cpu 内存 流量, <a href="https://spring.io/guides/gs/spring-boot-docker/" target="_blank" rel="noopener">官方文档</a></p></blockquote><h4 id="手动方式"><a href="#手动方式" class="headerlink" title="手动方式"></a>手动方式</h4><ul><li>先构建得到war或jar，然后根据dockerfile构建一个镜像<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> frolvlad/alpine-oraclejdk8:slim</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> weixin-1.0.0.war app.war</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.war"</span>]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="gradle结合docker"><a href="#gradle结合docker" class="headerlink" title="gradle结合docker"></a>gradle结合docker</h4><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><blockquote><p><a href="https://nilzzzz.github.io/2017/11/SpringBoot1/" target="_blank" rel="noopener">参考博客: SpringBoot热部署</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#springboot&quot;&gt;SpringBoot&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#思考&quot;&gt;思考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#参考教程&quot;&gt;参考教程&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ResponseCode.md</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-FrontEnd-ResponseCode/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-FrontEnd-ResponseCode/</id>
    <published>2018-12-20T12:59:38.760Z</published>
    <updated>2018-12-20T12:59:38.760Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#http状态码大全">HTTP状态码大全</a><ol><li><a href="#标准扩展码">标准扩展码</a><ol><li><a href="#1xx-informational-信息化">1xx-Informational-信息化</a></li><li><a href="#2xx-success-成功">2xx-Success-成功</a></li><li><a href="#3xx-redirection-重定向">3xx-Redirection-重定向</a></li><li><a href="#4xx-clienterror-客户端错误">4xx-ClientError-客户端错误</a></li><li><a href="#5xx-servererror-服务器错误">5xx-ServerError-服务器错误</a></li></ol></li><li><a href="#非官方扩展码">非官方扩展码</a></li><li><a href="#互联网信息服务扩展状态码">互联网信息服务扩展状态码</a></li><li><a href="#nginx-扩展状态码">NGINX-扩展状态码</a></li><li><a href="#七牛扩展状态码">七牛扩展状态码</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="HTTP状态码大全"><a href="#HTTP状态码大全" class="headerlink" title="HTTP状态码大全"></a>HTTP状态码大全</h1><blockquote><p><a href="http://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">HTTP状态码</a><br><a href="https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="noopener">HTTP状态码百度百科</a></p></blockquote><h2 id="标准扩展码"><a href="#标准扩展码" class="headerlink" title="标准扩展码"></a>标准扩展码</h2><h3 id="1xx-Informational-信息化"><a href="#1xx-Informational-信息化" class="headerlink" title="1xx-Informational-信息化"></a>1xx-Informational-信息化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100 Continue 继续</span><br><span class="line">101 Switching Protocols 交换协议</span><br><span class="line">102 Processing 继续处理</span><br></pre></td></tr></table></figure><h3 id="2xx-Success-成功"><a href="#2xx-Success-成功" class="headerlink" title="2xx-Success-成功"></a>2xx-Success-成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">200 OK</span><br><span class="line">201 Created 创建</span><br><span class="line">202 Accepted 已接受</span><br><span class="line">203 Non-Authoritative Information 非授权信息</span><br><span class="line">204 No Content 无内容</span><br><span class="line">205 Reset Content 重置内容</span><br><span class="line">206 Partial Content 部分内容</span><br><span class="line">207 Multi-Status 多状态</span><br><span class="line">208 Already Reported 已报告</span><br><span class="line">226 IMIM Used 使用的</span><br></pre></td></tr></table></figure><h3 id="3xx-Redirection-重定向"><a href="#3xx-Redirection-重定向" class="headerlink" title="3xx-Redirection-重定向"></a>3xx-Redirection-重定向</h3><blockquote><p><a href="http://blog.163.com/darkness@yeah/blog/static/131774484201221495129735/" target="_blank" rel="noopener">HTTP返回码中301与302的区别  </a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">300 Multiple Choices 多种选择</span><br><span class="line">301 Moved Permanently 永久移动</span><br><span class="line">302 Found 发现 代表暂时性转移(Temporarily Moved )。</span><br><span class="line">303 See Other 查看其它</span><br><span class="line">304 Not Modified 未修改,使用缓存</span><br><span class="line">305 Use Proxy 使用代理</span><br><span class="line">306 Switch Proxy 开关代理</span><br><span class="line">307 Temporary Redirect 临时重定向</span><br><span class="line">308 Permanent Redirect 永久重定向</span><br></pre></td></tr></table></figure><h3 id="4xx-ClientError-客户端错误"><a href="#4xx-ClientError-客户端错误" class="headerlink" title="4xx-ClientError-客户端错误"></a>4xx-ClientError-客户端错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">400 Bad Request 错误的请求</span><br><span class="line">401 Unauthorized 未授权</span><br><span class="line">402 Payment Required 需要付费</span><br><span class="line">403Forbidden 拒绝访问</span><br><span class="line">404 Not Found 未找到</span><br><span class="line">405 Method Not Allowed 不允许的方法</span><br><span class="line">406 Not Acceptable 不可接受</span><br><span class="line">407 Proxy Authentication Required 代理服务器需要身份验证</span><br><span class="line">408 Request Timeout 请求超时</span><br><span class="line">409 Conflict 冲突</span><br><span class="line">410 Gone 完成</span><br><span class="line">411 Length Required 需要长度</span><br><span class="line">412 Precondition Failed 前提条件失败</span><br><span class="line">413 Payload Too Large 负载过大</span><br><span class="line">414 URI Too Long 太长</span><br><span class="line">415 Unsupported Media Type 不支持的媒体类型</span><br><span class="line">416 Range Not Satisfiable 的范围不合适</span><br><span class="line">417 Expectation Failed 预期失败</span><br><span class="line">418 I&apos;m a teapot 我是一个茶壶</span><br><span class="line">421 Misdirected Request 误导请求</span><br><span class="line">422 Unprocessable Entity 无法处理的实体</span><br><span class="line">423 Locked 锁定</span><br><span class="line">424 Failed Dependency 失败的依赖</span><br><span class="line">426 Upgrade Required 升级所需</span><br><span class="line">428 Precondition Required 所需的先决条件</span><br><span class="line">429 Too Many Requests 太多的请求</span><br><span class="line">431 Request Header Fields Too Large 请求头字段太大</span><br><span class="line">451 Unavailable For Legal Reasons 不可出于法律原因</span><br></pre></td></tr></table></figure><h3 id="5xx-ServerError-服务器错误"><a href="#5xx-ServerError-服务器错误" class="headerlink" title="5xx-ServerError-服务器错误"></a>5xx-ServerError-服务器错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">500 Internal Server Error 内部服务器错误</span><br><span class="line">501 Not Implemented 未执行</span><br><span class="line">502 Bad Gateway 错误的网关</span><br><span class="line">503 Service Unavailable 服务不可用</span><br><span class="line">504 Gateway Timeout 网关超时</span><br><span class="line">505 HTTP Version Not Supported 不支持HTTP版本</span><br><span class="line">506 Variant Also Negotiates 变体也进行协商</span><br><span class="line">507 Insufficient Storage 存储空间不足</span><br><span class="line">508 Loop Detected 检测到循环</span><br><span class="line">510 Not Extended 不延长</span><br><span class="line">511 Network Authentication Required 网络需要身份验证</span><br></pre></td></tr></table></figure><h2 id="非官方扩展码"><a href="#非官方扩展码" class="headerlink" title="非官方扩展码"></a>非官方扩展码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">103 Checkpoint 检查点</span><br><span class="line">420 Method Failure (Spring Framework) 故障的方法（Spring框架）</span><br><span class="line">420 Enhance Your Calm (Twitter) 增强您的平静（微博）</span><br><span class="line">450 Blocked by Windows Parental Controls (Microsoft) 被Windows阻止家长控制（微软）</span><br><span class="line">498 Invalid Token (Esri) 无效的令牌（ESRI的）</span><br><span class="line">499 Token Required (Esri) 令牌必需（ESRI的）</span><br><span class="line">499 Request has been forbidden by antivirus 请求已被禁止反病毒</span><br><span class="line">509 Bandwidth Limit Exceeded (Apache Web Server/cPanel) 超出带宽限制（Apache的Web服务器/的cPanel）</span><br><span class="line">530 Site is frozen 网站被冻结</span><br></pre></td></tr></table></figure><h2 id="互联网信息服务扩展状态码"><a href="#互联网信息服务扩展状态码" class="headerlink" title="互联网信息服务扩展状态码"></a>互联网信息服务扩展状态码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">440 Login Timeout 登录超时</span><br><span class="line">449 Retry With 重新发送带</span><br><span class="line">451 Redirect 重定向</span><br></pre></td></tr></table></figure><h2 id="NGINX-扩展状态码"><a href="#NGINX-扩展状态码" class="headerlink" title="NGINX-扩展状态码"></a>NGINX-扩展状态码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">444 No Response 没有响应</span><br><span class="line">495 SSL Certificate Error 证书错误</span><br><span class="line">496 SSL Certificate Required证书要求</span><br><span class="line">497 HTTP Request Sent to HTTPS Port 发送到HTTPS端口请求</span><br><span class="line">499 Client Closed Request 客户端请求关闭</span><br></pre></td></tr></table></figure><h2 id="七牛扩展状态码"><a href="#七牛扩展状态码" class="headerlink" title="七牛扩展状态码"></a>七牛扩展状态码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">298 部分操作执行成功。</span><br><span class="line">419 用户账号被冻结。</span><br><span class="line">478 镜像回源失败。 主要指镜像源服务器出现异常。</span><br><span class="line">573 单个资源访问频率过高</span><br><span class="line">579 上传成功但是回调失败。 包括业务服务器异常；七牛服务器异常；服务器间网络异常。</span><br><span class="line">599 服务端操作失败。</span><br><span class="line">608 资源内容被修改。</span><br><span class="line">612 指定资源不存在或已被删除。</span><br><span class="line">614 目标资源已存在。</span><br><span class="line">630 已创建的空间数量达到上限，无法创建新空间。</span><br><span class="line">631 指定空间不存在。</span><br><span class="line">640 调用列举资源 (list) 接口时，指定非法的marker参数。</span><br><span class="line">701 在断点续上传过程中，后续上传接收地址不正确或ctx信息已过期。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#http状态码大全&quot;&gt;HTTP状态码大全&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#标准扩展码&quot;&gt;标准扩展码&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#1xx-inform
      
    
    </summary>
    
      <category term="Web" scheme="http://blog.kuangcp.top/categories/Web/"/>
    
    
      <category term="基础" scheme="http://blog.kuangcp.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SpringAOP.md</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Java-Spring-SpringAOP/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Java-Spring-SpringAOP/</id>
    <published>2018-12-20T12:59:38.760Z</published>
    <updated>2018-12-20T12:59:38.760Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#aop">AOP</a><ol><li><a href="#动态代理">动态代理</a><ol><li><a href="#asm">asm</a></li><li><a href="#cglib">cglib</a></li></ol></li><li><a href="#基本概念">基本概念</a></li><li><a href="#基本配置">基本配置</a></li><li><a href="#注意">注意</a><ol><li><a href="#1-spring-aop还是完全用aspectj">1 Spring AOP还是完全用AspectJ？</a></li><li><a href="#2-spring-aop中使用@aspectj还是xml">2 Spring AOP中使用@AspectJ还是XML？</a></li><li><a href="#3-混合切面类型">3 混合切面类型</a></li></ol></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><blockquote><p>Aspect Oriented Programming  面向切面编程</p></blockquote><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><blockquote><p>这是AOP的起源, 最初是JDK的动态Proxy -&gt; cglib/asm </p></blockquote><blockquote><p><a href="https://blog.csdn.net/luanlouis/article/details/24589193" target="_blank" rel="noopener">参考博客: Java动态代理机制详解（JDK 和CGLIB，Javassist，ASM）</a></p></blockquote><h3 id="asm"><a href="#asm" class="headerlink" title="asm"></a>asm</h3><h3 id="cglib"><a href="#cglib" class="headerlink" title="cglib"></a>cglib</h3><blockquote><p>基于asm</p></blockquote><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><table><thead><tr><th style="text-align:left">英文</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left"><code>JoinPoint</code></td><td style="text-align:left">切入面、连接点、切入点（所有方法）</td></tr><tr><td style="text-align:left"><code>PointCut</code></td><td style="text-align:left">切点（特殊的连接点，需要增强的连接点）</td></tr><tr><td style="text-align:left"><code>Advice</code></td><td style="text-align:left">增强（切入点的逻辑，待添加的功能）</td></tr><tr><td style="text-align:left"><code>Aspect</code></td><td style="text-align:left">切面（切点和增强的合集）</td></tr><tr><td style="text-align:left"><code>Target</code></td><td style="text-align:left">目标对象（被增强的实例）</td></tr><tr><td style="text-align:left"><code>Weave</code></td><td style="text-align:left">织入（增强切点的过程）</td></tr><tr><td style="text-align:left"><code>Proxy</code></td><td style="text-align:left">代理（增强后的类，一般是使用了代理类） 装饰器模式</td></tr><tr><td style="text-align:left"><code>Introduction</code></td><td style="text-align:left">引介（为类添加属性和方法） 用的较少因为破坏了OOP思想</td></tr></tbody></table><hr><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p><code>XML文件头</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>方法级别的添加代理，Servlet中的过滤器也类似（但是那个是类级别的）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基本类 提供切点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"cn.spring.aop.Student"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 增强部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"adder"</span> <span class="attr">class</span>=<span class="string">"cn.spring.aop.NewDeal"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用aop的自动提示也要配置上面的头文件声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aspect表示切面 ref 标明增强方法的类来源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"myAop"</span> <span class="attr">ref</span>=<span class="string">"adder"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- execution 是表达式（正则一样的功能）匹配的是具体的切点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.spring.aop.Student.run(..))"</span> <span class="attr">id</span>=<span class="string">"needAdd"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 织入 的过程 将增强和切入点结合 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"add"</span> <span class="attr">pointcut-ref</span>=<span class="string">"needAdd"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"af"</span> <span class="attr">pointcut-ref</span>=<span class="string">"needAdd"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut-ref</span>=<span class="string">"needAdd"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><p>要注意环绕的写法 <code>public void around(ProceedingJoinPoint m)throws Throwable{</code>  </p><ul><li><a href="https://www.oschina.net/code/snippet_246557_9205" target="_blank" rel="noopener">Spring AOP中的around</a>  </li></ul></li><li><p>然后在test类中直接getBean（基类）但是实际上是获取到的是装饰好的代理对象  </p><ul><li><a href="http://blog.csdn.net/yuqinying112/article/details/7335416" target="_blank" rel="noopener">Spring AOP配置(转)</a>  </li><li><a href="http://www.cnblogs.com/yangy608/archive/2010/11/14/1876833.html" target="_blank" rel="noopener">aop:config详解</a>  </li></ul></li><li><p>善用debug 调试看是否获取到的是代理对象 $proxy</p></li><li><p>在Spring的配置文件中，所有的切面和通知器都必须定义在<code>&lt;aop:config&gt;</code> 元素内部。 一个<code>application context</code>可以包含多个 <code>&lt;aop:config&gt;</code>。 一个<code>&lt;aop:config&gt;</code> 可以包含 <code>pointcut</code>， <code>advisor</code> 和 <code>aspect</code> 元素（注意它们必须按照这样的顺序进行声明）。 </p></li></ul><h3 id="1-Spring-AOP还是完全用AspectJ？"><a href="#1-Spring-AOP还是完全用AspectJ？" class="headerlink" title="1 Spring AOP还是完全用AspectJ？"></a>1 Spring AOP还是完全用AspectJ？</h3><p>做能起作用的最简单的事。Spring AOP比完全使用AspectJ更加简单，因为它不需要引入AspectJ的编译器／织入器到你开发和构建过程中。<br>如果你仅仅需要在Spring bean上通知执行操作，那么Spring AOP是合适的选择。如果你需要通知domain对象或其它没有在Spring容器中<br>管理的任意对象，那么你需要使用AspectJ。如果你想通知除了简单的方法执行之外的连接点（如：调用连接点、字段get或set的连接点等等），<br>也需要使用AspectJ。<br>当使用AspectJ时，你可以选择使用AspectJ语言（也称为“代码风格”）或@AspectJ注解风格。<br>如果切面在你的设计中扮演一个很大的角色，并且你能在Eclipse中使用AspectJ Development Tools (AJDT)， 那么首选AspectJ语言 :-<br>因为该语言专门被设计用来编写切面，所以会更清晰、更简单。如果你没有使用<br>Eclipse，或者在你的应用中只有很少的切面并没有作为一个主要的角色，你或许应该考虑使用@AspectJ风格<br>并在你的IDE中附加一个普通的Java编辑器，并且在你的构建脚本中增加切面织入（链接）的段落。</p><h3 id="2-Spring-AOP中使用-AspectJ还是XML？"><a href="#2-Spring-AOP中使用-AspectJ还是XML？" class="headerlink" title="2 Spring AOP中使用@AspectJ还是XML？"></a>2 Spring AOP中使用@AspectJ还是XML？</h3><p>如果你选择使用Spring AOP，那么你可以选择@AspectJ或者XML风格。总的来说，如果你使用Java 5， 我们建议使用@AspectJ风格。<br>显然如果你不是运行在Java 5上，XML风格是最佳选择。XML和@AspectJ 之间权衡的细节将在下面进行讨论。<br>XML风格对现有的Spring用户来说更加习惯。它可以使用在任何Java级别中（参考连接点表达式内部的命名连接点，虽然它也需要Java 5）<br>并且通过纯粹的POJO来支持。当使用AOP作为工具来配置企业服务时（一个好的例子是当你认为连接点表达式是你的配置中的一部分时，<br>你可能想单独更改它）XML会是一个很好的选择。对于XML风格，从你的配置中可以清晰的表明在系统中存在那些切面。<br>XML风格有两个缺点。第一是它不能完全将需求实现的地方封装到一个位置。DRY原则中说系统中的每一项知识都必须具有单一、无歧义、权威的表示。<br>当使用XML风格时，如何实现一个需求的知识被分割到支撑类的声明中以及XML配置文件中。当使用@AspectJ风格时就只有一个单独的模块 -切面-<br>信息被封装了起来。 第二是XML风格同@AspectJ风格所能表达的内容相比有更多的限制：仅仅支持”singleton”切面实例模型，并且不能在XML中组合命名连接点的声<br>明。 例如，在@AspectJ风格中我们可以编写如下的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(execution(* get*())) </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">propertyAccess</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line"><span class="meta">@Pointcut</span>(execution(org.xyz.Account+ *(..)) </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationReturningAnAccount</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line"><span class="meta">@Pointcut</span>(propertyAccess() &amp;&amp; operationReturningAnAccount()) </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accountPropertyAccess</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>在XML风格中能声明开头的两个连接点：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"propertyAccess"</span> <span class="attr">expression</span>=<span class="string">"execution(* get*())"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"operationReturningAnAccount"</span>  <span class="attr">expression</span>=<span class="string">"execution(org.xyz.Account+ *(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>但是不能通过组合这些来定义accountPropertyAccess连接点</p><ul><li>@AspectJ风格支持其它的实例模型以及更丰富的连接点组合。它具有将将切面保持为一个模块单元的优点。 还有一个优点就是@AspectJ切面能被Spring AOP和AspectJ两者都理解 </li><li>所以如果稍后你认为你需要AspectJ 的能力去实现附加的需求，那么你非常容易转移到基于AspectJ的途径。总而言之，我们更喜欢@AspectJ风格只要你有切面 去做超出简单的“配置”企业服务之外的事情。</li></ul><h3 id="3-混合切面类型"><a href="#3-混合切面类型" class="headerlink" title="3 混合切面类型"></a>3 混合切面类型</h3><p>我们完全可以混合使用以下几种风格的切面定义：使用自动代理的@AspectJ 风格的切面，<code>schema-defined &lt;aop:aspect&gt;</code> 的切面，<br>和用 <code>&lt;aop:advisor&gt;</code> 声明的advisor，甚至是使用Spring 1.2风格的代理和拦截器。<br>由于以上几种风格的切面定义的都使用了相同的底层机制，因此可以很好的共存。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#aop&quot;&gt;AOP&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#动态代理&quot;&gt;动态代理&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#asm&quot;&gt;asm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ViewSolution.md</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-FrontEnd-ViewSolution/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-FrontEnd-ViewSolution/</id>
    <published>2018-12-20T12:59:38.760Z</published>
    <updated>2018-12-20T12:59:38.760Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#与前端有关的问题">与前端有关的问题</a><ol><li><a href="#资源文件">资源文件</a><ol><li><a href="#图片">图片</a><ol><li><a href="#使用图片还是base64">使用图片还是BASE64</a></li></ol></li></ol></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="与前端有关的问题"><a href="#与前端有关的问题" class="headerlink" title="与前端有关的问题"></a>与前端有关的问题</h1><h2 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><h4 id="使用图片还是BASE64"><a href="#使用图片还是BASE64" class="headerlink" title="使用图片还是BASE64"></a>使用图片还是BASE64</h4><ul><li><a href="https://www.zhihu.com/question/31155574?sort=created" target="_blank" rel="noopener">知乎提问 前端开发中，使用base64图片的弊端是什么？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#与前端有关的问题&quot;&gt;与前端有关的问题&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#资源文件&quot;&gt;资源文件&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#图片&quot;&gt;图片&lt;/a&gt;&lt;ol&gt;
      
    
    </summary>
    
      <category term="知识整理" scheme="http://blog.kuangcp.top/categories/%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring.md</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Java-Spring-Spring/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Java-Spring-Spring/</id>
    <published>2018-12-20T12:59:38.760Z</published>
    <updated>2018-12-20T12:59:38.760Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#spring">Spring</a><ol><li><a href="#配置使用">配置使用</a><ol><li><a href="#通过构建工具">通过构建工具</a></li><li><a href="#注解方式">注解方式</a><ol><li><a href="#xml文件配置">xml文件配置</a></li><li><a href="#常用的注解">常用的注解</a></li></ol></li><li><a href="#xml方式">xml方式</a><ol><li><a href="#xml方式和注解方式的比较">xml方式和注解方式的比较</a></li></ol></li></ol></li><li><a href="#spring技巧">Spring技巧</a><ol><li><a href="#获取context上下文环境">获取Context上下文环境</a><ol><li><a href="#在jsp或servlet中获取">在JSP或Servlet中获取</a></li></ol></li><li><a href="#spring-和-servletcontextlist">Spring 和 ServletContextList</a></li></ol></li></ol></li><li><a href="#基础">基础</a><ol><li><a href="#生命周期">生命周期</a></li><li><a href="#iocdi-控制反转">IOC/DI 控制反转</a></li><li><a href="#scheduling">Scheduling</a></li><li><a href="#websocket">Websocket</a><ol><li><a href="#maven配置">maven配置</a></li></ol></li><li><a href="#web开发上的一些优秀的习惯">Web开发上的一些优秀的习惯</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><blockquote><p><a href="https://spring.io/" target="_blank" rel="noopener">Spring官网</a> | <a href="http://www.spring4all.com/" target="_blank" rel="noopener">spring4all社区</a></p></blockquote><blockquote><p><a href="http://www.spring4all.com/article/558" target="_blank" rel="noopener">Spring For All 社区 -&gt;  Spring 官方教程翻译</a></p></blockquote><blockquote><p><a href="https://www.tutorialspoint.com/spring/index.htm" target="_blank" rel="noopener">Spring Tutorial</a></p></blockquote><h2 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h2><blockquote><p><strong>通过原始的复制jar方式 :</strong> 官网下载对应的jar, 添加到ide中</p></blockquote><h3 id="通过构建工具"><a href="#通过构建工具" class="headerlink" title="通过构建工具"></a>通过构建工具</h3><p>Maven 中 pom.xml 中, Gradle是 build.gradle 添加以下等依赖:</p><p><em>核心依赖</em></p><ol><li>spring-core</li><li>spring-beans</li><li>spring-context</li></ol><p><em>其他,可选</em></p><ol><li>spring-aop</li><li>spring-websocket</li><li>spring-jdbc </li><li>spring-tx </li><li>spring-web</li><li>spring-webmvc</li><li>spring-test</li></ol><h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><blockquote><p>需要在配置文件 xml配置文件 中配置包扫描 才能生效</p></blockquote><h4 id="xml文件配置"><a href="#xml文件配置" class="headerlink" title="xml文件配置"></a>xml文件配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 头部分要添加Context --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对使用了注解的包进行扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.github.kuangcp"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong> 只需要这个配置文件就可以使用注解来使用Spring框架</p></blockquote><h4 id="常用的注解"><a href="#常用的注解" class="headerlink" title="常用的注解"></a>常用的注解</h4><ul><li><p>标注为bean</p><ul><li><code>@Component([value=]&quot;id&quot;)</code>不写则默认是当前类名</li><li>@Entity</li><li>@Service</li><li>@Repository</li><li>@Controller 和 @RestController</li></ul></li><li><p>自动注入</p><ul><li><code>@Resource([value=]&quot;id&quot;)</code> 按名字注入</li><li><code>@Autowried</code> 根据类型自动注入（只对单例起作用）和 <code>Resource(类名首字母小写)</code> 等价</li><li><code>@Qualifier(&quot;id&quot;)</code>自动注入后的进一步精确（多个的情况：）</li></ul></li><li><p><strong>注意 :</strong> 关于自动注入, 在属性上打 @Autowried 注解是不建议的, 作者建议采用构造器方式:  <a href="http://olivergierke.de/2013/11/why-field-injection-is-evil/" target="_blank" rel="noopener">Why field injection is evil</a></p></li><li><p>AOP</p><ul><li>@Aspect 注明是切面类</li><li>@Before(“execution(public void com.wjt276.dao.impl.UserDaoImpl.save(com.wjt276.model.User))”) 和xml方式的before对应</li></ul></li><li><p>bean扫描</p><ul><li>ComponentScan 扫描指定包下Spring注解的类</li></ul></li></ul><blockquote><p><a href="http://olivergierke.de/2013/11/why-field-injection-is-evil/" target="_blank" rel="noopener">参考博客: Why field injection is evil</a></p></blockquote><hr><h3 id="xml方式"><a href="#xml方式" class="headerlink" title="xml方式"></a>xml方式</h3><ul><li>只用到bean的头，主要配置内容：<code>&lt;bean&gt;&lt;property&gt;&lt;/property&gt;&lt;/bean&gt;</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 对使用了注解的包进行扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.spring.aop"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 一般而言，bean都是单实例的 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.spring.entity.Person"</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"myth"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addr"</span> <span class="attr">value</span>=<span class="string">"vol"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"construct"</span> <span class="attr">class</span>=<span class="string">"cn.spring.entity.ConstructorEntity"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 如果是不同的类型的参数 顺序可以随意，但是数据类型一样的话就要严格按顺序了--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"String_1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注意引用类型是要写全路径，基本数据类型是可以直接写小写 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;constructor-arg type="java.lang.String" value="String_2"&gt;&lt;/constructor-arg&gt; --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"TestConstruct"</span> <span class="attr">class</span>=<span class="string">"cn.spring.entity.TestConstruct"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entity"</span> <span class="attr">ref</span>=<span class="string">"construct"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 加载属性文件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"property_config"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>cn/spring/entity/db.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 测试获取属性文件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"show_db"</span> <span class="attr">class</span>=<span class="string">"cn.spring.entity.TestProperties"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 特别注意大小写问题 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="xml方式和注解方式的比较"><a href="#xml方式和注解方式的比较" class="headerlink" title="xml方式和注解方式的比较"></a>xml方式和注解方式的比较</h4><ul><li>当你确定切面是实现一个给定需求的最佳方法时，你如何选择是使用Spring AOP还是AspectJ，以及选择 Aspect语言（代码）风格、@AspectJ声明风格或XML风格？</li><li>这个决定会受到多个因素的影响，包括应用的需求、 开发工具和小组对AOP的精通程度。</li><li><strong>个人理解</strong>：使用bean的时候使用注解，AOP使用xml方式，更直观</li></ul><hr><h2 id="Spring技巧"><a href="#Spring技巧" class="headerlink" title="Spring技巧"></a>Spring技巧</h2><h3 id="获取Context上下文环境"><a href="#获取Context上下文环境" class="headerlink" title="获取Context上下文环境"></a>获取Context上下文环境</h3><h4 id="在JSP或Servlet中获取"><a href="#在JSP或Servlet中获取" class="headerlink" title="在JSP或Servlet中获取"></a>在JSP或Servlet中获取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(config.getServletContext());</span><br></pre></td></tr></table></figure><h3 id="Spring-和-ServletContextList"><a href="#Spring-和-ServletContextList" class="headerlink" title="Spring 和 ServletContextList"></a>Spring 和 ServletContextList</h3><ul><li>想要启动Tomcat之后，初始化运行一些方法，把数据从数据库拿出放入redis中，然后使用了ServletContextListener<ul><li>然后还是按照往常一样的使用Spring自动注入的便利，来使用service层获取数据，但是忽略了启动顺序</li><li><strong>context-param -&gt; listener -&gt; filter -&gt; servlet</strong></li><li>所以在启动这个初始化方法的时候，其实Spring的环境是还没有加载的，所以没有扫描，也就没有了自动注入，也就有了空指针异常</li><li>所以要使用如下方法得到Spring的Context（上下文），获取bean，再操作</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123; </span><br><span class="line">        ApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(event.getServletContext());</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    &#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"># 基础</span><br><span class="line">## 生命周期</span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"></span><br><span class="line">- [ ] 完善</span><br><span class="line"></span><br><span class="line">##  IOC/DI 控制反转</span><br><span class="line">- DI 译为依赖注入 所有的bean都在IOC容器中（单例的）多例的不在该容器中进行管理</span><br><span class="line">- 通过注入 可以注入基本属性 对象属性，集合属性，构造器，properties等</span><br><span class="line">- 不采用Spring的IOC容器使用Java基础来实现：</span><br><span class="line">   - **静态代理** </span><br><span class="line">       - 针对每个具体类分别编写代理类</span><br><span class="line">       - 针对一个接口编写一个代理类</span><br><span class="line">   - **动态代理**</span><br><span class="line">       - 针对一个方面编写一个InvocationHandler，然后借用JDK反射包中的Proxy类为各种接口动态生成相应的代理类 </span><br><span class="line"></span><br><span class="line">属性上 <span class="meta">@Autowired</span> 即可, 但是现在不建议直接在属性上使用注解, 而是建议在构造器上, 为了避免 手动使用<span class="keyword">new</span> 实例化Bean, 然后里面本该注入的属性全部为<span class="keyword">null</span></span><br><span class="line">可以用lombok来协助</span><br><span class="line">```java</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(onConstructor = @__(<span class="meta">@Autowired</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">private</span> B b;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> look up 方法注入</li></ul><hr><h2 id="Scheduling"><a href="#Scheduling" class="headerlink" title="Scheduling"></a>Scheduling</h2><blockquote><p><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/integration.html#scheduling" target="_blank" rel="noopener">Official Doc</a></p></blockquote><blockquote><p><a href="https://www.baeldung.com/spring-scheduled-tasks" target="_blank" rel="noopener">参考博客: The @Scheduled Annotation in Spring</a><br><a href="http://qinghua.github.io/spring-scheduler/" target="_blank" rel="noopener">参考博客: Spring Scheduler的使用与坑</a><br><a href="https://www.cnblogs.com/jingmoxukong/p/5825806.html#%E5%AE%8C%E6%95%B4%E8%8C%83%E4%BE%8B" target="_blank" rel="noopener">参考博客: [Spring]支持注解的Spring调度器</a><br><a href="https://blog.csdn.net/yyx1025988443/article/details/78698046" target="_blank" rel="noopener">参考博客: spring scheduled的动态线程池调度和任务进度的监控</a></p></blockquote><p>其主体是 TaskExecutor 和 TaskScheduler 组成的, 也就是调度和执行</p><ul><li><a href="http://www.cronmaker.com/" target="_blank" rel="noopener">cron maker</a></li><li><a href=""></a></li></ul><hr><h2 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h2><h3 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-messaging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> Spring方式, 现在用boot用多了, 都忘了怎么配置Spring了</li></ul><hr><h2 id="Web开发上的一些优秀的习惯"><a href="#Web开发上的一些优秀的习惯" class="headerlink" title="Web开发上的一些优秀的习惯"></a>Web开发上的一些优秀的习惯</h2><ul><li>使用AOP来简化开发MVC的代码</li><li>繁杂的代码如何简化</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#spring&quot;&gt;Spring&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#配置使用&quot;&gt;配置使用&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#通过构建工具&quot;&gt;通过构建工具&lt;/a&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mybatis.md</title>
    <link href="http://blog.kuangcp.top/2018/12/20/Memo-Java-Ecosystem-Mybatis/"/>
    <id>http://blog.kuangcp.top/2018/12/20/Memo-Java-Ecosystem-Mybatis/</id>
    <published>2018-12-20T12:59:38.760Z</published>
    <updated>2018-12-20T12:59:38.760Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#mybatis">Mybatis</a><ol><li><a href="#mybatis">Mybatis</a><ol><li><a href="#xml文件配置">xml文件配置：</a><ol><li><a href="#主配置文件">主配置文件：</a><ol><li><a href="#操作配置文件">操作配置文件：</a></li></ol></li></ol></li><li><a href="#导入jar包">导入JAR包：</a></li><li><a href="#创建sqlsessionfactory类-内容">创建SqlSessionFactory类 内容：</a><ol><li><a href="#maven-spring-mybaits-配置">maven Spring-mybaits 配置</a><ol><li><a href="#sessionfactory类使用spring注入一个工厂类然后使用本地线程组节省session开销"><strong>SessionFactory类，使用Spring注入一个工厂类，然后使用本地线程组，节省Session开销</strong></a></li></ol></li></ol></li><li><a href="#流程控制">流程控制</a><ol><li><a href="#foreach-循环语句">foreach 循环语句</a><ol><li><a href="#collection-有-arry-list-map-几种-还有item是必写其他的是可选的">collection 有 arry list map 几种 还有item是必写，其他的是可选的</a></li></ol></li><li><a href="#if-判断语句">if 判断语句:</a></li><li><a href="#set-方便书写update语句">set 方便书写update语句</a></li><li><a href="#choose-相当于switch语句">choose 相当于switch语句</a><ol><li><a href="#$和的区别">$和的区别：</a></li></ol></li></ol></li></ol></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><blockquote><p>一个灵活的数据库中间件框架</p></blockquote><h2 id="Mybatis-1"><a href="#Mybatis-1" class="headerlink" title="Mybatis"></a>Mybatis</h2><h3 id="xml文件配置："><a href="#xml文件配置：" class="headerlink" title="xml文件配置："></a>xml文件配置：</h3><ul><li>创建mybatis-config.xml文件<ul><li>该文件是主配置文件，配置了sessionFactory</li></ul></li><li>创建generatorConfig.xml文件<ul><li>是各种操作的配置，一个操作对应一个SQL的配置</li></ul></li></ul><h4 id="主配置文件："><a href="#主配置文件：" class="headerlink" title="主配置文件："></a>主配置文件：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置别名 为了方便配置操作文件--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"cn.mybatis.test.Human"</span> <span class="attr">alias</span>=<span class="string">"Human"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 配置环境变量 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置mappers --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/mybatis/test/HumanDao.xml"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="操作配置文件："><a href="#操作配置文件：" class="headerlink" title="操作配置文件："></a>操作配置文件：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.mybatis.test"</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 按id查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUsersById"</span> <span class="attr">parameterType</span>=<span class="string">"Human"</span> <span class="attr">resultType</span>=<span class="string">"Human"</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- useCache="false" --&gt;</span></span><br><span class="line">        &lt;![CDATA[ </span><br><span class="line">      select * from inserts t where t.id=#&#123;id&#125;</span><br><span class="line">      ]]&gt;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 查询全部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUsers"</span> <span class="attr">resultType</span>=<span class="string">"Human"</span>&gt;</span></span><br><span class="line">        select * from inserts</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 插入记录 --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"Human"</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该字段是必须要在数据库中自增长的</span></span><br><span class="line"><span class="comment">        可能会有并发问题</span></span><br><span class="line"><span class="comment">        useGeneratedKeys="true" keyProperty="id"</span></span><br><span class="line"><span class="comment">        所以用查询方式好点， 写语句就不要考虑主键了</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">            select LAST_INSERT_ID()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into inserts (name) values(#&#123;name&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 删除记录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">        delete from inserts where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 更新记录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Human"</span>&gt;</span></span><br><span class="line">        update inserts set name=#&#123;name&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="导入JAR包："><a href="#导入JAR包：" class="headerlink" title="导入JAR包："></a>导入JAR包：</h3><ul><li><strong>核心包</strong></li><li>mybatis-3.4.1.jar 主包</li><li>dom4j-1.6.1.jar 日志记录</li><li>log4j-1.2.15.jar</li><li>slf4j-api-1.5.8.jar</li><li>slf4j-log4j12.jar</li></ul><h3 id="创建SqlSessionFactory类-内容："><a href="#创建SqlSessionFactory类-内容：" class="headerlink" title="创建SqlSessionFactory类 内容："></a>创建SqlSessionFactory类 内容：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sessionFactory;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        String resource = <span class="string">"cn/mybatis/test/mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"获取Session失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Session</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    session = sessionFactory.openSession();</span><br><span class="line">    <span class="keyword">return</span> session;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="maven-Spring-mybaits-配置"><a href="#maven-Spring-mybaits-配置" class="headerlink" title="maven Spring-mybaits 配置"></a>maven Spring-mybaits 配置</h4><ul><li>使用Spring自动注入对象,方便别名和SessionFactory的管理</li><li>pom引入必须的JAR包就可以了</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--基本属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;initialSize&#125;"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxSize&#125;"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--操作配置文件的路径--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:bean/*.xml"</span>/&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--bean的路径，进行别名的自动扫描--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.book.bean"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mybatisSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.book.dao.MybatisSessionFactory"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--定义数据源--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="SessionFactory类，使用Spring注入一个工厂类，然后使用本地线程组，节省Session开销"><a href="#SessionFactory类，使用Spring注入一个工厂类，然后使用本地线程组，节省Session开销" class="headerlink" title="SessionFactory类，使用Spring注入一个工厂类，然后使用本地线程组，节省Session开销"></a><strong>SessionFactory类，使用Spring注入一个工厂类，然后使用本地线程组，节省Session开销</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisSessionFactory</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span>  SqlSessionFactory sessionFactory;</span><br><span class="line">   <span class="comment">// 日志</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> org.slf4j.Logger Log = LoggerFactory.getLogger(MybatisSessionFactory.class);</span><br><span class="line">   <span class="comment">//使用本地线程组能避免不必要的Session开支，加强性能</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SqlSession&gt; THREAD_LOCAL = <span class="keyword">new</span> ThreadLocal&lt;SqlSession&gt;();</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取Session</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span>  SqlSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession session = (SqlSession)THREAD_LOCAL.get();</span><br><span class="line">       <span class="keyword">if</span>(session==<span class="keyword">null</span> )&#123;</span><br><span class="line">           session = <span class="keyword">this</span>.sessionFactory.openSession();</span><br><span class="line">           THREAD_LOCAL.set(session);</span><br><span class="line">       &#125;</span><br><span class="line">       Log.info(<span class="string">"__获取了一个Session__"</span>+session);</span><br><span class="line">       <span class="keyword">return</span> session;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">       关闭连接</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession session = (SqlSession)THREAD_LOCAL.get();</span><br><span class="line">       THREAD_LOCAL.set(<span class="keyword">null</span>);</span><br><span class="line">       <span class="keyword">if</span>(session!=<span class="keyword">null</span>)&#123;</span><br><span class="line">           session.close();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span>  SqlSessionFactory <span class="title">getSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> sessionFactory;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">setSessionFactory</span><span class="params">(SqlSessionFactory sessionFactory)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.sessionFactory = sessionFactory;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="foreach-循环语句"><a href="#foreach-循环语句" class="headerlink" title="foreach 循环语句"></a>foreach 循环语句</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"param_list 自定义的话就是Map中的key，或者使用 @Param("</span>")来指定 " <span class="attr">item</span>=<span class="string">"params"</span> <span class="attr">index</span>=<span class="string">"currentIndex 当前索引"</span>  <span class="attr">separator</span>=<span class="string">"循环分隔符"</span> <span class="attr">open</span>=<span class="string">"在循环前加上字符"</span> <span class="attr">close</span>=<span class="string">"循环结束后加上字符"</span>&gt;</span></span><br><span class="line">    $&#123;params&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="collection-有-arry-list-map-几种-还有item是必写，其他的是可选的"><a href="#collection-有-arry-list-map-几种-还有item是必写，其他的是可选的" class="headerlink" title="collection 有 arry list map 几种 还有item是必写，其他的是可选的"></a>collection 有 arry list map 几种 还有item是必写，其他的是可选的</h5><h4 id="if-判断语句"><a href="#if-判断语句" class="headerlink" title="if 判断语句:"></a>if 判断语句:</h4><ul><li><code>&lt;if test=&quot;&quot;&gt;&lt;/if&gt;</code></li></ul><h4 id="set-方便书写update语句"><a href="#set-方便书写update语句" class="headerlink" title="set 方便书写update语句"></a>set 方便书写update语句</h4><ul><li><code>&lt;set&gt;&lt;if test=&quot;col!=null&quot;&gt;col=#{col},&lt;/if&gt;&lt;/set&gt;</code></li></ul><blockquote><p>mybatis会自动去除多余的逗号，但是每一行书写要写逗号</p></blockquote><h4 id="choose-相当于switch语句"><a href="#choose-相当于switch语句" class="headerlink" title="choose 相当于switch语句"></a>choose 相当于switch语句</h4><ul><li><code>&lt;choose&gt;&lt;when test=&quot;&quot;&gt;&lt;/when&gt;&lt;/choose&gt;</code></li></ul><h4 id="和-的区别："><a href="#和-的区别：" class="headerlink" title="$和#的区别："></a>$和#的区别：</h4><ul><li>\$ 会有SQL注入的漏洞，#则没有</li><li>使用$ 是SQL进行String的拼接，使用#是preparstatement的预处理然后注入</li><li>使用#的时候出现这个问题<br>2017-01-22 11:16:11.046 [main] DEBUG myth.book.getAll_Param_BookType - ==&gt;  Preparing: select * from book_type where ? and ? and 1=1;<br>2017-01-22 11:16:11.136 [main] DEBUG myth.book.getAll_Param_BookType - ==&gt; Parameters:  book_type&lt;10 (String),  ‘father_type=’2 (String)</li><li>条件不能使用数值，<br>  条件是单独使用时也是String但是是有效的</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#mybatis&quot;&gt;Mybatis&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#mybatis&quot;&gt;Mybatis&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#xml文件配置&quot;&gt;x
      
    
    </summary>
    
    
  </entry>
  
</feed>
