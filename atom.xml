<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kuangcp Blog</title>
  
  <subtitle>Javaer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.kuangcp.top/"/>
  <updated>2018-12-13T11:53:28.399Z</updated>
  <id>http://blog.kuangcp.top/</id>
  
  <author>
    <name>Kuangcp</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PostgreSQL.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Database-PostgreSQL/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Database-PostgreSQL/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#postgresql">Postgresql</a><ol><li><a href="#概述">概述</a></li><li><a href="#和mysql对比">和MySQL对比</a></li><li><a href="#安装">安装</a><ol><li><a href="#安装客户端">安装客户端</a></li><li><a href="#安装服务端">安装服务端</a></li><li><a href="#docker方式安装服务端">Docker方式安装服务端</a><ol><li><a href="#pull完整版">pull完整版</a></li><li><a href="#pull精简版">pull精简版</a></li><li><a href="#dockerfile构建">Dockerfile构建</a></li><li><a href="#解释dockerfile文件">解释Dockerfile文件</a></li></ol></li></ol></li><li><a href="#使用">使用</a><ol><li><a href="#postgresql终端命令行使用">Postgresql终端命令行使用</a></li><li><a href="#用户和角色权限">用户和角色权限</a><ol><li><a href="#创建用户">创建用户</a></li><li><a href="#修改权限">修改权限</a></li></ol></li><li><a href="#java使用">Java使用</a></li></ol></li><li><a href="#基础数据">基础数据</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="Postgresql"><a href="#Postgresql" class="headerlink" title="Postgresql"></a>Postgresql</h1><ul><li style="list-style: none"><input type="checkbox"> <a href="http://www.onexsoft.com/onesql.html" target="_blank" rel="noopener">该公司对于PostgreSQL的缺点陈列是否属实</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p><a href="http://www.cnblogs.com/fcode/articles/PostgreSQL.html" target="_blank" rel="noopener">PostgreSQL</a> | <a href="https://wiki.postgresql.org/wiki/Main_Page" target="_blank" rel="noopener">wiki</a></p></blockquote><ul><li>严格SQL标准</li><li>Schemas 和表，用户的关系：<ul><li>Schemas相当于是一个数据库进行分类的文件夹</li></ul></li></ul><h2 id="和MySQL对比"><a href="#和MySQL对比" class="headerlink" title="和MySQL对比"></a>和MySQL对比</h2><blockquote><p><a href="https://www.zhihu.com/question/20010554" target="_blank" rel="noopener">PostgreSQL 与 MySQL 相比，优势何在？</a><br><a href="https://en.wikibooks.org/wiki/Converting_MySQL_to_PostgreSQL" target="_blank" rel="noopener">Converting MySQL to PostgreSQL</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h3><blockquote><p><code>sudo apt-get install postgresql-client</code></p></blockquote><h3 id="安装服务端"><a href="#安装服务端" class="headerlink" title="安装服务端"></a>安装服务端</h3><blockquote><p><code>sudo apt install postgresql</code></p></blockquote><h3 id="Docker方式安装服务端"><a href="#Docker方式安装服务端" class="headerlink" title="Docker方式安装服务端"></a>Docker方式安装服务端</h3><blockquote><p><a href="https://hub.docker.com/_/postgres/" target="_blank" rel="noopener">官方镜像</a></p></blockquote><h4 id="pull完整版"><a href="#pull完整版" class="headerlink" title="pull完整版"></a>pull完整版</h4><ul><li>或者： <code>docker pull postgres</code> <a href="https://hub.docker.com/_/postgres/" target="_blank" rel="noopener">官方镜像</a><ul><li>运行容器 <code>docker run --name mypostgre -i -t -p 5432:5432 postgres</code></li><li>客户端连接 <code>psql -h localhost -p 5432 -U postgres</code></li></ul></li></ul><h4 id="pull精简版"><a href="#pull精简版" class="headerlink" title="pull精简版"></a>pull精简版</h4><ul><li>下拉镜像：<code>docker pull postgres:alpine</code> | 因为个人系统客户端是9.6, 所以用<code>9.6-alpine</code>镜像</li><li><p>构建容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name postgre \</span><br><span class="line">-e POSTGRES_PASSWORD=jiushi \</span><br><span class="line">-v gitea-db-data:/var/lib/postgresql/data \</span><br><span class="line">-p 5432:5432 \</span><br><span class="line">postgres:9.6-alpine</span><br></pre></td></tr></table></figure></li><li><p>容器中连接 进入postgresql终端 <code>docker exec -it postgre psql -U postgres</code></p><ul><li>客户端连接 <code>psql -h localhost -U postgres</code></li></ul></li><li>连接后 输入<code>\l</code> 列出所有数据库 即可查看连接成功与否</li></ul><h4 id="Dockerfile构建"><a href="#Dockerfile构建" class="headerlink" title="Dockerfile构建"></a>Dockerfile构建</h4><p><code>Dockerfile</code><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-key adv --keyserver keyserver.ubuntu.com --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8</span></span><br><span class="line"><span class="bash">RUN <span class="built_in">echo</span> <span class="string">"deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main"</span> &gt; /etc/apt/sources.list.d/pgdg.list</span></span><br><span class="line"><span class="bash">RUN apt-get update &amp;&amp; apt-get -y -q install python-software-properties software-properties-common \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get -y -q install postgresql-9.4 postgresql-client-9.4 postgresql-contrib-9.4</span></span><br><span class="line"><span class="bash">USER postgres</span></span><br><span class="line"><span class="bash">RUN /etc/init.d/postgresql start \</span></span><br><span class="line"><span class="bash">    &amp;&amp; psql --<span class="built_in">command</span> <span class="string">"CREATE USER pger WITH SUPERUSER PASSWORD 'pger';"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; createdb -O pger pgerdb</span></span><br><span class="line"><span class="bash">USER root</span></span><br><span class="line"><span class="bash">RUN <span class="built_in">echo</span> <span class="string">"host all  all    0.0.0.0/0  md5"</span> &gt;&gt; /etc/postgresql/9.4/main/pg_hba.conf</span></span><br><span class="line"><span class="bash">RUN <span class="built_in">echo</span> <span class="string">"listen_addresses='*'"</span> &gt;&gt; /etc/postgresql/9.4/main/postgresql.conf</span></span><br><span class="line"><span class="bash">EXPOSE 5432</span></span><br><span class="line"><span class="bash">RUN mkdir -p /var/run/postgresql &amp;&amp; chown -R postgres /var/run/postgresql</span></span><br><span class="line"><span class="bash">VOLUME  [<span class="string">"/etc/postgresql"</span>, <span class="string">"/var/log/postgresql"</span>, <span class="string">"/var/lib/postgresql"</span>]</span></span><br><span class="line"><span class="bash">USER postgres</span></span><br><span class="line"><span class="bash">CMD [<span class="string">"/usr/lib/postgresql/9.4/bin/postgres"</span>, <span class="string">"-D"</span>, <span class="string">"/var/lib/postgresql/9.4/main"</span>, <span class="string">"-c"</span>, <span class="string">"config_file=/etc/postgresql/9.4/main/postgresql.conf"</span>]</span></span><br></pre></td></tr></table></figure></p><ul><li>构建容器 <code>docker build -t mypostgresql:9.4 .</code><ul><li>运行容器 <code>docker run --name mypostgre -i -t -p 5432:5432 mypostgresql:9.4</code></li><li>使用客户端连接<code>psql -h localhost -p 5432 -U pger -W pgerdb</code> 口令：<code>pger</code></li></ul></li></ul><h4 id="解释Dockerfile文件"><a href="#解释Dockerfile文件" class="headerlink" title="解释Dockerfile文件"></a>解释Dockerfile文件</h4><blockquote><p>待学习解释</p></blockquote><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p><a href="http://postgres.cn/docs/9.6/index.html" target="_blank" rel="noopener">PostgreSQL 9.6.0 手册</a></p></blockquote><h3 id="Postgresql终端命令行使用"><a href="#Postgresql终端命令行使用" class="headerlink" title="Postgresql终端命令行使用"></a>Postgresql终端命令行使用</h3><blockquote><p><a href="http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html" target="_blank" rel="noopener">PostgreSQL新手入门</a><br><code>用熟悉的MySQL命令来解释</code></p><ul><li><code>\l</code> show databases</li><li><code>\c dbname [user]</code> 切换数据库</li><li><code>\dt</code> show tables</li><li><code>\d tablename</code> desc tablename</li><li><code>\di</code> 查看索引</li><li><code>\du</code> 查看所有用户</li><li><code>\dn</code> 查看模式列表</li><li><code>\copyright</code> 显示版权信息</li><li><code>\encoding</code> 显示编码信息</li><li><code>\h</code> SQL命令语法上的说明，用*显示全部命令 </li><li><code>\prompt [文本]名称</code> 提示用户设定内部变数</li><li><code>\password [username]</code> 改密码</li><li><code>\q</code> exit</li><li>可以使用pg_dump和pg_dumpall来完成。比如备份sales数据库： <ul><li>pg_dump drupal&gt;/opt/Postgresql/backup/1.bak </li></ul></li></ul></blockquote><h3 id="用户和角色权限"><a href="#用户和角色权限" class="headerlink" title="用户和角色权限"></a>用户和角色权限</h3><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><ul><li><code>createuser -P -D -R -e playboy</code>  //创建一个用户,-P要设置密码，-R,不参创建其他用户，-D不能创建数据库</li><li><code>create user myth</code> 不带login属性</li><li><code>create role myth</code> 具有login属性</li><li><p><code>psql -U playboy -d playboy</code> 登录用户，一般默认是有用户同名数据库才能登录</p></li><li><p><a href="http://www.linuxidc.com/Linux/2013-04/83564p2.htm" target="_blank" rel="noopener">修改默认登录不需要密码的配置</a></p></li></ul><h4 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h4><blockquote><p><a href="http://blog.csdn.net/beiigang/article/details/8604578" target="_blank" rel="noopener">参考博客</a><br><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/05/18/2302639.html" target="_blank" rel="noopener">参考博客_角色</a><br><a href="http://www.linuxidc.com/Linux/2013-04/83564p2.htm" target="_blank" rel="noopener">配置</a></p></blockquote><ul><li><code>ALTER ROLE rolename LOGIN;</code>  设置登录权限</li><li><code>ALTER ROLE david WITH PASSWORD &#39;ufo456&#39;;</code> 设置密码登录权限<ul><li>但是，默认是不需要密码 查看pg_hba.conf 文件，发现local 的METHOD 为trust，所以不需要输入密码</li><li>将local 的METHOD 更改为password，然后保存重启postgresql。</li><li><a href="http://www.linuxidc.com/Linux/2014-02/96886.htm" target="_blank" rel="noopener">博客</a></li></ul></li><li><code>ALTER ROLE sandy VALID UNTIL &#39;2014-04-24&#39;;</code> 设置角色有效期</li><li><p><code>SELECT * from pg_roles ;</code> 查看所有角色</p></li><li><p><code>CREATE ROLE father login nosuperuser nocreatedb nocreaterole noinherit encrypted password &#39;abc123&#39;;</code> </p><ul><li>在PostgreSQL中，首先需要创建一个代表组的角色，之后再将该角色的membership 权限赋给独立的角色即可。</li></ul></li><li><code>GRANT CONNECT ON DATABASE test to father;</code> 角色赋予数据库test 连接权限和相关表的查询权限。</li></ul><h3 id="Java使用"><a href="#Java使用" class="headerlink" title="Java使用"></a>Java使用</h3><blockquote><p><a href="https://github.com/pgjdbc/pgjdbc" target="_blank" rel="noopener">Postgresql JDBC Driver</a></p></blockquote><ul><li><a href="https://springframework.guru/configuring-spring-boot-for-postgresql/" target="_blank" rel="noopener">官方：springboot使用</a><ul><li><a href="https://www.netkiller.cn/java/spring/boot/postgresql.html" target="_blank" rel="noopener">参考博客</a></li></ul></li></ul><h2 id="基础数据"><a href="#基础数据" class="headerlink" title="基础数据"></a>基础数据</h2><blockquote><p><a href="https://blog.csdn.net/jpzhu16/article/details/52140048" target="_blank" rel="noopener"> PostgreSQL中的数据类型</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#postgresql&quot;&gt;Postgresql&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#概述&quot;&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#和mysql对比&quot;&gt;和My
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Database-MySQL/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Database-MySQL/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#mysql">Mysql</a><ol><li><a href="#安装">安装</a><ol><li><a href="#ubuntu安装配置mysql">Ubuntu安装配置MySQL</a></li><li><a href="#docker安装">Docker安装</a></li><li><a href="#图形化客户端">图形化客户端</a></li></ol></li></ol></li><li><a href="#基本数据类型">基本数据类型</a><ol><li><a href="#数值类型">数值类型</a><ol><li><a href="#short">short</a></li><li><a href="#int">int</a></li><li><a href="#decimal">decimal</a></li></ol></li><li><a href="#字符类型">字符类型</a><ol><li><a href="#varchar">varchar</a></li><li><a href="#text">text</a></li></ol></li><li><a href="#longblob">LongBlob</a></li></ol></li><li><a href="#基本组成">基本组成</a><ol><li><a href="#数据编码">数据编码</a></li><li><a href="#数据库">数据库</a><ol><li><a href="#创建">创建</a></li><li><a href="#导出">导出</a></li><li><a href="#修改">修改</a></li></ol></li><li><a href="#表">表</a><ol><li><a href="#创建">创建</a></li><li><a href="#修改表定义">修改表定义</a><ol><li><a href="#增删字段">增删字段</a></li></ol></li></ol></li><li><a href="#视图">视图</a></li><li><a href="#触发器">触发器</a><ol><li><a href="#创建单语句的触发器">【创建单语句的触发器】</a></li><li><a href="#创建多语句的触发器">【创建多语句的触发器】</a></li><li><a href="#new-和-old关键字">【NEW 和 OLD关键字】</a></li></ol></li><li><a href="#存储过程">存储过程</a><ol><li><a href="#基本结构示例">基本结构示例：</a></li></ol></li><li><a href="#函数">函数</a><ol><li><a href="#简单示例">【简单示例】</a></li></ol></li></ol></li><li><a href="#1mysql常用命令集合">1.mysql常用命令集合</a><ol><li><a href="#查看数据库参数">查看数据库参数</a><ol><li><a href="#查看连接状况">查看连接状况</a></li></ol></li><li><a href="#11自增长">1.1【自增长】</a></li><li><a href="#12主键约束的修改">1.2【主键约束的修改】</a></li><li><a href="#13修改表名">1.3【修改表名】</a></li><li><a href="#14定界符">1.4【定界符】</a></li><li><a href="#15已有表数据新建表">1.5【已有表数据，新建表】</a></li><li><a href="#16查看所有连接状态">1.6【查看所有连接状态】</a></li><li><a href="#17查看表的状态">1.7【查看表的状态】</a></li><li><a href="#18关于时间-">1.8【关于时间 】</a><ol><li><a href="#181常用函数">1.8.1【常用函数】</a></li><li><a href="#182获取当前时间与i个月之间的天数">1.8.2【获取当前时间与i个月之间的天数】</a></li><li><a href="#183-datetime和timestamp区别">1.8.3 datetime和timestamp区别</a></li></ol></li><li><a href="#19-插入外码">1.9 【插入外码】</a></li></ol></li><li><a href="#2变量">2.【变量】</a></li><li><a href="#3基本流程语法">3.【基本流程语法】</a></li><li><a href="#7异常">7.【异常】</a></li><li><a href="#8用户管理">8.【用户管理】</a><ol><li><a href="#查看">查看</a></li><li><a href="#创建">创建</a></li><li><a href="#修改">修改</a><ol><li><a href="#授权">【授权】</a></li></ol></li></ol></li><li><a href="#查询">查询</a></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><blockquote><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">MySQL官方下载地址</a> | <a href="https://dev.mysql.com/doc/" target="_blank" rel="noopener">doc</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Ubuntu安装配置MySQL"><a href="#Ubuntu安装配置MySQL" class="headerlink" title="Ubuntu安装配置MySQL"></a>Ubuntu安装配置MySQL</h3><ul><li>更新列表<code>sudo apt-get update</code></li><li>安装MySQL <code>sudo apt-get install mysql-server mysql-client</code></li><li>检查服务是否已经开启 ： <code>sudo netstat -tap | grep mysql</code><ul><li>（启动显示cp 0 0 localhost.localdomain:mysql <em>:</em> LISTEN - ）</li></ul></li><li>启动服务 ： <code>sudo /etc/init.d/mysql restart</code></li><li>查看编码 ： <code>status</code> 或者 <code>show variables like &#39;character_set_%</code></li></ul><p>_配置_</p><ul><li>打开配置文件： <code>sudo gedit /etc/mysql/mysql.conf.d/mysqld.cnf</code><ul><li><code>[mysqld]</code>下添加一行： <code>character-set-server=utf8</code></li><li><code>[client]</code>下添加 <code>default-character-set = utf8</code></li><li>如果要允许远程访问，就注释掉 <code>bind-address</code></li><li>如果是服务器要配置远程访问 就 bind-address=服务器IP</li><li>确保skip-networking被删除或者屏蔽，否则不支持TCP/IP 访问</li></ul></li></ul><p>_重启_</p><ul><li>重启MySQL ：<code>sudo systemctl restart mysql</code></li></ul><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><blockquote><p><a href="/Linux/Container/Container/DockerSoft.md#mysql">Docker安装MySQL</a> | <a href="http://www.infoq.com/cn/articles/can-mysql-run-in-docker?utm_campaign=rightbar_v2&amp;utm_source=infoq&amp;utm_medium=articles_link&amp;utm_content=link_text" target="_blank" rel="noopener">博客：Mysql有没有必要Docker化</a></p></blockquote><h3 id="图形化客户端"><a href="#图形化客户端" class="headerlink" title="图形化客户端"></a>图形化客户端</h3><blockquote><p>windows上就直接 MySQL-Font HeidiSQL Linux就终端了..虽然wine也能装这俩 | <a href="http://www.linuxidc.com/Linux/2015-01/111421.htm" target="_blank" rel="noopener">10个Mysql图形客户端</a></p></blockquote><hr><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><blockquote><p><a href="http://www.cnblogs.com/bukudekong/archive/2011/06/27/2091590.html" target="_blank" rel="noopener">MySQL 数据类型</a></p></blockquote><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><h3 id="short"><a href="#short" class="headerlink" title="short"></a>short</h3><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><h3 id="decimal"><a href="#decimal" class="headerlink" title="decimal"></a>decimal</h3><ul><li>The declaration syntax for a DECIMAL column is DECIMAL(M,D). The ranges of values for the arguments are as follows:<ul><li>M is the maximum number of digits (the precision). It has a range of 1 to 65.</li><li>D is the number of digits to the right of the decimal point (the scale). It has a range of 0 to 30 and must be no larger than M. </li></ul></li><li>在MySQL 3.23 及以后的版本中，DECIMAL(M, D) 的取值范围等于早期版本中的DECIMAL(M + 2, D) 的取值范围。</li></ul><ol><li>当插入的整数部分的值超过了其表示范围后就直接忽略了小数部分的值，并以最大值填充。 </li><li>当整数部分合法，小数部分多余的位数，直接截断。</li></ol><h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><h3 id="varchar"><a href="#varchar" class="headerlink" title="varchar"></a>varchar</h3><h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><ul><li style="list-style: none"><input type="checkbox"> 后期完善</li></ul><h2 id="LongBlob"><a href="#LongBlob" class="headerlink" title="LongBlob"></a>LongBlob</h2><ul><li>这种数据类型可以直接把图像文件存到数据库中！<br>创建UTF8编码数据库 <code>CREATE DATABASE</code>test2<code>DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci</code></li></ul><hr><h1 id="基本组成"><a href="#基本组成" class="headerlink" title="基本组成"></a>基本组成</h1><h2 id="数据编码"><a href="#数据编码" class="headerlink" title="数据编码"></a>数据编码</h2><p>utf8 最大字节为3的非标准utf8实现<br>utf8mb4 才是真正意义上的 utf8 <code>5.5.3才开始支持</code></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><blockquote><p>create database name;</p></blockquote><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><blockquote><p>以下的 -p -h 参数依数据库的配置情况而定</p></blockquote><ol><li>只导出数据库的结构 <code>mysqldump -uroot -pmysql -d dbname &gt; /data/backup/sql/dbname.sql</code>  <ul><li>导出具体的表就在数据库名后加上 表名</li></ul></li><li>导出结构和数据就去掉-d参数, 导出具体的表同理</li><li>导入其实就是执行SQL文件 <code>source /path/to/dbname.sql</code></li></ol><blockquote><p><a href="https://blog.csdn.net/EASYgoing00/article/details/72885280" target="_blank" rel="noopener">java操作：mysql数据库导入、导出</a>  主要的思想是Java调用系统命令行执行命令后得到导出文件， 然后读取导出的文件 进一步操作</p></blockquote><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul><li style="list-style: none"><input type="checkbox"> TODO 修改数据库</li></ul><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><ul><li><code>create table name (field int, field varchar(32)....);</code></li><li>查看表的创建语句 <code>show create table name;</code></li></ul><h3 id="修改表定义"><a href="#修改表定义" class="headerlink" title="修改表定义"></a>修改表定义</h3><ul><li style="list-style: none"><input type="checkbox"> TODO 修改表格</li></ul><p><em>重命名表格</em> <code>RENAME TABLE old TO new</code></p><h4 id="增删字段"><a href="#增删字段" class="headerlink" title="增删字段"></a>增删字段</h4><ul><li>增加字段 <code>alter table name add field1 int, field2 varchar(20);</code></li><li>删除字段 <code>alter table name drop column field1, drop column field2;</code></li></ul><hr><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><blockquote><p>保障数据安全性，提高查询效率</p></blockquote><blockquote><p><a href="http://www.jb51.net/article/36363.htm" target="_blank" rel="noopener">参考博客: </a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ALGORITHM]=&#123;UNDEFINED|<span class="keyword">MERGE</span>|TEMPTABLE&#125;]</span><br><span class="line">    <span class="keyword">VIEW</span> 视图名 [(属性清单)]</span><br><span class="line">    <span class="keyword">AS</span> <span class="keyword">SELECT</span> 语句</span><br><span class="line">    [<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span>|<span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>];</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>ALGORITHM表示视图选择的算法（可选参数）<ul><li>UNDEFINED：MySQL将自动选择所要使用的算法</li><li>MERGE：将视图的语句与视图定义合并起来，使得视图定义的某一部分取代语句的对应部分</li><li>TEMPTABLE：将视图的结果存入临时表，然后使用临时表执行语句</li></ul></li><li>视图名表示要创建的视图的名称</li><li>属性清单表示视图中的列名，默认与SELECT查询结果中的列名相同（可选参数）</li><li>WITH CHECK OPTION表示更新视图时要保证在该试图的权限范围之内（可选参数）<ul><li>CASCADED：更新视图时要满足所有相关视图和表的条件</li><li>LOCAL：更新视图时，要满足该视图本身定义的条件即可<blockquote><p>tips：创建试图时最好加上WITH CASCADED CHECK OPTION参数，这种方式比较严格,可以保证数据的安全性</p></blockquote></li></ul></li></ul><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><h3 id="【创建单语句的触发器】"><a href="#【创建单语句的触发器】" class="headerlink" title="【创建单语句的触发器】"></a>【创建单语句的触发器】</h3><ul><li><code>CREATE TRIGGER ins_sum BEFORE INSERT ON account FOR EACH ROW SET @sum = @sum + NEW.amount;</code></li><li><code>CREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt</code></li></ul><h3 id="【创建多语句的触发器】"><a href="#【创建多语句的触发器】" class="headerlink" title="【创建多语句的触发器】"></a>【创建多语句的触发器】</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name trigger_time trigger_event</span><br><span class="line">    <span class="keyword">ON</span> tbl_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    .......</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="【NEW-和-OLD关键字】"><a href="#【NEW-和-OLD关键字】" class="headerlink" title="【NEW 和 OLD关键字】"></a>【NEW 和 OLD关键字】</h3><ul><li>使用OLD和NEW关键字，能够访问受触发程序影响的行中的列（OLD和NEW不区分大小写）。在INSERT触发程序中，仅能使用NEW.col_name，没有旧行。</li><li>在DELETE触发程序中，仅能使用OLD.col_name，没有新行。在UPDATE触发程序中，可以使用OLD.col_name来引用更新前的某一行的列，也能使用NEW.col_name来引用更新后的行中的列。</li><li>用OLD命名的列是只读的。你可以引用它，但不能更改它。对于用NEW命名的列，如果具有SELECT权限，可引用它。</li><li>在BEFORE触发程序中，如果你具有UPDATE权限，可使用“SET NEW.col_name = value”更改它的值。这意味着，</li><li>你可以使用触发程序来更改将要插入到新行中的值，或用于更新行的值。</li><li>在BEFORE触发程序中，AUTO_INCREMENT列的NEW值为0，不是实际插入新记录时将自动生成的序列号。</li></ul><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h3 id="基本结构示例："><a href="#基本结构示例：" class="headerlink" title="基本结构示例："></a>基本结构示例：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">-- 【loop】 要有iterate 和leave才是完整的</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> doiterate(p1 <span class="built_in">INT</span>)</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    label1: <span class="keyword">LOOP</span></span><br><span class="line">      <span class="keyword">SET</span> p1 = p1 + <span class="number">1</span>;</span><br><span class="line">      IF p1 &lt; 10 THEN ITERATE label1; END IF;</span><br><span class="line">      LEAVE label1;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">LOOP</span> label1;</span><br><span class="line">    <span class="keyword">SET</span> @x = p1;</span><br><span class="line">  <span class="keyword">END</span></span><br><span class="line">  <span class="keyword">call</span> doiterate(<span class="number">7</span>);</span><br><span class="line">  <span class="keyword">select</span> @x;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="【简单示例】"><a href="#【简单示例】" class="headerlink" title="【简单示例】"></a>【简单示例】</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---函数部分,修改定界符 </span></span><br><span class="line">delimiter //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> hello (s <span class="built_in">CHAR</span>(<span class="number">20</span>)) <span class="keyword">RETURNS</span> <span class="built_in">CHAR</span>(<span class="number">50</span>)</span><br><span class="line"><span class="keyword">RETURN</span> <span class="keyword">CONCAT</span>(<span class="string">'Hello, '</span>,s,<span class="string">'!'</span>);</span><br><span class="line">//</span><br><span class="line"><span class="comment">--将定界符改回来，是第二句SQL语句</span></span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">select</span> hello(<span class="string">'Myth '</span>);</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> hello;</span><br><span class="line"><span class="comment">-- 函数</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> fun_test(var1 <span class="built_in">int</span>,var2 <span class="built_in">varchar</span>(<span class="number">16</span>)) <span class="keyword">returns</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">    <span class="keyword">declare</span> temp <span class="built_in">int</span>;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> temp <span class="keyword">from</span> <span class="keyword">test</span>;</span><br><span class="line">    return temp;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">select</span> fun_test(<span class="number">8</span>,<span class="string">'d'</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="1-mysql常用命令集合"><a href="#1-mysql常用命令集合" class="headerlink" title="1.mysql常用命令集合"></a>1.mysql常用命令集合</h1><h2 id="查看数据库参数"><a href="#查看数据库参数" class="headerlink" title="查看数据库参数"></a>查看数据库参数</h2><h3 id="查看连接状况"><a href="#查看连接状况" class="headerlink" title="查看连接状况"></a>查看连接状况</h3><blockquote><p><a href="https://blog.csdn.net/caodongfang126/article/details/52764213" target="_blank" rel="noopener">查看mysql数据库连接数、并发数相关信息。</a><code>show status like &#39;Threads%&#39;;</code></p></blockquote><h2 id="1-1【自增长】"><a href="#1-1【自增长】" class="headerlink" title="1.1【自增长】"></a>1.1【自增长】</h2><ul><li>【创建表时设置自增长，并设置起始值】<ul><li>create table cc( id int auto_increment,name varchar(20),primary key(id) ) auto_increment=1000;</li></ul></li><li>【设置已有字段自增长】 <ul><li>alter table test MODIFY id INT UNSIGNED AUTO_INCREMENT;</li></ul></li><li>【自增长的修改】 <ul><li>alter table test auto_increment=10； 注意只能改的比当前的值大，不可以改的比当前小</li></ul></li><li>【自增长字段溢出】<ul><li>设置自动增长的列，只能是int类型（包含了各种int），当出现了溢出就可以改成bigint 但是如果有外键约束，可能就会更改失败，还不如删库重建，实在太大了就删约束再建约束</li></ul></li></ul><h2 id="1-2【主键约束的修改】"><a href="#1-2【主键约束的修改】" class="headerlink" title="1.2【主键约束的修改】"></a>1.2【主键约束的修改】</h2><p>alter table 表名  add constraint (PK_表名) primary key (j,k,l); 关于一些约束条件constraint好像没有起到作用比如 check</p><h2 id="1-3【修改表名】"><a href="#1-3【修改表名】" class="headerlink" title="1.3【修改表名】"></a>1.3【修改表名】</h2><p>rename table table1 to table2;     切记不可随便修改表名，改了就要修改相应的 外键，触发器，函数，存储过程！！！</p><h2 id="1-4【定界符】"><a href="#1-4【定界符】" class="headerlink" title="1.4【定界符】"></a>1.4【定界符】</h2><p>delimiter 任意字符除了转义字符：\</p><h2 id="1-5【已有表数据，新建表】"><a href="#1-5【已有表数据，新建表】" class="headerlink" title="1.5【已有表数据，新建表】"></a>1.5【已有表数据，新建表】</h2><p>create table temp as select * from test;</p><h2 id="1-6【查看所有连接状态】"><a href="#1-6【查看所有连接状态】" class="headerlink" title="1.6【查看所有连接状态】"></a>1.6【查看所有连接状态】</h2><p>show processlist  如果是普通用户，只能查看自己当前的连接状态</p><h2 id="1-7【查看表的状态】"><a href="#1-7【查看表的状态】" class="headerlink" title="1.7【查看表的状态】"></a>1.7【查看表的状态】</h2><p>show table status like ‘assitant’ 可以看到当前自动增长的id当前值 dev.mysql.com/downloads/mysql/#downloads</p><hr><h2 id="1-8【关于时间-】"><a href="#1-8【关于时间-】" class="headerlink" title="1.8【关于时间 】"></a>1.8【关于时间 】</h2><h3 id="1-8-1【常用函数】"><a href="#1-8-1【常用函数】" class="headerlink" title="1.8.1【常用函数】"></a>1.8.1【常用函数】</h3><ul><li><strong>NOW()</strong>函数以 ‘YYYY-MM-DD HH:MM:SS’ 返回当前的日期时间，可以直接存到<strong>DATETIME</strong>字段中。</li><li><strong>CURDATE()</strong>以’YYYY-MM-DD’的格式返回今天的日期，可以直接存到<strong>DATE</strong>字段中。</li><li><strong>CURTIME()</strong>以’HH:MM:SS’的格式返回当前的时间，可以直接存到<strong>TIME</strong>字段中。<ul><li>例：insert into tablename (fieldname) values (now())</li><li>insert into data values (‘Myth’,’4’,’2016-03-10’,curtime());//年月日，时间</li><li>select datediff(curdate(), date_sub(curdate(), interval i month)); </li></ul></li><li>一般函数是不能作为 default默认值的，使用只能在插入修改数据时使用</li></ul><h3 id="1-8-2【获取当前时间与i个月之间的天数】"><a href="#1-8-2【获取当前时间与i个月之间的天数】" class="headerlink" title="1.8.2【获取当前时间与i个月之间的天数】"></a>1.8.2【获取当前时间与i个月之间的天数】</h3><ul><li>问题：假设当前是5月19 且（提前月份）i=1 就是计算从4月19到今天的天数<ul><li>解答：</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 时间格式的简单操作：</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">DATE_FORMAT</span>(produceDate, <span class="string">'%Y'</span>) <span class="keyword">as</span> yeahr <span class="keyword">from</span> historybarcodesort</span><br><span class="line">   <span class="keyword">where</span> <span class="keyword">DATE_FORMAT</span>(produceDate, <span class="string">'%Y'</span>)=<span class="string">'2013'</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_format</span>(<span class="string">'1997-10-04 22:23:00'</span>,<span class="string">'%y %M %b %D %W %a %Y-%m-%d %H:%i:%s %r %T'</span>);</span><br><span class="line">    显示结果：97 October Oct 4th Saturday Sat 1997-10-04 22:23:00 10:23:00 PM 22:23:00</span><br><span class="line"><span class="comment">-- 查询指定时间：</span></span><br><span class="line">get_date = "2006-12-07"</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">FROM</span> t_get_video_temp <span class="keyword">Where</span> <span class="keyword">DATE_FORMAT</span>(get_date, <span class="string">'%Y-%d'</span>)=<span class="string">'2006-07'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">FROM</span> t_get_video_temp <span class="keyword">Where</span> get_date <span class="keyword">like</span> <span class="string">'2006%-07%'</span>;</span><br></pre></td></tr></table></figure><h3 id="1-8-3-datetime和timestamp区别"><a href="#1-8-3-datetime和timestamp区别" class="headerlink" title="1.8.3 datetime和timestamp区别"></a>1.8.3 datetime和timestamp区别</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 问题：为什么 5.5的环境下运行两句命令得到不同的结果（5.6不会有错误）</span></span><br><span class="line"><span class="comment">-- 没错误</span></span><br><span class="line">creata table test1(one_time timestamp not null default current_timestamp,two_time timestamp);</span><br><span class="line"><span class="comment">-- 报错：Incorrect table definition; there can be only one TIMESTAMP column with CURRENT_TIMESTAMP in DEFAULT or ON UPDATE clause</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test2(one_time <span class="built_in">timestamp</span>,two_time <span class="built_in">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span>);</span><br><span class="line">或者 将timestamp 改成datetime 也不会有错，那么问题来了 区别是什么？</span><br><span class="line"><span class="comment">-- 上面报错原因不明，大意是只能有一个timestamp的列有默认值</span></span><br></pre></td></tr></table></figure><p><strong>DATETIME、DATE 和 TIMESTAMP 区别：</strong></p><ul><li><strong>DATETIME</strong> 类型可用于需要同时包含日期和时间信息的值。MySQL以’YYYY-MM-DD HH:MM:SS’ 格式检索与显示DATETIME类型。<ul><li>支持的范围是 ‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’。</li><li>(“支持”的含义是，尽管更早的值可能工作，但不能保证他们均可以。)</li></ul></li><li><strong>DATE</strong> 类型可用于需要一个日期值而不需要时间部分时。MySQL 以 ‘YYYY-MM-DD’ 格式检索与显示 DATE 值。<ul><li>支持的范围是 ‘1000-01-01’ 到 ‘9999-12-31’。</li></ul></li><li><strong>TIMESTAMP</strong> 列类型提供了一种类型，通过它你可以以当前操作的日期和时间自动地标记 Insert 或Update 操作。<ul><li>如果一张表中有多个 TIMESTAMP 列，只有第一个被自动更新。</li></ul></li></ul><blockquote><p>“完整”TIMESTAMP格式是14位，但TIMESTAMP列也可以用更短的显示尺寸创造<br>最常见的显示尺寸是6、8、12、和14。<br>你可以在创建表时指定一个任意的显示尺寸，但是定义列长为0或比14大均会被强制定义为列长14<br>列长在从1～13范围的奇数值尺寸均被强制为下一个更大的偶数。</p></blockquote><blockquote><p>列如：<br>定义字段长度 强制字段长度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TIMESTAMP(0) -&gt; TIMESTAMP(14)</span><br><span class="line">TIMESTAMP(15)-&gt; TIMESTAMP(14)</span><br><span class="line">TIMESTAMP(1) -&gt; TIMESTAMP(2)</span><br><span class="line">TIMESTAMP(5) -&gt; TIMESTAMP(6)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>所有的TIMESTAMP列都有同样的存储大小，<br>使用被指定的时期时间值的完整精度（14位）存储合法的值不考虑显示尺寸。<br>不合法的日期，将会被强制为0存储</p></blockquote><p> <strong>自动更新第一个 TIMESTAMP 列在下列任何条件下发生：</strong></p><ul><li>列值没有明确地在一个 Insert 或 LOAD DATA INFILE 语句中被指定。</li><li>列值没有明确地在一个 Update 语句中被指定，并且其它的一些列值已发生改变。(注意，当一个 Update 设置一个列值为它原有值时，这将不会引起 TIMESTAMP 列的更新，因为，如果你设置一个列值为它当前值时，MySQL 为了效率为忽略更新。)</li><li>明确地以 NULL 设置 TIMESTAMP 列。</li><li>第一个列以外其它 TIMESTAMP 列，可以设置到当前的日期和时间，只要将该列赋值 NULL 或 NOW()。</li><li>任何 TIMESTAMP 列均可以被设置一个不同于当前操作日期与时间的值，这通过为该列明确指定一个你所期望的值来实现。这也适用于第一个 TIMESTAMP 列。这个选择性是很有用的，举例来说，当你希望 TIMESTAMP 列保存该记录行被新添加时的当前的日期和时间，但该值不再发生改变，无论以后是否对该记录行进行过更新：</li><li>当该记录行被建立时，让 MySQL 设置该列值。这将初始化该列为当前日期和时间。</li><li>以后当你对该记录行的其它列执行更新时，为 TIMESTAMP 列值明确地指定为它原来的值。</li><li>另一方面，你可能发现更容易的方法，使用 DATETIME 列，当新建记录行时以 NOW() 初始化该列，以后在对该记录行进行更新时不再处理它。</li></ul><h2 id="1-9-【插入外码】"><a href="#1-9-【插入外码】" class="headerlink" title="1.9 【插入外码】"></a>1.9 【插入外码】</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="string">`Bookinfo`</span> <span class="keyword">add</span> <span class="keyword">constraint</span> <span class="string">`F_N`</span> <span class="keyword">foreign</span> <span class="keyword">key</span> <span class="string">`F_N`</span>(<span class="string">`classno`</span>) <span class="keyword">references</span> <span class="string">`Bookclass`</span>(<span class="string">`classno`</span>) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>;</span><br></pre></td></tr></table></figure><hr><h1 id="2-【变量】"><a href="#2-【变量】" class="headerlink" title="2.【变量】"></a>2.【变量】</h1><ul><li>加了@ 的是用户变量， 限定当前用户，当前客户端， 在declare中声明的参数可以不加 @，那就是是局部变量</li><li>例如：declare a int ;  也可以直接就用不用声明，作为临时变量 例如这两种写法：<ul><li>set @name =   expr;<ul><li>select @name:= expr;</li></ul></li></ul></li><li>注意：MySQL中只有基本数据类型，没有Oracle中那个绑定类型：表类型或行类型，所以处理起来有点。。不如Oracle方便，不管是触发器还是存储过程</li><li>set @a= select * from User；执行这句话就会报出 operand should contain 1 column(s)错误，就是说多值赋值的错误</li></ul><h1 id="3-【基本流程语法】"><a href="#3-【基本流程语法】" class="headerlink" title="3.【基本流程语法】"></a>3.【基本流程语法】</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ... then </span><br><span class="line">elseif ... then (注意elseif中间没有空格)</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br></pre></td></tr></table></figure><h1 id="7-【异常】"><a href="#7-【异常】" class="headerlink" title="7.【异常】"></a>7.【异常】</h1><h1 id="8-【用户管理】"><a href="#8-【用户管理】" class="headerlink" title="8.【用户管理】"></a>8.【用户管理】</h1><blockquote><p><a href="http://www.cnblogs.com/fslnet/p/3143344.html" target="_blank" rel="noopener">参考博客</a></p></blockquote><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><ul><li>查询用户信息 <code>select host,user,password from user ;</code></li><li>查看权限 <code>show grants for zx_root;</code></li></ul><h2 id="创建-2"><a href="#创建-2" class="headerlink" title="创建"></a>创建</h2><blockquote><p>创建本地超级用户： CREATE USER ‘myth‘@’localhost’ IDENTIFIED BY ‘ad’;<br>授予所有权限 GRANT all privileges  ON <em>.</em> TO ‘myth‘@’localhost’;<br>创建远程访问指定数据库用户 ： CREATE USER ‘myth‘@’%’ IDENTIFIED BY ‘ad’;<br>授予数据库db的所有权限 GRANT all privileges  ON db.* TO ‘myth‘@’%’;</p></blockquote><ul><li>创建用户 <code>CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;;</code></li><li>设置密码 <code>SET PASSWORD FOR &#39;username&#39;@&#39;%&#39; = PASSWORD(&quot;123456&quot;);</code><ul><li>修改密码也是这个语句注意的是要  <code>flush privileges;</code></li></ul></li><li>删除用户 <code>drop user &#39;username&#39;@&#39;host&#39;</code><ul><li>如果服务器需要远程访问 修改配置文件<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>，注释掉 bind_address 一行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%            匹配所有主机</span><br><span class="line">localhost    localhost不会被解析成IP地址，直接通过UNIXsocket连接</span><br><span class="line">127.0.0.1    会通过TCP/IP协议连接，并且只能在本机访问；</span><br><span class="line">::1          ::1就是兼容支持ipv6的，表示同ipv4的127.0.0.1</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h2><ul><li>修改名字：<code>rename user feng to newuser；</code></li></ul><h3 id="【授权】"><a href="#【授权】" class="headerlink" title="【授权】"></a>【授权】</h3><ol><li>grant all privileges  ON databasename.tablename TO ‘username‘@’host’ <ul><li>all privileges 所有权限</li><li>alter | alter routine</li><li>create | create routine | create temporary table | create user | create view</li><li>delete | drop</li><li>execute | file</li><li>index | insert</li><li>lock table | process | reload</li><li>replication | client | replication slave</li><li>select | show databases | show view</li><li>shutdown | super</li><li>update | usage</li></ul></li><li>回收权限 revoke, 用法和 grant 一样</li></ol><ul><li>刷新权限缓存 <code>flush privileges;</code></li></ul><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><blockquote><p>数据库中最主要的还是查询， 多角度复杂的查询</p></blockquote><p><em>全自段模糊查询</em></p><ol><li><code>select * from target where concat(ifnull(host, &#39;&#39;), ifnull(username, &#39;&#39;)) like &#39;%localhost%&#39; &gt; 0 limit 0,1;</code><ul><li>将全字段(空的替换为空串)连接成一个字符再模糊查询, </li></ul></li><li><code>select * from target where host like &#39;%localhost%&#39; or username like &#39;%localhost%&#39; limit 0,1;</code><ul><li>这种查询虽然也能实现, 但是性能差一些</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#mysql&quot;&gt;Mysql&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#安装&quot;&gt;安装&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#ubuntu安装配置mysql&quot;&gt;Ubuntu安
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Server.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Blog-Server/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Blog-Server/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#server">Server</a><ol><li><a href="#终端">终端</a></li><li><a href="#内存优化">内存优化</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h1><blockquote><p>服务器运维相关</p></blockquote><h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzIwNjEwNTQ4Mw==&amp;mid=2651580395&amp;idx=1&amp;sn=d311abab344aed97fe8b5244aa51e08d&amp;chksm=8cd9f90fbbae7019fc5ee8fbe423c8027527f068bcb71ad3d7a18b85a503bc4ffd377dfb9b6d&amp;mpshare=1&amp;scene=1&amp;srcid=0110cegY48pxj9fMGcObeEMT&amp;pass_ticket=9AXPGsZExYCvgc64Pq%2Fge7rdAI7U%2F%2BG%2F5NrA4rv24OXW2BDRnIZzo5eMh%2F%2FanrNZ#rd" target="_blank" rel="noopener">效率为王：终端管理工具 Tmux </a></li></ul><h2 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h2><blockquote><p><a href="http://www.cnblogs.com/dongzhiquan/p/5043912.html" target="_blank" rel="noopener">参考博客 大内存页配置实战</a> <code>内存占用大, 访问随机就需要使用大内存页了</code><br><a href="http://www.oracle.com/technetwork/cn/articles/servers-storage-dev/hugepages-2099009-zhs.html" target="_blank" rel="noopener">Oracle官网的使用案例</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#server&quot;&gt;Server&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#终端&quot;&gt;终端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#内存优化&quot;&gt;内存优化&lt;/a&gt;&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Solution.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Blog-Solution/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Blog-Solution/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#解决方案">解决方案</a></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><blockquote><p>关于问题的解决方案</p></blockquote><p><a href="http://www.cnblogs.com/x-xk/archive/2012/11/17/2770935.html" target="_blank" rel="noopener">站内信设计思路之己见（基于上百万用户）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#解决方案&quot;&gt;解决方案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;目录 end&lt;/strong&gt;|&lt;em&gt;2018-12-13 12:06&lt;/em&gt;| &lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>View.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Blog-View/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Blog-View/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#前端">前端</a><ol><li><a href="#基础">基础</a><ol><li><a href="#规范">规范</a></li></ol></li><li><a href="#css">CSS</a></li><li><a href="#相关库">相关库</a><ol><li><a href="#jquery">Jquery</a></li><li><a href="#bootstrap">Bootstrap</a></li><li><a href="#layui">LayUI</a></li></ol></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><blockquote><p>半学半就 <a href="https://kuangcp.github.io/main.html" target="_blank" rel="noopener">个人导航页</a></p></blockquote><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><blockquote><p><a href="https://www.cnblogs.com/Smiled/p/8377188.html" target="_blank" rel="noopener">我所理解的前端</a><br><a href="http://blog.csdn.net/limlimlim/article/details/9088161" target="_blank" rel="noopener">Javascript字典操作</a><br><a href="https://segmentfault.com/a/1190000002447815" target="_blank" rel="noopener">js数据结构和算法（五）字典和散列（hash） </a></p></blockquote><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><ul><li><a href="https://juejin.im/post/592d4a5b0ce463006b43b6da" target="_blank" rel="noopener">前端开发命名规范</a></li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li><a href="http://www.html5tricks.com/9-nick-css3-menu-button.html" target="_blank" rel="noopener">酷炫按钮</a></li></ul><h2 id="相关库"><a href="#相关库" class="headerlink" title="相关库"></a>相关库</h2><h3 id="Jquery"><a href="#Jquery" class="headerlink" title="Jquery"></a>Jquery</h3><ul><li><a href="http://www.codeceo.com/article/10-jquery-image-player.html#0-tsina-1-78156-397232819ff9a47a7b7e80a40613cfe1" target="_blank" rel="noopener">10个超赞的jQuery图片滑块动画</a></li></ul><h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><h3 id="LayUI"><a href="#LayUI" class="headerlink" title="LayUI"></a>LayUI</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#前端&quot;&gt;前端&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#基础&quot;&gt;基础&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#规范&quot;&gt;规范&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Experience.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Database-Experience/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Database-Experience/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#数据库的使用体会">数据库的使用体会</a><ol><li><a href="#关系型数据库">关系型数据库</a><ol><li><a href="#sqlserver">SQLServer</a></li><li><a href="#mysql">Mysql</a></li><li><a href="#oracle">Oracle</a></li><li><a href="#postgresql">Postgresql</a></li></ol></li><li><a href="#非关系型数据库">非关系型数据库</a><ol><li><a href="#redis">Redis</a></li><li><a href="#mangodb">MangoDB</a></li></ol></li><li><a href="#两者的对比">两者的对比</a></li></ol></li><li><a href="#关系型数据库设计">关系型数据库设计</a><ol><li><a href="#结构设计">结构设计</a><ol><li><a href="#基本表的设计">基本表的设计</a><ol><li><a href="#关于主键的设计">关于主键的设计</a></li></ol></li><li><a href="#视图的设计">视图的设计</a></li></ol></li><li><a href="#数据库中间件">数据库中间件</a></li></ol></li><li><a href="#非关系型数据库设计">非关系型数据库设计</a></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="数据库的使用体会"><a href="#数据库的使用体会" class="headerlink" title="数据库的使用体会"></a>数据库的使用体会</h1><blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665514001&amp;idx=1&amp;sn=17b72c3e69db6c4277e3045c699b7b6b&amp;chksm=80d67c52b7a1f5446020826841869221873f4578524181384592839d19c4810dc68807117e13&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">码农翻身:爱炫耀的数据库老头儿</a> <code>事务,undo日志</code></p></blockquote><blockquote><p><a href="https://db-engines.com/en/ranking" target="_blank" rel="noopener">DB-Engines Ranking</a> <code>数据库评分排行</code></p></blockquote><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><blockquote><p><a href="http://www.jdon.com/concurrent/acid-database.html" target="_blank" rel="noopener">参考博客: 什么是数据库ACID?</a></p></blockquote><h3 id="SQLServer"><a href="#SQLServer" class="headerlink" title="SQLServer"></a>SQLServer</h3><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><blockquote><p>结合docker配置很快，就是默认编码为什么不直接设置utf8，每次要改</p></blockquote><h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3><blockquote><p>十分的庞大, 学习了他理念的设计, 感受良多</p></blockquote><h3 id="Postgresql"><a href="#Postgresql" class="headerlink" title="Postgresql"></a>Postgresql</h3><blockquote><p>听说性能强劲, 但是自己没有测试实践过, 命令行倒是很简洁, 就是数据库的逻辑理念和MySQL不一样, 迁移过去要稍微看下基础<br>实际使用上, 如果使用Docker开一个容器运行, 所消耗的资源比MySQL少多了, MySQL大概 300M PostgreSQL只要几十M</p></blockquote><h2 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h2><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><blockquote><p>数据类型丰富,处理非关系型并且结构化的数据十分方便, 结合Python使用就行云流水一般了</p></blockquote><h3 id="MangoDB"><a href="#MangoDB" class="headerlink" title="MangoDB"></a>MangoDB</h3><blockquote><p>正准备学习的文档性数据库, 混合类型: 关系型非关系型</p></blockquote><h2 id="两者的对比"><a href="#两者的对比" class="headerlink" title="两者的对比"></a>两者的对比</h2><blockquote><p><a href="http://www.infoq.com/cn/news/2017/10/SQL-NoSQL-mean-what?utm_source=news_about_rdbms&amp;utm_medium=link&amp;utm_campaign=rdbms" target="_blank" rel="noopener">为什么说SQL正在击败NoSQL，这对数据的未来意味着什么？</a></p></blockquote><hr><h1 id="关系型数据库设计"><a href="#关系型数据库设计" class="headerlink" title="关系型数据库设计"></a>关系型数据库设计</h1><h2 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h2><h3 id="基本表的设计"><a href="#基本表的设计" class="headerlink" title="基本表的设计"></a>基本表的设计</h3><h4 id="关于主键的设计"><a href="#关于主键的设计" class="headerlink" title="关于主键的设计"></a>关于主键的设计</h4><blockquote><p>我哥提出, 基本表中连主键的约束都不要了, 全部由后台的代码进行约束处理</p></blockquote><ul><li>如果使用的需要高并发，数据库经常迁移，拆分，分布式，使用UUID,GUID最佳</li><li>如果是小型项目，使用整型自增即可，排序方便节约内存</li></ul><h3 id="视图的设计"><a href="#视图的设计" class="headerlink" title="视图的设计"></a>视图的设计</h3><h2 id="数据库中间件"><a href="#数据库中间件" class="headerlink" title="数据库中间件"></a>数据库中间件</h2><blockquote><p><a href="https://www.csdn.net/article/2015-07-16/2825228" target="_blank" rel="noopener">MyCat：开源分布式数据库中间件</a></p></blockquote><h1 id="非关系型数据库设计"><a href="#非关系型数据库设计" class="headerlink" title="非关系型数据库设计"></a>非关系型数据库设计</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#数据库的使用体会&quot;&gt;数据库的使用体会&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#关系型数据库&quot;&gt;关系型数据库&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#sqlserver&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GraphQL.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Database-GraphQL/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Database-GraphQL/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#graphql">GraphQL</a></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h1><blockquote><p><a href="https://graphql.org" target="_blank" rel="noopener">Official Site</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#graphql&quot;&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;目录 end&lt;/strong&gt;|&lt;em&gt;2018-12-13 12:06&lt;/em&gt;| &lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MangoDB.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Database-MangoDB/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Database-MangoDB/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#mangodb">MangoDB</a></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="MangoDB"><a href="#MangoDB" class="headerlink" title="MangoDB"></a>MangoDB</h1><blockquote><p>非关系型和关系型混合文档型数据库</p></blockquote><blockquote><p><a href="https://segmentfault.com/a/1190000013589617" target="_blank" rel="noopener">双刃剑MongoDB的学习和避坑</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#mangodb&quot;&gt;MangoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;目录 end&lt;/strong&gt;|&lt;em&gt;2018-12-13 12:06&lt;/em&gt;| &lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQLAdvance.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Database-MySQLAdvance/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Database-MySQLAdvance/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#mysql-advanced">MySQL Advanced</a><ol><li><a href="#部署">部署</a></li><li><a href="#性能调优">性能调优</a></li><li><a href="#sql-片段">SQL 片段</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="MySQL-Advanced"><a href="#MySQL-Advanced" class="headerlink" title="MySQL Advanced"></a>MySQL Advanced</h1><ul><li><a href="http://www.cnblogs.com/zhxilin/archive/2016/09/30/5923671.html" target="_blank" rel="noopener">Mysql Redis UDF 复制</a></li></ul><blockquote><p><a href="http://www.cnblogs.com/wangkangluo1/archive/2012/04/27/2472898.html" target="_blank" rel="noopener">参考博客: shell 下执行mysql 命令</a></p><ul><li>将需要执行的SQL写入文件 并将结果输出到文件 <code>mysql -u root -h 192.168.10.201 -p123 &lt; query.sql  &gt; result.log</code></li></ul></blockquote><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><blockquote><p>第一次看到MySQL内存上3G, 资源占用这么大, 还导致了内存不够, 直接MySQL自己退出了</p></blockquote><h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><ul><li>分析SQL运行效率: <code>explain</code> + SQL</li><li>查看所有连接 <code>show processlist;</code></li></ul><blockquote><p><a href="http://www.piaoyi.org/database/MySQL-INNODB-SELECT-COUNT.html" target="_blank" rel="noopener">MySQL下INNODB引擎的SELECT COUNT(*)性能优化及思考</a></p></blockquote><h2 id="SQL-片段"><a href="#SQL-片段" class="headerlink" title="SQL 片段"></a>SQL 片段</h2><ol><li>拼接删除库下所有表的SQL <code>select concat(&#39;drop table &#39;,table_name,&#39;;&#39;) from information_schema.TABLES where table_schema=&#39;DATABASE_NAME&#39;;</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#mysql-advanced&quot;&gt;MySQL Advanced&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#部署&quot;&gt;部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#性能调优&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Oracle.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Database-Oracle/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Database-Oracle/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#oracle">Oracle</a><ol><li><a href="#安装">安装</a><ol><li><a href="#linux">Linux</a><ol><li><a href="#docker安装">Docker安装</a></li></ol></li><li><a href="#windows">Windows</a></li></ol></li><li><a href="#使用">使用</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h1><blockquote><p>强大的数据库, 稍微理解一下他的设计都觉得精妙</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h4><blockquote><p><a href="/Linux/Container/DockerSoft.md#安装oracle">详情&gt;&gt;</a></p></blockquote><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#oracle&quot;&gt;Oracle&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#安装&quot;&gt;安装&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#linux&quot;&gt;Linux&lt;/a&gt;&lt;ol&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Blog-Java/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Blog-Java/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#java">Java</a><ol><li><a href="#社区">社区</a></li><li><a href="#se">SE</a></li><li><a href="#javafx">JavaFx</a></li><li><a href="#爬虫">爬虫</a></li><li><a href="#springboot">Springboot</a></li><li><a href="#buildtool">BuildTool</a></li><li><a href="#test">Test</a></li><li><a href="#精彩系列">精彩系列</a><ol><li><a href="#码农翻身">码农翻身</a></li><li><a href="#架构师">架构师</a></li></ol></li><li><a href="#java语言讨论">Java语言讨论</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><blockquote><p>和Java有关的博客和网页  </p></blockquote><h2 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h2><ul><li><a href="http://ifeve.com/category/java/" target="_blank" rel="noopener">并发编程网 Java</a></li><li><a href="http://www.infoq.com/cn/java" target="_blank" rel="noopener">InfoQ Java</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/" target="_blank" rel="noopener">IBM Java</a></li></ul><h2 id="SE"><a href="#SE" class="headerlink" title="SE"></a>SE</h2><ul><li><a href="http://blog.csdn.net/zzp16/article/details/5614588" target="_blank" rel="noopener"> 菜鸟入门：Java程序员学习之路 </a></li><li><a href="http://www.infoq.com/cn/articles/eclipse-collections?utm_campaign=rightbar_v2&amp;utm_source=infoq&amp;utm_medium=articles_link&amp;utm_content=link_text" target="_blank" rel="noopener">Eclipse Collections以及Java8的特性</a></li><li><a href="http://www.jb51.net/article/48304.htm" target="_blank" rel="noopener">Java8的特性</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-jtp06197.html" target="_blank" rel="noopener">正确使用Volatile变量</a></li><li><a href="http://www.cnblogs.com/felix-/p/4310229.html" target="_blank" rel="noopener">javadoc 和 javadoc注释规范</a></li><li><p><a href="http://www.codeceo.com/article/java-resource-collection.html" target="_blank" rel="noopener">推荐！国外程序员整理的Java资源大全</a></p></li><li><p><a href="https://blogs.oracle.com/java/java-magazine-design-pattern" target="_blank" rel="noopener">oracle magazine</a></p></li></ul><hr><ul><li><a href="http://blog.csdn.net/luanlouis/article/details/24589193" target="_blank" rel="noopener">Java动态代理机制详解</a> <code>博客很细致，深入原理</code></li><li><a href="http://blog.csdn.net/chjttony/article/details/17838693" target="_blank" rel="noopener">使用JMockit编写java单元测试</a></li><li><a href="http://www.trinea.cn/android/java-android-thread-pool/" target="_blank" rel="noopener">Java(Android)线程池</a></li><li><a href="http://blog.liuker.cn/index.php/docker/31.html" target="_blank" rel="noopener">Docker图形化管理</a></li></ul><h2 id="JavaFx"><a href="#JavaFx" class="headerlink" title="JavaFx"></a>JavaFx</h2><ul><li><a href="https://gitee.com/xwintop/xJavaFxTool" target="_blank" rel="noopener">xJavaFxTool</a><code>基于JavaFX的工具集</code></li></ul><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><ul><li><a href="https://juejin.im/post/5a804b2cf265da4e9c63265b" target="_blank" rel="noopener">Java网络爬虫实操</a> <code>比较全面的讲述了如何使用Java写爬虫</code></li></ul><hr><h2 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h2><ul><li><a href="http://www.cnblogs.com/page12/p/7899380.html" target="_blank" rel="noopener">Springboot入门系列博客</a></li><li><a href="https://segmentfault.com/a/1190000004315890" target="_blank" rel="noopener">Springboot配置详解</a></li><li><a href="https://coderknock.com/blog/2017/03/01/spring%20boot%E5%90%AF%E5%8A%A8dubbo.html" target="_blank" rel="noopener">Springboot启动dubbo</a><code>等一系列文章</code></li><li><a href="http://blog.csdn.net/melody_susan/article/details/78659696" target="_blank" rel="noopener">spring boot完美集成dwr3.0.2</a></li><li><a href="https://www.tianmaying.com/tutorial/spring-boot-overview" target="_blank" rel="noopener">Spring Boot——开发新一代Spring Java应用</a></li></ul><h2 id="BuildTool"><a href="#BuildTool" class="headerlink" title="BuildTool"></a>BuildTool</h2><ul><li><a href="http://blog.javachen.com/2015/01/07/build-multi-module-project-with-gradle.html" target="_blank" rel="noopener">Gradle构建多模块项目</a></li><li><a href="http://blog.csdn.net/willwcw/article/details/46517331" target="_blank" rel="noopener">tig</a></li><li><a href="http://www.jianshu.com/p/0dac3ae2a2c9" target="_blank" rel="noopener">gradle构建Springboot的镜像</a></li></ul><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-junit-ext/" target="_blank" rel="noopener">扩展 JUnit 测试并行程序</a></li><li><p><a href="https://testerhome.com/topics/2502" target="_blank" rel="noopener">自动化测试工具 JUnit4 多线程执行测试用例</a></p></li><li><p><a href="https://www.zhihu.com/question/40564744" target="_blank" rel="noopener">腾讯的点击验证码是什么原理?</a></p></li></ul><hr><h2 id="精彩系列"><a href="#精彩系列" class="headerlink" title="精彩系列"></a>精彩系列</h2><h3 id="码农翻身"><a href="#码农翻身" class="headerlink" title="码农翻身"></a>码农翻身</h3><ul><li><p><a href="http://chuansong.me/n/1501046251110" target="_blank" rel="noopener">2017精华</a> | <a href="http://blog.csdn.net/fanpeihua123/article/details/58151161" target="_blank" rel="noopener">精华文章</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665514184&amp;idx=1&amp;sn=3ace64c3a9eba2adf1ef94406e2ebf2b&amp;chksm=80d67c8bb7a1f59d556bd7478626a4674ff07021726f84b4681b41ad7c6dbb4cfcf687dcf00a&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">2017码农翻身文章</a></p></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513504&amp;idx=1&amp;sn=25dd6420e3056101dd3f6fdaedacaa2a&amp;chksm=80d67a63b7a1f37572a5159ff6f53810467c15c8beec94770e8360c45f45036360d77755ee78&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">2016码农翻身文章</a></li></ul><hr><ul><li><a href="https://segmentfault.com/q/1010000004701437" target="_blank" rel="noopener">当你想学别的语言的时候看这里</a><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513899&amp;idx=1&amp;sn=3cc7e1721c3533e0f83bea906b8e1be5&amp;chksm=80d67be8b7a1f2fe9da014603f0b94e231773a38151d7160c5d210e17de41f67ffe55e03f422&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">上天还是入地</a><blockquote><p>往深度挖掘，可以成为某个技术领域的专家，如搜索方面的专家、安全方面的专家，分布式文件的专家等等，不管是哪个领域，重点都不是学会使用某个工具和框架， 而是保证你可以自己的知识和技术去搞定这个领域的顶尖问题。<br>往广度发展，各个技术领域都要了解，对于某种需求，能够选取合适的软件和技术架构来实现它，把需求转化成合适的技术组件，让这些组件以合适的方式连接、部署、运行，这也需要持续地学习和不断的经验积累。</p></blockquote></li></ul></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Image/fun/640.webp" alt="前后端" title="">                </div>                <div class="image-caption">前后端</div>            </figure><ul><li><a href="http://blog.csdn.net/tanxinwhu/article/details/6969086" target="_blank" rel="noopener">JDK各个版本发布时间</a></li></ul><h3 id="架构师"><a href="#架构师" class="headerlink" title="架构师"></a>架构师</h3><ul><li><a href="http://www.10tiao.com/html/194/201801/2651479837/1.html" target="_blank" rel="noopener">通向架构师的道路(比较老)</a></li></ul><h2 id="Java语言讨论"><a href="#Java语言讨论" class="headerlink" title="Java语言讨论"></a>Java语言讨论</h2><blockquote><p><a href="http://swiftlet.net/archives/2530" target="_blank" rel="noopener">冷眼看Java</a><br><a href="http://www.techug.com/post/java-python.html" target="_blank" rel="noopener">参考博客: 王垠：为Java说句公道话</a><br><a href="http://www.techug.com/post/comparing-rust-and-java.html" target="_blank" rel="noopener">参考博客: 比较 Rust 和 Java</a><br><a href="http://www.techug.com/post/kotlin-vs-java-the-whole-story.html" target="_blank" rel="noopener">参考博客: Kotlin与Java的主客观比较</a><br><a href="http://www.techug.com/post/10-java-tips.html" target="_blank" rel="noopener">参考博客: 10个实用的但偏执的Java编程技术</a><br><a href="http://www.techug.com/post/programming-philosophy.html" target="_blank" rel="noopener">参考博客: 王垠：编程的智慧</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#java&quot;&gt;Java&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#社区&quot;&gt;社区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#se&quot;&gt;SE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PostgreSQLAdvance.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Database-PostgreSQLAdvance/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Database-PostgreSQLAdvance/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#postgresql-advance">PostgreSQL Advance</a><ol><li><a href="#性能分析">性能分析</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="PostgreSQL-Advance"><a href="#PostgreSQL-Advance" class="headerlink" title="PostgreSQL Advance"></a>PostgreSQL Advance</h1><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p>查询分析 同MySQL一样, 使用 <code>EXPLAIN</code> + SQL</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#postgresql-advance&quot;&gt;PostgreSQL Advance&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#性能分析&quot;&gt;性能分析&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RedisAdvance.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Database-RedisAdvance/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Database-RedisAdvance/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#redis常用命令">Redis常用命令</a><ol><li><a href="#run-configuration">Run Configuration</a></li><li><a href="#过期策略">过期策略</a></li><li><a href="#事务">事务</a></li><li><a href="#服务器">服务器</a></li></ol></li><li><a href="#redis的应用场景">Redis的应用场景</a><ol><li><a href="#作为日志记录">作为日志记录</a></li><li><a href="#作为网站统计数据">作为网站统计数据</a></li><li><a href="#存储配置信息">存储配置信息</a></li><li><a href="#自动补全">自动补全</a></li><li><a href="#构建锁">构建锁</a></li><li><a href="#任务队列">任务队列</a></li></ol></li><li><a href="#数据安全和性能">数据安全和性能</a><ol><li><a href="#持久化策略">持久化策略</a></li><li><a href="#复制">复制</a></li><li><a href="#数据迁移">数据迁移</a></li><li><a href="#错误分析">错误分析</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h1><ul><li>关闭数据库 <code>shutdown</code> 该命令会在关闭数据库前保存数据</li><li>保存内存中数据到文件 <code>save</code></li><li>认证 <code>auth 口令</code> </li><li><p>测试联通性 <code>ping</code> 连接成功会返回pong</p></li><li><p>模糊删除 </p><ul><li>删除 6666端口 的 2数据库中<code>detail-2018-07-0*</code>模式的数据: <code>./redis-cli -p 6666 -n 2 keys &quot;detail-2018-07-0*&quot; | xargs  ./redis-cli -p 6666 -n 2 del</code></li></ul></li><li><p>查看所有连接 client list </p></li></ul><blockquote><p><a href="https://github.com/junegunn/redis-stat" target="_blank" rel="noopener">redis-stat</a></p></blockquote><h2 id="Run-Configuration"><a href="#Run-Configuration" class="headerlink" title="Run Configuration"></a>Run Configuration</h2><ul><li><p><em>slaveof</em></p><ul><li><code>redis-server --port 9999 --slaveof 127.0.0.1 6379</code> 启动一个9999端口作为6379的从服务器进行同步</li><li>或者服务启动后执行 <code>slaveof host port</code>（如果已经是从服务器，就丢去旧服务器的数据集，转而对新的主服务器进行同步）</li><li>从服务变成主服务 <code>slaveof no one</code> (同步的数据集不会丢失，迅速替换主服务器)</li></ul></li><li><p><em>loglevel</em></p><ul><li><code>./redis-server /etc/redis/6379.conf --loglevel debug</code></li></ul></li></ul><h2 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h2><ul><li><code>expire key seconds</code> 设置键的过期时间</li><li><code>PTTL/TTL key</code> 查看键剩余过期时间（生存时间） ms/s<ul><li>-1 表示永久 -2 表示没有该key</li></ul></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li><code>DISCARD</code> 取消事务，放弃执行事务块内的所有命令。</li><li><code>EXEC</code><ul><li>执行所有事务块内的命令。假如某个(或某些) key 正处于 WATCH 命令的监视之下，且事务块中有和这个(或这些) key 相关的命令，</li><li>那么 EXEC 命令只在这个(或这些) key 没有被其他命令所改动的情况下执行并生效，否则该事务被打断(abort)。</li></ul></li><li><code>MULTI</code> 标记一个事务块的开始。事务块内的多条命令会按照先后顺序被放进一个队列当中，最后由 EXEC 命令原子性(atomic)地执行。</li><li><code>UNWATCH</code> <ul><li>取消 WATCH 命令对所有 key 的监视。如果在执行 WATCH 命令之后， EXEC 命令或 DISCARD 命令先被执行了的话，那么就不需要再执行 UNWATCH 了。</li><li>因为 EXEC 命令会执行事务，因此 WATCH 命令的效果已经产生了；而 DISCARD 命令在取消事务的同时也会取消所有对 key 的监视，因此这两个命令执行之后，就没有必要执行 UNWATCH 了。</li></ul></li><li><code>WATCH key [key ...]</code><ul><li>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</li></ul></li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ul><li>BGREWRITEAOF</li><li>BGSAVE</li><li>CLIENT GETNAME</li><li>CLIENT KILL</li><li>CLIENT LIST</li><li>CLIENT SETNAME</li><li>CONFIG GET</li><li>CONFIG RESETSTAT</li><li>CONFIG REWRITE</li><li>CONFIG SET</li><li>DBSIZE</li><li>DEBUG OBJECT</li><li>DEBUG SEGFAULT</li><li>FLUSHALL</li><li>FLUSHDB</li><li>INFO<ul><li><a href="https://blog.csdn.net/kexiaoling/article/details/51810919" target="_blank" rel="noopener">参考: redis info 命令查看redis使用情况</a></li><li>info stats 中 total_commands_processed 是实际请求, 还是说redis自己执行的命令 TODO </li></ul></li><li>LASTSAVE</li><li>MONITOR</li><li>PSYNC</li><li>SAVE</li><li>SHUTDOWN</li><li>SLAVEOF</li><li>SLOWLOG</li><li>SYNC</li><li>TIME</li></ul><h1 id="Redis的应用场景"><a href="#Redis的应用场景" class="headerlink" title="Redis的应用场景"></a>Redis的应用场景</h1><blockquote><p><a href="https://my.oschina.net/u/3971241/blog/2221560" target="_blank" rel="noopener">参考博客: 为什么我们做分布式使用Redis？</a><code>缓存的场景和应对措施</code></p></blockquote><h2 id="作为日志记录"><a href="#作为日志记录" class="headerlink" title="作为日志记录"></a>作为日志记录</h2><h2 id="作为网站统计数据"><a href="#作为网站统计数据" class="headerlink" title="作为网站统计数据"></a>作为网站统计数据</h2><h2 id="存储配置信息"><a href="#存储配置信息" class="headerlink" title="存储配置信息"></a>存储配置信息</h2><h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><ul><li>搜索建议</li></ul><h2 id="构建锁"><a href="#构建锁" class="headerlink" title="构建锁"></a>构建锁</h2><h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><ul><li>发送邮件</li></ul><hr><h1 id="数据安全和性能"><a href="#数据安全和性能" class="headerlink" title="数据安全和性能"></a>数据安全和性能</h1><h2 id="持久化策略"><a href="#持久化策略" class="headerlink" title="持久化策略"></a>持久化策略</h2><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><h2 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h2><ul><li>使用主从复制来进行数据, 或者自己写Py脚本?</li></ul><h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><ol><li><code>JedisConnectionException:  Could not get a resource from the pool</code> cause by <code>java.util.NoSuchElementException: Unable to validate object</code><ul><li>多种原因, 由于设置了 testOnBorrow 为 true, 那么在每次获取数据时, 就会先测试性的获取一个数据, 然后校验能否正常拿到该数据 如果拿不到就抛出这个异常, 原因可能有:<ol><li>根本没有连接上Redis, 配置有问题 端口 bind 什么的</li><li>Redis 存放数据的 rdb 文件所在目录 没有存储空间了</li><li>没有内存空间了, 由于执行save操作时, 会进行fork子进程 然后进行持久化 TODO 验证</li></ol></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#redis常用命令&quot;&gt;Redis常用命令&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#run-configuration&quot;&gt;Run Configuration&lt;/a&gt;&lt;/li&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SQL.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Database-SQL/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Database-SQL/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#sql">SQL</a></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><blockquote><p>基础SQL语言的学习使用</p></blockquote><blockquote><p><a href="https://github.com/XiaoMi/soar" target="_blank" rel="noopener">soar</a><code>SQL Optimizer And Rewriter</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#sql&quot;&gt;SQL&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;目录 end&lt;/strong&gt;|&lt;em&gt;2018-12-13 12:06&lt;/em&gt;| &lt;a href=&quot;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SQLServer.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Database-SQLServer/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Database-SQLServer/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#sqlserver">SQLServer</a><ol><li><a href="#安装配置">安装配置</a><ol><li><a href="#docker安装2017硬是不成功">Docker安装2017硬是不成功</a><ol><li><a href="#2000版本">2000版本</a></li></ol></li></ol></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="SQLServer"><a href="#SQLServer" class="headerlink" title="SQLServer"></a>SQLServer</h1><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><h3 id="Docker安装2017硬是不成功"><a href="#Docker安装2017硬是不成功" class="headerlink" title="Docker安装2017硬是不成功"></a>Docker安装2017硬是不成功</h3><ul><li><a href="https://hub.docker.com/r/exoplatform/sqlserver/" target="_blank" rel="noopener">dockerhub网址</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -e SA_PASSWORD=&lt;passord&gt; -e SQLSERVER_DATABASE=&lt;db name&gt; -e SQLSERVER_USER=&lt;user&gt; -e </span><br><span class="line">SQLSERVER_PASSWORD=&lt;password&gt; -p &lt;<span class="built_in">local</span> port&gt;:1433 exoplatform/sqlserver:ctp2-1-1</span><br><span class="line"></span><br><span class="line">docker run -d -e SA_PASSWORD=ad -e SQLSERVER_DATABASE=mythos -e SQLSERVER_USER=myth -e SQLSERVER_PASSWORD=jiushi -p 1433:1433 mssql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run --name mssql -e ACCEPT_EULA=Y -e SA_PASSWORD=docker888 -e SQLSERVER_USER=myth -e SQLSERVER_PASSWORD=jiushi -p 1433:1433 -d microsoft/mssql-server-linux:latest</span><br><span class="line"></span><br><span class="line">docker run -e <span class="string">'SA_PASSWORD=docker888'</span> -p 1433:1433 -it --rm microsoft/mssql-server-linux:latest /opt/mssql/bin/sqlservr --accept-eula</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看控制台输出</span></span><br><span class="line">docker run --name mssql -e ACCEPT_EULA=Y -e SA_PASSWORD=docker888 -e SQLSERVER_USER=myth -e SQLSERVER_PASSWORD=jiushi -p 1433:1433 -it microsoft/mssql-server-linux:2017-GA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -d -e <span class="string">'ACCEPT_EULA=Y'</span> -e <span class="string">'SA_PASSWORD=ad'</span>  -e <span class="string">'SQLSERVER_PASSWORD=jiushi'</span> -p 1433:1433 microsoft/mssql-server-linux:2017-GA</span><br></pre></td></tr></table></figure><h4 id="2000版本"><a href="#2000版本" class="headerlink" title="2000版本"></a>2000版本</h4><ul><li><a href="https://hub.docker.com/r/rsmoorthy/mssql/" target="_blank" rel="noopener">docker别人做的镜像</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#sqlserver&quot;&gt;SQLServer&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#安装配置&quot;&gt;安装配置&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#docker安装2017
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ZenOfPattern.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Java-ZenOfPattern/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Java-ZenOfPattern/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#设计模式之禅">设计模式之禅</a><ol><li><a href="#软件设计的一些原则">软件设计的一些原则</a><ol><li><a href="#思维原则">思维原则</a><ol><li><a href="#奥卡姆剃刀原理">奥卡姆剃刀原理</a></li></ol></li><li><a href="#首要原则">首要原则</a><ol><li><a href="#勿重复造轮子">勿重复造轮子</a></li><li><a href="#减法优于加法">减法优于加法</a></li><li><a href="#抽象优于实现">抽象优于实现</a></li><li><a href="#组合优于继承">组合优于继承</a></li><li><a href="#查询与命令分离">查询与命令分离</a></li><li><a href="#够用原则">够用原则</a></li><li><a href="#最少知识原则">最少知识原则</a></li></ol></li><li><a href="#面向对象的solid-原则">面向对象的S.O.L.I.D 原则</a><ol><li><a href="#单一职责原则">单一职责原则</a></li><li><a href="#开闭原则">开闭原则</a></li><li><a href="#里氏代换原则">里氏代换原则</a></li><li><a href="#接口隔离原则">接口隔离原则</a></li><li><a href="#依赖倒置原则">依赖倒置原则</a></li></ol></li><li><a href="#其他原则">其他原则</a><ol><li><a href="#共同封闭原则">共同封闭原则</a></li><li><a href="#共同重用原则">共同重用原则</a></li><li><a href="#好莱坞原则">好莱坞原则</a></li><li><a href="#高内聚低耦合">高内聚低耦合</a></li><li><a href="#惯例优于配置原则">惯例优于配置原则</a></li><li><a href="#关注点分离">关注点分离</a></li><li><a href="#契约式设计">契约式设计</a></li><li><a href="#无环依赖原则">无环依赖原则</a></li></ol></li></ol></li><li><a href="#设计模式">设计模式</a><ol><li><a href="#基础">基础</a></li><li><a href="#策略者模式">策略者模式</a></li><li><a href="#1创建型设计模式">1.创建型设计模式</a></li><li><a href="#2结构型设计模式">2.结构型设计模式</a></li><li><a href="#3行为设计模式">3.行为设计模式</a></li><li><a href="#常见设计模式">【常见设计模式】</a><ol><li><a href="#适配器模式">适配器模式</a></li><li><a href="#中介者模式">中介者模式</a></li><li><a href="#观察者模式">观察者模式</a><ol><li><a href="#单例模式">单例模式</a></li><li><a href="#装饰器模式">装饰器模式</a></li></ol></li><li><a href="#原型模式">原型模式</a></li><li><a href="#生成器模式">生成器模式</a></li></ol></li></ol></li><li><a href="#实践">实践</a><ol><li><a href="#经验之谈">经验之谈</a></li></ol></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="设计模式之禅"><a href="#设计模式之禅" class="headerlink" title="设计模式之禅"></a>设计模式之禅</h1><h2 id="软件设计的一些原则"><a href="#软件设计的一些原则" class="headerlink" title="软件设计的一些原则"></a>软件设计的一些原则</h2><h3 id="思维原则"><a href="#思维原则" class="headerlink" title="思维原则"></a>思维原则</h3><h4 id="奥卡姆剃刀原理"><a href="#奥卡姆剃刀原理" class="headerlink" title="奥卡姆剃刀原理"></a>奥卡姆剃刀原理</h4><h3 id="首要原则"><a href="#首要原则" class="headerlink" title="首要原则"></a>首要原则</h3><h4 id="勿重复造轮子"><a href="#勿重复造轮子" class="headerlink" title="勿重复造轮子"></a>勿重复造轮子</h4><p>-<code>DRY Don’t Repeat Yourself</code><br>是一个最简单的法则，也是最容易被理解的。但它也可能是最难被应用的（因为要做到这样，我们需要在泛型设计上做相当的努力，这并不是一件容易的事）。它意味着，当我们在两个或多个地方的时候发现一些相似的代码的时候，我们需要把他们的共性抽象出来形一个唯一的新方法，并且改变现有的地方的代码让他们以一些合适的参数调用这个新的方法。</p><h4 id="减法优于加法"><a href="#减法优于加法" class="headerlink" title="减法优于加法"></a>减法优于加法</h4><ul><li><code>KISS Keep It Simple, Stupid</code><br>KISS原则在设计上可能最被推崇的，在家装设计，界面设计 ，操作设计上，复杂的东西越来越被众人所BS了，而简单的东西越来越被人所认可，比如这些UI的设计和我们中国网页（尤其是新浪的网页）者是负面的例子。<br>“宜家”（IKEA）简约、效率的家居设计、生产思路；“微软”（Microsoft）“所见即所得”的理念；“谷歌”（Google)简约、直接的商业风格，无一例外的遵循了“kiss”原则，<br>也正是“kiss”原则，成就了这些看似神奇的商业经典。而苹果公司的iPhone/iPad将这个原则实践到了极至。</li></ul><p>把一个事情搞复杂是一件简单的事，但要把一个复杂的事变简单，这是一件复杂的事。</p><h4 id="抽象优于实现"><a href="#抽象优于实现" class="headerlink" title="抽象优于实现"></a>抽象优于实现</h4><p>-<code>Program to an interface, not an implementation</code></p><ul><li>这是设计模式中最根本的哲学，注重接口，而不是实现，依赖接口，而不是实现。接口是抽象是稳定的，实现则是多种多样的。</li><li>以后面我们会面向对象的SOLID原则中会提到我们的依赖倒置原则，就是这个原则的的另一种样子。</li></ul><h4 id="组合优于继承"><a href="#组合优于继承" class="headerlink" title="组合优于继承"></a>组合优于继承</h4><p><code>【Composition over inheritance】</code></p><ul><li>多使用组合而不是继承, 但是这个观点是存在一定的争议的, 还是要有度的,合理搭配最为重要<ul><li>组合就是将原来继承方式中的父类放到子类作为属性?</li></ul></li></ul><p>组合<br>1.（对象）组合是一种通过创建一个组合了其它对象的对象，从而获得新功能的复用方法。<br>2.将功能委托给所组合的一个对象，从而获得新功能。<br>3.有些时候也称之为”聚合”（aggregation）或”包容”（containment），尽管有些作者对这些术语赋予了专门的含义</p><ul><li style="list-style: none"><input type="checkbox"> 再度思考</li></ul><blockquote><p><a href="http://www.cnblogs.com/narutow/p/8117352.html" target="_blank" rel="noopener">参考博客: 组合、委托与继承，面向对象中类之间的基本关系漫游</a><br><a href="https://www.xuebuyuan.com/1639556.html" target="_blank" rel="noopener">参考博客: 优先使用（对象）组合，而非（类）继承</a></p></blockquote><h4 id="查询与命令分离"><a href="#查询与命令分离" class="headerlink" title="查询与命令分离"></a>查询与命令分离</h4><p><code>【CQS Command-Query Separation】</code></p><ul><li>查询命令分离原则<ul><li>查询：当一个方法返回一个值来回应一个问题的时候，它就具有查询的性质；</li><li>命令：当一个方法要改变对象的状态的时候，它就具有命令的性质；</li></ul></li></ul><h4 id="够用原则"><a href="#够用原则" class="headerlink" title="够用原则"></a>够用原则</h4><p><code>【YAGNI  You Ain’t Gonna Need It 】</code></p><ul><li>这个原则简而言之为——只考虑和设计必须的功能，避免过度设计。只实现目前需要的功能，在以后您需要更多功能时，可以再进行添加。<ul><li>如无必要，勿增复杂性。</li><li>软件开发先是一场沟通博弈。 </li></ul></li></ul><h4 id="最少知识原则"><a href="#最少知识原则" class="headerlink" title="最少知识原则"></a>最少知识原则</h4><blockquote><p>【Law of Demeter – 迪米特法则】</p><ul><li>迪米特法则(Law of Demeter)，又称“最少知识原则” <code>（Principle of Least Knowledge）</code>，其来源于1987年荷兰大学的一个叫做Demeter的项目。</li><li>Craig Larman把Law of Demeter又称作“不要和陌生人说话”。在《程序员修炼之道》中讲LoD的那一章叫作“解耦合与迪米特法则”。</li><li>关于迪米特法则有一些很形象的比喻：<ul><li>如果你想让你的狗跑的话，你会对狗狗说还是对四条狗腿说？</li><li>如果你去店里买东西，你会把钱交给店员，还是会把钱包交给店员让他自己拿？ </li></ul></li><li>正式表述如下:</li><li>对于对象 ‘O’ 中一个方法’M’，M应该只能够访问以下对象中的方法:<ul><li>对象O；</li><li>与O直接相关的Component Object；</li><li>由方法M创建或者实例化的对象；</li><li>作为方法M的参数的对象。</li></ul></li></ul></blockquote><blockquote><p><a href="http://zhangyi.xyz/demeter-law-and-refactoring/" target="_blank" rel="noopener">参考博客: 迪米特法则与重构</a></p></blockquote><hr><h3 id="面向对象的S-O-L-I-D-原则"><a href="#面向对象的S-O-L-I-D-原则" class="headerlink" title="面向对象的S.O.L.I.D 原则"></a>面向对象的S.O.L.I.D 原则</h3><ul><li>一般来说这是面向对象的五大设计原则，但是，我觉得这些原则可适用于所有的软件开发。</li></ul><h4 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h4><p><code>Single Responsibility Principle (SRP)</code></p><ul><li>关于单一职责原则，其核心的思想是：<code>一个类，只做一件事，并把这件事做好，且只有一个引起它变化的原因。</code><ul><li>Unix/Linux是这一原则的完美体现者。各个程序都独立负责一个单一的事。</li><li>Windows是这一原则的反面示例。几乎所有的程序都交织耦合在一起。 </li></ul></li></ul><h4 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h4><p><code>Open/Closed Principle (OCP)</code></p><ul><li>关于开发封闭原则，其核心的思想是：模块是可扩展的，而不可修改的。也就是说，<code>对扩展是开放的，而对修改是封闭的。</code><ul><li>对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。</li><li>对修改封闭，意味着类一旦设计完成，就可以独立完成其工作，而不要对类进行任何修改。</li></ul></li></ul><h4 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h4><p><code>Liskov substitution principle (LSP)</code></p><ul><li>软件工程大师Robert C. Martin把里氏代换原则最终简化为一句话：<code>“Subtypes must be substitutable for their base types”。</code></li><li><p>也就是，子类必须能够替换成它们的基类。</p><blockquote><p>即：子类应该可以替换任何基类能够出现的地方，并且经过替换以后，代码还能正常工作。另外，不应该在代码中出现if/else之类对子类类型进行判断的条件。<br>里氏替换原则LSP是使代码符合开闭原则的一个重要保证。正是由于子类型的可替换性才使得父类型的模块在无需修改的情况下就可以扩展。</p></blockquote></li><li><p>这么说来，似乎有点教条化，我非常建议大家看看这个原则个两个最经典的案例——<code>“正方形不是长方形”</code>和<code>“鸵鸟不是鸟”</code>。</p></li><li>通过这两个案例，你会明白《墨子小取》中说的——<code>“娣，美人也，爱娣，非爱美人也….盗，人也；恶盗，非恶人也。”</code>——妹妹虽然是美人，但喜欢妹妹并不代表喜欢美人。</li><li>盗贼是人，但讨厌盗贼也并不代表就讨厌人类。这个原则让你考虑的不是语义上对象的间的关系，而是实际需求的环境。</li><li>在很多情况下，在设计初期我们类之间的关系不是很明确，LSP则给了我们一个判断和设计类之间关系的基准：需不需要继承，以及怎样设计继承关系。</li><li><h4 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h4><code>Interface Segregation Principle (ISP)</code></li><li>接口隔离原则意思是把功能实现在接口中，而不是类中，使用多个专门的接口比使用单一的总接口要好。</li><li>举个例子，我们对电脑有不同的使用方式，比如：写作，通讯，看电影，打游戏，上网，编程，计算，数据等，如果我们把这些功能都声明在电脑的抽类里面，那么，我们的上网本，PC机，服务器，</li><li>笔记本的实现类都要实现所有的这些接口，这就显得太复杂了。所以，我们可以把其这些功能接口隔离开来，比如：工作学习接口，编程开发接口，上网娱乐接口，计算和数据服务接口，这样，我们的不同功能的电脑就可以有所选择地继承这些接口。</li><li>这个原则可以提升我们“搭积木式”的软件开发。对于设计来说，Java中的各种Event Listener和Adapter，对于软件开发来说，不同的用户权限有不同的功能，不同的版本有不同的功能，都是这个原则的应用。</li></ul><h4 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h4><p><code>Dependency Inversion Principle (DIP)</code><br>高层模块不应该依赖于低层模块的实现，而是依赖于高层抽象。<br>举个例子，墙面的开关不应该依赖于电灯的开关实现，而是应该依赖于一个抽象的开关的标准接口，这样，当我们扩展程序的时候，我们的开关同样可以控制其它不同的灯，甚至不同的电器。<br>也就是说，电灯和其它电器继承并实现我们的标准开关接口，而我们的开关产商就可不需要关于其要控制什么样的设备，只需要关心那个标准的开关标准。这就是依赖倒置原则。<br>这就好像浏览器并不依赖于后面的web服务器，其只依赖于HTTP协议。这个原则实在是太重要了，社会的分工化，标准化都是这个设计原则的体现。</p><blockquote><p>下面有几点指导意见，帮助你避免在面向对象设计中违反依赖倒置原则：  </p><blockquote><p>变量不能持有具体类的引用，就像订单方法代码中，你看不到new一样。<br>不要让派生自具体类，要派生就派生抽象类abstract<br>不要覆盖基类中已实现的方法，除非你要覆盖的是比较特殊的一部分代码。  </p></blockquote></blockquote><h3 id="其他原则"><a href="#其他原则" class="headerlink" title="其他原则"></a>其他原则</h3><h4 id="共同封闭原则"><a href="#共同封闭原则" class="headerlink" title="共同封闭原则"></a>共同封闭原则</h4><p><code>Common Closure Principle（CCP）</code><br>一个包中所有的类应该对同一种类型的变化关闭。一个变化影响一个包，便影响了包中所有的类。一个更简短的说法是：一起修改的类，应该组合在一起（同一个包里）。如果必须修改应用程序里的代码，我们希望所有的修改都发生在一个包里（修改关闭），而不是遍布在很多包里。CCP原则就是把因为某个同样的原因而需要修改的所有类组合进一个包里。如果2个类从物理上或者从概念上联系得非常紧密，它们通常一起发生改变，那么它们应该属于同一个包。</p><p>CCP延伸了开闭原则（OCP）的“关闭”概念，当因为某个原因需要修改时，把需要修改的范围限制在一个最小范围内的包里。</p><h4 id="共同重用原则"><a href="#共同重用原则" class="headerlink" title="共同重用原则"></a>共同重用原则</h4><p><code>Common Reuse Principle (CRP)</code><br>包的所有类被一起重用。如果你重用了其中的一个类，就重用全部。换个说法是，没有被一起重用的类不应该被组合在一起。CRP原则帮助我们决定哪些类应该被放到同一个包里。依赖一个包就是依赖这个包所包含的一切。当一个包发生了改变，并发布新的版本，使用这个包的所有用户都必须在新的包环境下验证他们的工作，即使被他们使用的部分没有发生任何改变。因为如果包中包含有未被使用的类，即使用户不关心该类是否改变，但用户还是不得不升级该包并对原来的功能加以重新测试。</p><p>CCP则让系统的维护者受益。CCP让包尽可能大（CCP原则加入功能相关的类），CRP则让包尽可能小（CRP原则剔除不使用的类）。它们的出发点不一样，但不相互冲突。</p><h4 id="好莱坞原则"><a href="#好莱坞原则" class="headerlink" title="好莱坞原则"></a>好莱坞原则</h4><p><code>Hollywood Principle</code><br>好莱坞原则就是一句话——“don’t call us, we’ll call<br>you.”。意思是，好莱坞的经纪人们不希望你去联系他们，而是他们会在需要的时候来联系你。也就是说，所有的组件都是被动的，所有的组件初始化和调用都由容器负责。组件处在一个容器当中，由容器负责管理。</p><p>简单的来讲，就是由容器控制程序之间的关系，而非传统实现中，由程序代码直接操控。这也就是所谓“控制反转”的概念所在：</p><pre><code>不创建对象，而是描述创建对象的方式。在代码中，对象与服务没有直接联系，而是容器负责将这些联系在一起。</code></pre><p>控制权由应用代码中转到了外部容器，控制权的转移，是所谓反转。</p><p>好莱坞原则就是IoC（Inversion of Control）或DI（Dependency Injection）的基础原则。这个原则很像依赖倒置原则，依赖接口，而不是实例，但是这个原则要解决的是怎么把这个实例传入调用类中？你可能把其声明成成员，你可以通过构造函数，你可以通过函数参数。但是<br>IoC可以让你通过配置文件，一个由Service Container<br>读取的配置文件来产生实际配置的类。但是程序也有可能变得不易读了，程序的性能也有可能还会下降。</p><h4 id="高内聚低耦合"><a href="#高内聚低耦合" class="headerlink" title="高内聚低耦合"></a>高内聚低耦合</h4><p><code>【 High Cohesion &amp; Low/Loose coupling &amp; – 高内聚， 低耦合 】</code></p><ul><li>这个原则是UNIX操作系统设计的经典原则，把模块间的耦合降到最低，而努力让一个模块做到精益求精。<ul><li>内聚：一个模块内各个元素彼此结合的紧密程度</li><li>耦合：一个软件结构内不同模块之间互连程度的度量</li></ul></li><li>内聚意味着重用和独立，耦合意味着多米诺效应牵一发动全身</li></ul><blockquote><p>凝聚&gt;松耦合&gt;重用  <a href="http://www.jdon.com/forum/messageList.shtml?thread=45977#23144139" target="_blank" rel="noopener">参考博客: 为什么我停止使用Spring?</a></p></blockquote><h4 id="惯例优于配置原则"><a href="#惯例优于配置原则" class="headerlink" title="惯例优于配置原则"></a>惯例优于配置原则</h4><p><code>Convention over Configuration（CoC）</code><br>简单点说，就是将一些公认的配置方式和信息作为内部缺省的规则来使用。例如，Hibernate的映射文件，如果约定字段名和类属性一致的话，基本上就可以不要这个配置文件了。你的应用只需要指定不convention的信息即可，从而减少了大量convention而又不得不花时间和精力啰里啰嗦的东东。配置文件很多时候相当的影响开发效率。</p><p>Rails 中很少有配置文件（但不是没有，数据库连接就是一个配置文件），Rails 的fans号称期开发效率是 java 开发的 10<br>倍，估计就是这个原因。Maven也使用了CoC原则，当你执行mvn<br>-compile命令的时候，不需要指源文件放在什么地方，而编译以后的class文件放置在什么地方也没有指定，这就是CoC原则。</p><h4 id="关注点分离"><a href="#关注点分离" class="headerlink" title="关注点分离"></a>关注点分离</h4><p><code>Separation of Concerns (SoC)</code></p><blockquote><p>　是计算机科学中最重要的努力目标之一。这个原则，就是在软件开发中，通过各种手段，将问题的各个关注点分开。如果一个问题能分解为独立且较小的问题，就是相对较易解决的。<br>问题太过于复杂，要解决问题需要关注的点太多，而程序员的能力是有限的，不能同时关注于问题的各个方面。正如程序员的记忆力相对于计算机知识来说那么有限一样，<br>程序员解决问题的能力相对于要解决的问题的复杂性也是一样的非常有限。在我们分析问题的时候，如果我们把所有的东西混在一起讨论，那么就只会有一个结果——乱。</p></blockquote><p>我记得在上一家公司有一个项目，讨论就讨论了1年多，项目本来不复杂，但是没有使用SoC，全部的东西混为一谈，再加上一堆程序员注入了各种不同的观点和想法，整个项目一下子就失控了。<br>最后，本来一个1年的项目做了3年。</p><p>实现关注点分离的方法主要有两种，一种是标准化，另一种是抽象与包装。标准化就是制定一套标准，让使用者都遵守它，将人们的行为统一起来，这样使用标准的人就不用担心别人会有很多种不同的实现，使自己的程序不能和别人的配合。<br>JavaEE就是一个标准的大集合。每个开发者只需要关注于标准本身和他所在做的事情就行了。就像是开发镙丝钉的人只专注于开发镙丝钉就行了，而不用关注镙帽是怎么生产的，反正镙帽和镙丝钉按标来就一定能合得上。不断地把程序的某些部分抽像差包装起来，也是实现关注点分离的好方法。<br>一旦一个函数被抽像出来并实现了，那么使用函数的人就不用关心这个函数是如何实现的，同样的，一旦一个类被抽像并实现了，类的使用者也不用再关注于这个类的内部是如何实现的。<br>诸如组件，分层，面向服务，等等这些概念都是在不同的层次上做抽像和包装，以使得使用者不用关心它的内部实现细节。<br>说白了还是“高内聚，低耦合”。</p><blockquote><p><a href="http://www.cnblogs.com/wenhongyu/p/7992028.html" target="_blank" rel="noopener">参考博客: 理论篇：关注点分离(Separation of concerns, SoC)</a></p></blockquote><h4 id="契约式设计"><a href="#契约式设计" class="headerlink" title="契约式设计"></a>契约式设计</h4><p><code>Design by Contract (DbC)</code><br>DbC的核心思想是对软件系统中的元素之间相互合作以及“责任”与“义务”的比喻。这种比喻从商业活动中“客户”与“供应商”达成“契约”而得来。例如：</p><pre><code>供应商必须提供某种产品（责任），并且他有权期望客户已经付款（权利）。客户必须付款（责任），并且有权得到产品（权利）。契约双方必须履行那些对所有契约都有效的责任，如法律和规定等。</code></pre><p>同样的，如果在程序设计中一个模块提供了某种功能，那么它要：</p><pre><code>期望所有调用它的客户模块都保证一定的进入条件：这就是模块的先验条件（客户的义务和供应商的权利，这样它就不用去处理不满足先验条件的情况）。保证退出时给出特定的属性：这就是模块的后验条件——（供应商的义务，显然也是客户的权利）。在进入时假定，并在退出时保持一些特定的属性：不变式。</code></pre><p>契约就是这些权利和义务的正式形式。我们可以用“三个问题”来总结DbC，并且作为设计者要经常问：</p><pre><code>它期望的是什么？它要保证的是什么？它要保持的是什么？</code></pre><p>根据Bertrand<br>Meyer氏提出的DBC概念的描述，对于类的一个方法，都有一个前提条件以及一个后续条件，前提条件说明方法接受什么样的参数数据等，只有前提条件得到满足时，这个方法才能被调用；同时后续条件用来说明这个方法完成时的状态，如果一个方法的执行会导致这个方法的后续条件不成立，那么这个方法也不应该正常返回。</p><p>现在把前提条件以及后续条件应用到继承子类中，子类方法应该满足：</p><pre><code>前提条件不强于基类．后续条件不弱于基类．</code></pre><p>换句话说，通过基类的接口调用一个对象时，用户只知道基类前提条件以及后续条件。因此继承类不得要求用户提供比基类方法要求的更强的前提条件，亦即，继承类方法必须接受任何基类方法能接受的任何条件（参数）。同样，继承类必须顺从基类的所有后续条件，亦即，继承类方法的行为和输出不得违反由基类建立起来的任何约束，不能让用户对继承类方法的输出感到困惑。</p><p>这样，我们就有了基于契约的LSP，基于契约的LSP是LSP的一种强化。</p><h4 id="无环依赖原则"><a href="#无环依赖原则" class="headerlink" title="无环依赖原则"></a>无环依赖原则</h4><p><code>Acyclic Dependencies Principle (ADP)</code><br>包之间的依赖结构必须是一个直接的无环图形，也就是说，在依赖结构中不允许出现环（循环依赖）。如果包的依赖形成了环状结构，怎么样打破这种循环依赖呢？有2种方法可以打破这种循环依赖关系：第一种方法是创建新的包，如果A、B、C形成环路依赖，那么把这些共同类抽出来放在一个新的包D里。这样就把C依赖A变成了C依赖D以及A依赖D，从而打破了循环依赖关系。第二种方法是使用DIP（依赖倒置原则）和ISP（接口分隔原则）设计原则。</p><p>无环依赖原则（ADP）为我们解决包之间的关系耦合问题。在设计模块时，不能有循环依赖。</p><hr><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><blockquote><p><a href="https://java-design-patterns.com/" target="_blank" rel="noopener">java design patterns</a></p></blockquote><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><blockquote><p><a href="http://www.cnblogs.com/x-xk/archive/2013/01/21/2864916.html" target="_blank" rel="noopener">设计模式基础</a><br><a href="http://www.baike.com/wiki/GoF" target="_blank" rel="noopener">参考博客: GoF解释</a><br><a href="http://blog.csdn.net/column/details/zsxdesignpattern.html" target="_blank" rel="noopener">参考博客: 设计模式专栏</a></p></blockquote><blockquote><p><a href="http://blog.csdn.net/u011240877/article/details/45381071" target="_blank" rel="noopener">23种经典设计模式UML类图汇总 </a><br><a href="http://blog.csdn.net/chen4013874/article/details/51347535" target="_blank" rel="noopener">参考博客: 23种设计模式UML表示形式</a><br><a href="http://blog.csdn.net/tingting256/article/details/52534663" target="_blank" rel="noopener">参考博客: 23中设计模式类图和原理详解</a><br><a href="http://blog.csdn.net/qq_25827845/article/details/52510803" target="_blank" rel="noopener">参考博客: 23种设计模式类图总结 </a> </p></blockquote><h3 id="策略者模式"><a href="#策略者模式" class="headerlink" title="策略者模式"></a>策略者模式</h3><blockquote><p>定义了算法族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化独立于使用算法的用户。<br><a href="http://blog.csdn.net/hguisu/article/details/7558249" target="_blank" rel="noopener">参考博客: 设计模式 ( 十八 ) 策略模式Strategy（对象行为型） </a><br><a href="http://www.cnblogs.com/zdd-java/p/6143935.html" target="_blank" rel="noopener">参考博客: Java消除ifelse</a></p></blockquote><p>也就是说将一种需求的多种实现算法分别封装起来, 然后利用多态, 让调用方选择任一实现</p><h3 id="1-创建型设计模式"><a href="#1-创建型设计模式" class="headerlink" title="1.创建型设计模式"></a>1.创建型设计模式</h3><blockquote><p>单例模式(Singleton)<br>原型模式(Prototype)<br>建造者(Builder)<br>抽象工厂(Abstract Factory)<br>工厂方法(Factory Method)   </p></blockquote><ul><li>抽象了实例化过程，它们帮助一个系统独立于如何创建，组合和表示它的那些对象。</li><li>一个类创建型模型使用继承改变被实例化的类，而一个对象创建型模型将实例化委托给另一个对象</li><li>将一组固定行为的硬编码转移为定义一个较小的基本行为集，这些行为可以被组合成任意数目的更复杂性的行为。这样创建有特定行为的对象要求的不仅仅是实例化一个类</li></ul><p><em>Builder</em></p><ul><li>生成器 Builder，是一种对象构建模式，模式通常包含Builder，ConcreteBuilder。Director 和 Product四部分</li></ul><p><em>Abstract Factory</em></p><ul><li>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</li></ul><p><em>Factory Method</em></p><ul><li>定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使一个类的实例化延迟到其子类</li></ul><p><em>Prototype</em></p><ul><li>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。 </li></ul><p><em>Singleton</em></p><ul><li>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li></ul><h3 id="2-结构型设计模式"><a href="#2-结构型设计模式" class="headerlink" title="2.结构型设计模式"></a>2.结构型设计模式</h3><blockquote><p>适配器模式(<strong>Adapter</strong>)<br>桥接模式(<strong>Bridge</strong>)<br>组合模式(<strong>Compontent</strong>)<br>代理模式(<strong>Proxy</strong>)<br>享元模式(<strong>Flyweight</strong>)<br>外观模式(<strong>Facade</strong>)<br>装饰模式(<strong>Decorator</strong>)  </p></blockquote><ul><li>结构型设计模式涉及如何组合类和对象以获得更大的结构</li><li>结构型模式采用继承机制来组合接口或实现。</li><li>结构型对象模式不是对接口和实现进行组合，而是描述了如何对一些对象进行组合，从而实现新功能</li></ul><hr><ul><li><strong>Composite模式</strong><br>它将对象组合成树形结构以表示“部分-整体”</li><li><strong>Flyweight模式</strong><br>该模式为共享对象定义了一个结构，强调对象的空间效率，自由共享</li><li><p><strong>Facade模式</strong>（外观模式）<br>描述了如何用单个对象表示整个子系统（外部与其内部通信必须通过一个统一的对象进行交互），模式中的facade用来表示一组对象，<br>外观设计模式提供一个高层次的接口是的子系统易于使用。<br><strong>适用情况:</strong></p><blockquote><p> 1.为复杂的子系统提供一个简单的接口<br> 2.客户程序与抽象类的实现部分有很大依赖性<br> 3.构建一个层次结构的子系统时，适用外观模式定义子系统每层的入口</p></blockquote></li><li><p><strong>Bridge模式</strong> 将对象的抽象和实现分离，从而可以独立的改变他们。</p></li><li><strong>Decorator模式</strong><br>描述如何动态地为对象添加职责，模式采用递归方式组合对象，从而允许添加任意多的对象职责。</li></ul><h3 id="3-行为设计模式"><a href="#3-行为设计模式" class="headerlink" title="3.行为设计模式"></a>3.行为设计模式</h3><blockquote><p>策略模式(<strong>Strategy</strong>)<br>命令模式(<strong>Command</strong>)<br>状态模式(<strong>State</strong>)<br>解释器模式(<strong>Interpreter</strong>)<br>模板方法(<strong>Template Method</strong>)<br>责任链模式(<strong>Chain of Responsibility</strong>)<br>迭代器模式(<strong>Iterator</strong>)<br>中介者模式(<strong>Mediator</strong>)<br>备忘录模式(<strong>Memento</strong>)<br>观察者模式(<strong>Observe</strong>)<br>访问者模式(<strong>Visitor</strong>)  </p></blockquote><ul><li>行为设计模式涉及算法和对象间职责的分配，行为模式描述对象和类的模式以及其通信模式</li><li>行为模式使用继承机制在类间派发行为</li></ul><hr><h3 id="【常见设计模式】"><a href="#【常见设计模式】" class="headerlink" title="【常见设计模式】"></a>【常见设计模式】</h3><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><ul><li><strong>适配器 模式</strong>（Adapter）：适配器是的一个接口与其他接口兼容，从而给出了多个不同接口的同一抽象。一般分类结构和对象结构两种：</li><li><em>类适配器</em>：适配器类继承被适配类，实现某个接口，在客户端类中可以根据需求来建立子类</li><li><em>对象适配器</em>：适配器不是继承，是使用直接关联，或称委托方式<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/UML/Adapter.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><h4 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h4><ul><li><strong>中介者 模式</strong>：包装了一系列对象相互作用的方式，使得对象间的相互作用是独立变化，但是与中介者紧密联系</li></ul><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><ul><li><strong>观察者 模式 Observer</strong>：一个目标物件管理相依于它的管理物件，并且在它本身的状态发生改变时发出通知，这种模式常用来实现事件处理系统。（也称发布-订阅，模型-视图，源-收听者模式）<ul><li>观察者（接口）：更新信息，展示信息，给 <strong>被观察者（形参）</strong> 注册上观察者</li><li>被观察者（接口）：发出更新通知（遍历观察者集合并注册），当自身发生改动时发出通知消息</li></ul></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Model/Observer.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h5><blockquote><p>Singleton 一个类只有一个实例易于外界访问 Spring将该模式运用的出神入化</p></blockquote><ul><li><a href="http://www.cnblogs.com/atwanli/articles/5104898.html" target="_blank" rel="noopener">单例模式与高并发</a>当某个单例对象中含有不具有并发性的对象 就会发生并发问题, 由于只有一个对象, 为了确保数据一致, 就需要加锁, 这样就带来了严重的性能下降, 而Spring是怎么做的呢<ul><li><a href="https://blog.csdn.net/java_fancy/article/details/7439657" target="_blank" rel="noopener">参考博客 Spring如何处理线程并发</a></li><li><a href="https://bbs.csdn.net/topics/390873889" target="_blank" rel="noopener">参考博客: springmvc是单例的，开发的时候会不会影响性能呢？</a></li><li><a href="http://www.xuebuyuan.com/1628190.html" target="_blank" rel="noopener">参考博客: Spring并发访问的线程安全性问题</a> <code>Controller或者Service层中定义共享对象, 但是使用线程安全对象</code></li></ul></li></ul><blockquote><p><a href="https://bbs.csdn.net/topics/310136305" target="_blank" rel="noopener">参考博客: 单例模式和Static的区别! </a> </p><ul><li style="list-style: none"><input type="checkbox"> <code>static 有可能被实例化多个出来么</code></li></ul></blockquote><h5 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h5><ul><li><strong>装饰器模式</strong> 创建一个新类为某一个类动态添加新功能或增强原有的功能，避免代码重复或具体子类的数量增加</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Model/Decorator.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><strong>策略模式</strong> 优点：灵活添加同一问题的不同解决方案</li><li><strong>状态模式</strong> 允许对象在内部状态时变更其行为，并且修改其类：<ul><li>环境类（Context）：定义客户感兴趣的接口，维护一个子类的实例，这个实例就是当前状态</li><li>抽象状态类（State）：定义一个接口以封装与Context的一个特定状态相关的行为</li><li>具体状态类（concreteState）：每一子类实现与Context的一个状态相关的行为</li><li><strong>例题</strong>：纸巾售卖机:有四个状态!<ul><li>【状态图】</li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Model/State_zhijin.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>【类图】</li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Model/State_zhijin2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul></li><li><strong>例题</strong>：TCP连接状态:<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Model/State_TCP.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul></li><li><strong>命令模式 command</strong>：<ul><li>行为请求者 与 请求实现者 之间 紧耦合 的关系</li><li><strong>将一个请求封装成一个对象</strong>，从而可用不同的请求对客户进行参数化，支持可撤销的操作</li><li>下例：使用了接口来实现多态，子类是多个的，方法同名并功能多样的<ul><li>代码复用好，代码结构清晰【参数类表最好不要出现标志变量，最好分离出另一个方法】</li></ul></li></ul></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Model/Command.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><strong>桥接模式</strong> ： 便于扩展，实现与抽象分离（解耦）对一个模块修改不影响别的模块</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Model/Bridge.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><strong>抽象工厂模式</strong> ： 提供一个创建一系列相关实例相互依赖的对象。<ul><li>当一个系统要独立于它的产品的创建，组合和表示时</li><li>当一个系统要由多个产品系列中的一个来配置时</li><li>当需强调一系列相关的产品对象的设计以便进行联合使用时</li><li>想提供一组对象而不显示他们的实现过程，只显示他们的接口</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Model/AbstractFactory.png" alt=""></p><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><blockquote><p>struts2 就是采用该模式</p><ul><li><strong>原型模式</strong> ： 对象创建模型： 允许一个对象创建另一个可定制的对象，封装实例化细节。<ul><li>实现Cloneable接口（Java自带接口），重写clone方法（在这里实例化对象，new或反射，按需求来修改）</li><li>该例，组合关系，在对方使用clone来代替构造器来实例化对象，并做好了绑定操作，大量减少代码量</li></ul></li></ul></blockquote><p><img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Model/Clone.png" alt=""> </p><h4 id="生成器模式"><a href="#生成器模式" class="headerlink" title="生成器模式"></a>生成器模式</h4><ul><li><strong>生成器模式</strong>：</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Kuangcp/ImageRepos/master/Tech/Model/Builder.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="经验之谈"><a href="#经验之谈" class="headerlink" title="经验之谈"></a>经验之谈</h3><ul><li><a href="https://www.ibm.com/developerworks/cn/java/design/" target="_blank" rel="noopener">IBM 社区 Java 设计模式专题</a></li><li><a href="http://www.cnblogs.com/x-xk/archive/2012/12/21/2823401.html" target="_blank" rel="noopener">一个鸭子游戏引发的设计（多态，继承，抽象，接口，策略者模式）</a></li><li><p><a href="www.cnblogs.com/x-xk/archive/2013/01/06/2830742.html">不要再盲目的new了！你要学着针对接口编程！（具体方法，Factory，Abstract Factory</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/aGMz1u0Oh4ZHTDBFvgq0lg" target="_blank" rel="noopener">参考博客: 为什么我墙裂建议大家使用枚举来实现单例。</a></p></li><li style="list-style: none"><input type="checkbox"> 自己用Java重写一下这个例子, 并做出自己的总结</li></ul><p>反模式<br>末日金字塔: 多层嵌套</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#设计模式之禅&quot;&gt;设计模式之禅&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#软件设计的一些原则&quot;&gt;软件设计的一些原则&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#思维原则&quot;&gt;思维
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>why-put-netty-in-tomcat.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-MyBlog-why-put-netty-in-tomcat/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-MyBlog-why-put-netty-in-tomcat/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#为何要将netty放在tomcat下">为何要将Netty放在Tomcat下</a></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="为何要将Netty放在Tomcat下"><a href="#为何要将Netty放在Tomcat下" class="headerlink" title="为何要将Netty放在Tomcat下"></a>为何要将Netty放在Tomcat下</h1><blockquote><p>2018-03-19 17:41:28</p></blockquote><blockquote><p><a href="https://stackoverflow.com/questions/3194508/is-hosting-a-netty-server-inside-tomcat-feasible-desirable/3200624#3200624" target="_blank" rel="noopener">stackoverflow上的相关问题</a><br><a href="https://www.zhihu.com/question/21472041" target="_blank" rel="noopener">知乎相关提问</a><br><a href="https://bbs.csdn.net/topics/390763179" target="_blank" rel="noopener">Tomcat中如何使用netty的功能？</a><br><a href="http://blog.csdn.net/aishangyutian12/article/details/52251357" target="_blank" rel="noopener">netty导致tomcat假死</a><br><a href="https://www.zhihu.com/question/58796648" target="_blank" rel="noopener">tomcat为什么没有用netty作为底层通信框架？</a><br><a href="http://www.oschina.net/question/2762305_2191710" target="_blank" rel="noopener">请教，netty如何跟运行在tomcat中的web应用交互呢？ </a></p></blockquote><ul><li>然后我们老大就说 是因为Tomcat的环境具有一致性, 例如日志的方式以及日志文件的位置等等,<ul><li>因为是部署到甲方那边去, 所以不能由着自己性子来, 就不能用Docker来做环境的统一化部署了</li><li>日志的一些配置什么的,能够在部署的时候进行修改和切换</li></ul></li><li>例如运行环境<ul><li>感觉这个是最大的一个原因了, 因为甲方的电脑环境, 肯定都是乱七八糟什么玩意都有的, 对于我这个war来说的话, 只要有能正常运行的tomcat, 我就没有什么问题了</li><li>但是如果抛开Tomcat, 弄成jar运行, 就比较麻烦了(主要还是为了日志和启动脚本,emmm)</li></ul></li><li>还有就是为了使用丰富的协议, 例如Websocket Hybrid 等等, 就还是不能脱离Tomcat</li></ul><blockquote><p>　2018-06-23 21:01:11</p><ul><li>其实是可以直接将 Tomcat有关的依赖全部去除 Maven打包成jar, 配置下Main方法就能直接启动了, 而且资源消耗还少</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#为何要将netty放在tomcat下&quot;&gt;为何要将Netty放在Tomcat下&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;目录 end&lt;/strong&gt;|&lt;em&gt;201
      
    
    </summary>
    
      <category term="Blog" scheme="http://blog.kuangcp.top/categories/Blog/"/>
    
    
      <category term="问题" scheme="http://blog.kuangcp.top/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Blog.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Blog-Blog/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Blog-Blog/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#博客">博客</a><ol><li><a href="#个人博客网">个人博客网</a></li><li><a href="#博客能人">博客能人</a></li><li><a href="#专栏">专栏</a></li></ol></li><li><a href="#blog">【Blog】</a><ol><li><a href="#搭建博客">搭建博客</a></li><li><a href="#network">NetWork</a></li><li><a href="#经验之谈">经验之谈</a></li><li><a href="#操作系统">操作系统</a><ol><li><a href="#windows">Windows</a></li><li><a href="#linux">Linux</a></li><li><a href="#安卓">安卓</a></li></ol></li><li><a href="#web性能">Web性能</a></li><li><a href="#tool">Tool</a></li><li><a href="#团队开发">团队开发</a></li><li><a href="#毕业">毕业</a></li><li><a href="#生活">生活</a><ol><li><a href="#娱乐">娱乐</a></li><li><a href="#玩机">玩机</a></li></ol></li><li><a href="#商业">商业</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><blockquote><p>只用来记录非技术类的文章,技术类的直接放到对应的笔记中去<br><a href="/Blog/Java.md">Java相关</a> | <a href="/Blog/Go.md">Go相关</a> | <a href="/Blog/Python.md">Python相关</a> | <a href="/Blog/Solution.md">解决方案</a> | <a href="/Blog/View.md">前端相关</a> | <a href="/Blog/Server.md">服务器运维</a></p></blockquote><h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><h2 id="个人博客网"><a href="#个人博客网" class="headerlink" title="个人博客网"></a>个人博客网</h2><ul><li><a href="http://www.yinwang.org/" target="_blank" rel="noopener">王垠</a></li><li><a href="http://www.ciaoshen.com/" target="_blank" rel="noopener">ciaoshen</a><code>肉身翻墙? Java大佬</code></li><li><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">阮一峰</a><code>一个勤奋的布道者,Github每天都有提交</code></li><li><a href="https://coolshell.cn/" target="_blank" rel="noopener">酷壳</a><code>左耳朵耗子个人博客网 阿里架构师</code></li><li><a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序员DD</a><code>翟永超 Spring4all社区创立者</code></li><li><a href="http://ice1000.org/" target="_blank" rel="noopener">冰封千里</a><code>Javaer,JavaFX和JVM类语言擅长</code></li><li><a href="https://hushuang.me/" target="_blank" rel="noopener">hushuang.me</a></li><li><a href="http://my.csdn.net/Raptor" target="_blank" rel="noopener">猛禽</a> <code>一个坚持了17年博客的程序员</code></li><li><a href="https://xicheng412.github.io/" target="_blank" rel="noopener">折腾的创业者</a><code>大学生创业</code></li><li><a href="blog.weisiliang.com">David’s blog</a><code>Java程序员</code></li><li><a href="http://blog.leapoahead.com" target="_blank" rel="noopener">http://blog.leapoahead.com</a><code>经验之谈</code></li><li><p><a href="http://blog.exrick.cn/" target="_blank" rel="noopener">Java和Vue前后端</a></p></li><li><p><a href="https://imququ.com/" target="_blank" rel="noopener">Web程序猿</a></p></li><li><a href="http://letus.club/" target="_blank" rel="noopener">letus.club</a></li><li><a href="http://blog.51yip.com/" target="_blank" rel="noopener">海底苍鹰(tank)</a> <code>前端和Linux</code></li><li><a href="http://www.worldhello.net" target="_blank" rel="noopener">彭鑫</a><code>Git权威指南作者,Git比较熟练</code></li><li><p><a href="https://www.dogxu.cn" target="_blank" rel="noopener">Chenxu</a><code>使用Github page 以及Https 全免费搭建</code></p></li><li><p><a href="https://www.romeng.men/" target="_blank" rel="noopener">Romeng’s blog</a><code>edu邮箱,VPS等</code></p></li><li><p><a href="https://51.ruyo.net/" target="_blank" rel="noopener">如有乐享</a><code>突破限制的 教程资源比较多</code></p></li><li><p><a href="https://javablog.net/" target="_blank" rel="noopener">javabolg</a><code>nutz作者的博客</code></p></li><li><p><a href="http://cmsblogs.com/" target="_blank" rel="noopener">chenssy </a><code>技术较新 Java博客网</code></p></li><li><p><a href="https://zhongfucheng.bitcron.com/" target="_blank" rel="noopener">java3y</a><code>技术比较全面</code></p></li><li><p><a href="http://tengj.top/" target="_blank" rel="noopener">tengj</a><code>SpringBoot了解深入</code></p></li><li><p><a href="http://dreamlikes.cn/" target="_blank" rel="noopener">dreamlikes</a><code>Java后台开发</code></p></li><li><p><a href="http://www.tracefact.net/" target="_blank" rel="noopener">张子阳的博客</a> <code>有技术,有推荐的书</code></p></li><li><p><a href="https://blog.gmem.cc/" target="_blank" rel="noopener">绿色记忆</a> <code>技术涉猎广泛</code></p></li><li><p><a href="http://tengj.top/" target="_blank" rel="noopener">嘟嘟独立博客</a><code>SpringBoot系</code></p></li><li><a href="http://www.ityouknow.com/" target="_blank" rel="noopener">ityouknow</a><code>Java丰富技术栈 云收藏的开发者</code></li><li><a href="https://www.xncoding.com/" target="_blank" rel="noopener">会飞的污熊</a><code>github 搭建静态博客, 内容多</code></li><li><a href="https://yscoder.github.io/" target="_blank" rel="noopener">yscoder</a><code>indigo主题的作者 hexo</code></li><li><p><a href="https://xwjie.github.io/" target="_blank" rel="noopener">晓风轻技术小站</a><code>程序员你为什么这么累？ 作者</code></p></li><li><p><a href="http://www.saitjr.com/" target="_blank" rel="noopener">todo</a></p></li><li><a href="http://zhangtielei.com/" target="_blank" rel="noopener">张铁蕾</a><code>总结能力强</code></li><li><a href="http://zhangyi.xyz" target="_blank" rel="noopener">zhangyi</a><code>设计模式,TDD</code></li><li><a href="http://johng.cn/" target="_blank" rel="noopener">johng.cn</a><code>Docker,算法相关</code></li><li><a href="http://edaoe.com/Catch" target="_blank" rel="noopener">Catch</a><code>简单的小知识点</code></li><li><p><a href="http://www.importnew.com/" target="_blank" rel="noopener">importNew</a></p></li><li><p><a href="https://mritd.me/" target="_blank" rel="noopener">漠然</a><code>容器 kubernetes方面</code></p></li><li><a href="http://www.senra.me/" target="_blank" rel="noopener">senra</a> <code>服务器, 容器等方面</code><h2 id="博客能人"><a href="#博客能人" class="headerlink" title="博客能人"></a>博客能人</h2></li><li><a href="http://www.cnblogs.com/JeffreyZhao/" target="_blank" rel="noopener">赵劼</a> <code>对函数式编程，并行程序开发，代码之美以及程序员能力与修养等相关问题</code></li><li><a href="https://zhuanlan.zhihu.com/hinus" target="_blank" rel="noopener">进击的Java新人</a></li><li><a href="http://blog.csdn.net/sky_blue12321" target="_blank" rel="noopener">Java知音</a><code>较多面试题</code></li><li><a href="http://my.csdn.net/u011240877" target="_blank" rel="noopener">拭心</a><code>安卓大佬</code></li><li><a href="http://blog.csdn.net/haoel" target="_blank" rel="noopener">陈皓</a><code>左耳朵耗子</code></li><li><a href="http://blog.csdn.net/jiuqiyuliang" target="_blank" rel="noopener">于亮</a><code>Java相关知识,专栏挺多,阅读量都不低</code></li><li><a href="https://www.jianshu.com/u/ea4015fcb048" target="_blank" rel="noopener">BlindingDark</a><code>擅长函数式编程lisp clojure等</code></li><li><a href="http://www.cppblog.com/vczh/" target="_blank" rel="noopener">轮子哥博客</a></li><li><p><a href="http://zhangchuzhao.site/" target="_blank" rel="noopener">zhangchuzhao</a><code>有深度干货</code></p></li><li><p><a href="http://blog.sina.com.cn/s/articlelist_1228571733_0_1.html" target="_blank" rel="noopener">人月神话</a></p></li><li><a href="https://www.jianshu.com/u/28d7875c78df" target="_blank" rel="noopener">杜琪 </a><code>Java 服务端</code></li><li><p><a href="https://www.jianshu.com/u/092df3f77bca" target="_blank" rel="noopener">恒宇少年 </a></p></li><li><p><a href="http://www.cnblogs.com/wsdjeg/" target="_blank" rel="noopener">wsdjeg</a><code>SpaceVim作者</code></p></li></ul><hr><h2 id="专栏"><a href="#专栏" class="headerlink" title="专栏"></a>专栏</h2><ul><li><a href="http://blog.csdn.net/zsl129" target="_blank" rel="noopener">CSDN 知识林</a></li><li><a href="http://blog.csdn.net/column/details/13149.html" target="_blank" rel="noopener">三分钟教你学Git</a></li><li><a href="http://blog.csdn.net/column/details/zsxdesignpattern.html" target="_blank" rel="noopener">设计模式</a></li><li><a href="https://zhuanlan.zhihu.com/avcom" target="_blank" rel="noopener">网络安全</a></li></ul><hr><h1 id="【Blog】"><a href="#【Blog】" class="headerlink" title="【Blog】"></a>【Blog】</h1><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><ul><li><a href="https://www.zhihu.com/question/20463581" target="_blank" rel="noopener">知乎话题：如何搭建博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/28428463" target="_blank" rel="noopener">知乎专栏：使用Springboot搭建博客</a></li><li><a href="https://github.com/b3log/solo" target="_blank" rel="noopener">solo</a><code>博客系统 markdown</code></li><li><a href="https://github.com/henryyan/henryyan.github.com" target="_blank" rel="noopener">咖啡兔</a><code>现成的模板直接用md就能生成了</code></li><li><a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">Gitment：使用 GitHub Issues 搭建评论系统 </a></li></ul><h2 id="NetWork"><a href="#NetWork" class="headerlink" title="NetWork"></a>NetWork</h2><ul><li><a href="http://ju.outofmemory.cn/entry/154398" target="_blank" rel="noopener">使用清华的IPV6</a></li></ul><h2 id="经验之谈"><a href="#经验之谈" class="headerlink" title="经验之谈"></a>经验之谈</h2><ul><li><a href="http://blog.csdn.net/xishining/article/details/78824148" target="_blank" rel="noopener">不好的编程习惯</a></li><li><a href="http://www.kuqin.com/shuoit/20170328/353424.html?url_type=39&amp;object_type=webpage&amp;pos=1" target="_blank" rel="noopener">英语的重要性</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651000617&amp;idx=3&amp;sn=011ea30e9d5f6e23981de96abf5333e0&amp;chksm=bdbef77a8ac97e6cdcb41ef72a3e81999dd6824b92b2ff55faee67389603e4c15786f75abaa6&amp;scene=0&amp;pass_ticket=xEtnb7qdSF7n0ABekUAOd7ZvnGZEG4CRl%2Fv7FMPcnwqxkpyXNPaTqaVHo%2BKZ5B7H#rd" target="_blank" rel="noopener">正确的学习语言</a></li></ul><p>很多时候工程师们争论的问题，不再是对和错、是与否的问题，而是每个人的观点应用到相关的场景中的时候带来的优劣比较。也就是说，是不是把合适的技术用到了正确的场景中。平衡是我们在这个阶段要着重考虑的，这种平衡有时候是时间复杂度，有时候是空间复杂度。  </p><ol><li>初学者不要纠结“先学哪种语言”，这种时间花得很不值得，还不如随便挑一个语言，跳进去游几圈试试。对于工程师来说，学习第一门编程语言只是万里长征的第一步，只要你还在这个领域，就不可能只学一种语言，只会一种语言的工程师根本就不能称之为工程师。  </li><li>如果你不能用一种编程语言的基本特性写出好代码，那换成另外一种语言也无济于事，你会写出同样差的代码。比如，你的 Java 代码写得很糟糕，那么换成 Go、Ruby，你的代码也会一样糟糕，甚至更差。<br>所以，基本掌握了一门语言的功能和语法特性之后，要去做实践和练习，能写生产代码了，再回过头来去看编程语言的本质，了解这门编程语言的设计原理，能力边界和高级功能，这样有助于你更快更好掌握其他编程语言。</li><li>很多人觉得不要用脚本语言入门，我觉得不一定，尤其现在就着人工智能浪潮搞机器学习的人，用 Python 入门就很好。另外，脚本语言在面试中绝对占优势。平时工作中我对 Ruby、Python、C++、和 Java 的熟练程度差不多，但是面试中使用 Ruby 或者 Python 答题，写代码的时间估计是那两者的一半。  </li><li>后端工程师要熟练掌握一门前端语言，前端工程师也要熟练掌握一门后端语言。倒不是为了提倡全栈或多个能力储备，而是两者的编程思维模式很不一样。知己知彼，在架构设计和解决具体问题时，才会有更精确的判断。另外，现在大前端的概念也比较流行，也就是大前端工程师能够同时掌握 Web 编程语言、iOS 和 Android 编程语言，原生技术（iOS 和 Android）和 Web 的配合会越来越紧密。</li><li>SQL 是一门非常非常重要并且应该熟练掌握的语言（虽然它不能被称为程序语言），我在这里用了两个非常，因为很多工程师有些过于轻视 SQL 了，并为此付出了惨重的代价。<br>如果你平时的编程工作涉及到业务功能，而不是纯粹的技术架构，一定会使用到数据库。SQL 就是数据的语言，通过它你可以和数据建立连接和沟通。如果你的数据访问模式写得很差，轻则代码性能一塌糊涂，重则引发 Bug，而涉及数据的问题，Bug 等级都比较高，后果可能很严重。  </li><li>无论使用什么语言，工程师都应该能够基于这种语言搭建测试框架，写好测试代码和写业务代码一样重要，甚至更重要。工作后你会发现，可能有时候我们只花五分钟写了一个程序，而为其写一个差不多能够覆盖所有功能路径的测试用例集却花了一个小时。  </li><li>最后的，也是最重要的是：在任何时候都要用并发的、分布式的思维去看待你的程序。因为竞争条件或者并发中的不确定因素（比如调用顺序）导致的 Bug，仅仅理解语言的基本特性，根本不能解释。每种语言都有自己的并发编程模式（比如 Go 的 Goroutine，Java 的 ForkJoinPool，Swift 的 Swift Grand Central Dispatch 等）。学习每一种语言，都应该去深入了解它的并发模型，在这个多核的时代，不懂并发的程序员不可能是个好工程师。  <blockquote><blockquote><p>最近几年我主要使用 Ruby 和 Java 编程，这两门语言的优缺点就不在这里说了，网上有很多类似的观点。如果你还不知道应该学习哪一门编程语言，那么就从 Java 开始吧。<br>编程语言，你看它是山，它就是山；看它是水，它就是水。你可以把它当做一门简单的编程语言，有语法，有特性，也有优缺点，但这样的语言也可以复杂到去实现和解释各种计算模型和理论。一门编程语言到底能做什么，完全和工程师怎么去用，在什么场景中用息息相关。  </p></blockquote></blockquote></li></ol><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513596&amp;idx=1&amp;sn=558756b6fa77c7a86370f41fa7cde732&amp;chksm=80d67a3fb7a1f329bfb3bfa9a3eb07ae21b19501cb895a0754c18ffbe26bf92029d6266f1845&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">码农翻身:这个动物园， 两年也逛不完</a></li><li><a href="http://www.codeceo.com/article/what-will-kill-java.html" target="_blank" rel="noopener">谁将会杀死 Java？</a></li></ul><p><em>如何将脑海中的思维火花转化为代码</em></p><blockquote><p>先把流程大致想清楚，在 main() 中写下大致的调用结构,不一定要实现每个细节，可以先用函数分装起来。实现最少的功能，之后再想怎么改进，加功能；这个过程也可以检验一开始写下来的代码是不是具备可拓展性。<br>比如用 js 做日历，可以先实现一个只能打印字符串日历的版本（这涉及到日期的计算，简单格式化输出），然后思考怎么把字符串适配到 html 上？或者服务端的话输出为 json ？<br>或者其实可以跳过序列化这一步？等等。可以学习一下 TDD ，一边写代码一边写测试，切忌自以为思考完所有细节一气呵成实现完毕，这样的话基本上写代码：调试找 bug = 1:10</p></blockquote><hr><blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3OTYxOTU4NA==&amp;mid=2247483877&amp;idx=1&amp;sn=bf8d6078770992004e7ac10e606112c7&amp;chksm=fd621f8aca15969c2094683eb3d233f6e98ebda1028ce57081faef013f02e742c57c21f6a919&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">参考博客: 2018开发者技能报告，让你更了解自己的行业。</a></p></blockquote><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li><a href="http://www.jianshu.com/p/86dd6e34ce91" target="_blank" rel="noopener">Ubuntu放弃战斗, Linux桌面的悲哀</a><code>deepin王总</code></li><li><a href="https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=134241&amp;extra=" target="_blank" rel="noopener">一些工具软件</a></li><li><a href="http://blog.csdn.net/adparking/article/details/6684690" target="_blank" rel="noopener">关于uptime输出的详解</a></li><li><a href="https://www.linuxidc.com/Linux/2016-04/129764.htm" target="_blank" rel="noopener">Ubuntu安装我的世界</a></li></ul><h3 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a>安卓</h3><blockquote><p><a href="http://www.ruanyifeng.com/blog/2010/02/open_android_or_not.html" target="_blank" rel="noopener">Android，开源还是封闭？</a></p></blockquote><hr><h2 id="Web性能"><a href="#Web性能" class="headerlink" title="Web性能"></a>Web性能</h2><ul><li><a href="https://ruby-china.org/topics/13870" target="_blank" rel="noopener">ab: Apache Benchmark 的使用的个人浅薄经验</a></li><li><a href="http://www.cnblogs.com/zikai/p/4971426.html" target="_blank" rel="noopener">1M带宽的服务器并发问题</a></li></ul><hr><h2 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h2><ul><li><a href="http://blog.csdn.net/c_s_d_n_luckyq/article/details/48437789" target="_blank" rel="noopener">genymotion 4.2.2 windows版</a></li><li><a href="http://www.cnblogs.com/wangchaoyuana/p/7507504.html" target="_blank" rel="noopener">使用gitbook打造电子书</a></li><li><a href="https://zhuanlan.zhihu.com/p/22641748" target="_blank" rel="noopener">免费SSL证书获取</a></li><li><a href="https://imququ.com/post/letsencrypt-certificate.html" target="_blank" rel="noopener">免费HTTPS证书</a></li></ul><hr><h2 id="团队开发"><a href="#团队开发" class="headerlink" title="团队开发"></a>团队开发</h2><ul><li><a href="http://www.cnblogs.com/foundation/archive/2009/10/17/1584875.html" target="_blank" rel="noopener">团队开发工作流项目</a></li><li><a href="http://www.techug.com/post/when_someone_gives_you_a_bug.html" target="_blank" rel="noopener">参考博客: 有人向我反馈了一个bug</a></li></ul><hr><h2 id="毕业"><a href="#毕业" class="headerlink" title="毕业"></a>毕业</h2><ul><li><a href="http://biyelunwen.yjbys.com/dabian/" target="_blank" rel="noopener">开题答辩的礼貌性注意事项</a></li><li><a href="http://blog.csdn.net/h3243212/article/details/78132994" target="_blank" rel="noopener">如何准备校招技术面试</a></li><li><a href="http://www.cnkis.net/html/970548227.html" target="_blank" rel="noopener">知网毕业论文查重有关</a></li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ul><li><a href="https://mp.weixin.qq.com/s/ZGDMod70iQMM7O2asx61Eg" target="_blank" rel="noopener">那些拿命换钱的年轻人，换着换着就死了</a><ul><li><a href="http://www.ituring.com.cn/article/497314" target="_blank" rel="noopener">相关书籍</a></li></ul></li><li><p><a href="https://www.zhihu.com/question/57200773/answer/273681090?group_id=923124272622088192" target="_blank" rel="noopener">土木真的没有 IT 行业有前途吗？</a><code>每一行都不容易！</code></p></li><li><p><a href="http://blog.csdn.net/u011240877/article/details/78967014" target="_blank" rel="noopener">我的 2017 ：追逐更好未来的一年 </a></p></li><li><a href="http://blog.csdn.net/IMbRl71u7pt5X29rlEu7/article/details/78746265" target="_blank" rel="noopener">《程序员的成长课》:少走5年弯路</a></li><li><a href="http://www.ruanyifeng.com/blog/essays/" target="_blank" rel="noopener">阮一峰的随笔</a></li><li><a href="http://www.cnblogs.com/bluedoctor/archive/2013/04/30/3051418.html#C5" target="_blank" rel="noopener">业务分析三维度（场景+角色+时间）之程序员坐禅论道</a></li></ul><h3 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h3><h3 id="玩机"><a href="#玩机" class="headerlink" title="玩机"></a>玩机</h3><blockquote><p><a href="https://cn.club.vmall.com/forum.php?mod=viewthread&amp;tid=16067108" target="_blank" rel="noopener">华为全面屏手势</a></p></blockquote><h2 id="商业"><a href="#商业" class="headerlink" title="商业"></a>商业</h2><ul><li><a href="http://daily.zhihu.com/story/4826947" target="_blank" rel="noopener">都说在做某界的 Airbnb，Airbnb 到底做了什么</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#博客&quot;&gt;博客&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#个人博客网&quot;&gt;个人博客网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#博客能人&quot;&gt;博客能人&lt;/a&gt;&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OraclePerformances.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Database-OraclePerformances/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Database-OraclePerformances/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#1oracle的体系结构">1.Oracle的体系结构</a><ol><li><a href="#因为太详细但是没有一个给出各个模块之间的关系显得特别凌乱所以还要参考大二下的书">因为太详细，但是没有一个给出各个模块之间的关系，显得特别凌乱，所以还要参考大二下的书</a></li><li><a href="#内存讲解">内存讲解</a></li><li><a href="#oracle服务器--=-实例+进程">Oracle服务器  = 实例+进程</a></li><li><a href="#oracle实例">Oracle实例</a></li><li><a href="#数据库的文件">数据库的文件：</a></li><li><a href="#与实例的连接">与实例的连接</a></li><li><a href="#连接方式">连接方式</a></li><li><a href="#一个服务器进程就拥有单独的不共享的pga-程序全局区">一个服务器进程就拥有单独的不共享的PGA 程序全局区</a></li><li><a href="#共享池">共享池</a><ol><li><a href="#数据库高速缓冲区">数据库高速缓冲区</a></li><li><a href="#内存缓冲区顾问">内存缓冲区顾问</a></li><li><a href="#重做日志缓冲区">重做日志缓冲区</a></li><li><a href="#大池和java池">大池和Java池</a></li><li><a href="#内存缓冲区">内存缓冲区</a></li></ol></li></ol></li><li><a href="#2">2.</a></li><li><a href="#3oracle实例的管理">3.Oracle实例的管理</a><ol><li><a href="#初始化参数文件">初始化参数文件</a><pre><code>1. [内容 ：](#内容-)</code></pre><ol><li><a href="#静态参数文件-（文本文件）">静态参数文件 （文本文件）</a></li><li><a href="#动态参数文件-（二进制文件）">动态参数文件 （二进制文件）</a></li></ol></li><li><a href="#36-启动数据库">3.6 启动数据库</a></li><li><a href="#37-将数据库设为限制模式（杀死普通用户利于维护）">3.7 将数据库设为限制模式（杀死普通用户，利于维护）</a></li><li><a href="#39-关闭数据库的四种方式">3.9 关闭数据库的四种方式：</a></li></ol></li><li><a href="#4-数据字典和控制文件">4 数据字典和控制文件</a><ol><li><a href="#数据字典简介">数据字典简介</a></li><li><a href="#数据字典中存放的信息">数据字典中存放的信息</a></li><li><a href="#数据字典部分使用">数据字典部分使用</a></li><li><a href="#动态视图v$开头">动态视图(v$开头)</a></li><li><a href="#移动控制文件的示例">移动控制文件的示例</a></li></ol></li><li><a href="#5重做日志文件">5.重做日志文件</a><ol><li><a href="#52-重做日志组">5.2 重做日志组</a></li><li><a href="#55-获取重做日志的信息">5.5 获取重做日志的信息</a></li><li><a href="#511-重做日志应用示例">5.11 重做日志应用示例</a><pre><code>1. [1.添加重做日志组](#1添加重做日志组)1. [2.重建原有的group 3（不活动状态）](#2重建原有的group-3（不活动状态）)1. [3.强制切换日志组 将当前组（group 1）多切换几次成inactive状态时再删除](#3强制切换日志组-将当前组（group-1）多切换几次成inactive状态时再删除)1. [4.操作原本的当前组，删除group 1 再添加1 不能修改1](#4操作原本的当前组删除group-1-再添加1-不能修改1)</code></pre></li><li><a href="#6表空间和数据文件的管理">6.表空间和数据文件的管理</a><ol><li><a href="#65-创建本地管理的表空间">6.5 创建本地管理的表空间</a><ol><li><a href="#查询">查询</a></li></ol></li><li><a href="#68-默认临时表空间">6.8 默认临时表空间</a></li><li><a href="#69-设置表空间脱机">6.9 设置表空间脱机</a></li><li><a href="#610-设置只读表空间">6.10 设置只读表空间</a><ol><li><a href="#611-重置表空间的大小">6.11 重置表空间的大小</a></li><li><a href="#613-移动数据文件的方法">6.13 移动数据文件的方法</a><ol><li><a href="#方法一">方法一：</a></li><li><a href="#方法二">方法二：</a></li></ol></li></ol></li></ol></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="1-Oracle的体系结构"><a href="#1-Oracle的体系结构" class="headerlink" title="1.Oracle的体系结构"></a>1.Oracle的体系结构</h1><h2 id="因为太详细，但是没有一个给出各个模块之间的关系，显得特别凌乱，所以还要参考大二下的书"><a href="#因为太详细，但是没有一个给出各个模块之间的关系，显得特别凌乱，所以还要参考大二下的书" class="headerlink" title="因为太详细，但是没有一个给出各个模块之间的关系，显得特别凌乱，所以还要参考大二下的书"></a>因为太详细，但是没有一个给出各个模块之间的关系，显得特别凌乱，所以还要参考大二下的书</h2><h2 id="内存讲解"><a href="#内存讲解" class="headerlink" title="内存讲解"></a>内存讲解</h2><pre><code>理解计算机的基本知识</code></pre><h2 id="Oracle服务器-实例-进程"><a href="#Oracle服务器-实例-进程" class="headerlink" title="Oracle服务器  = 实例+进程"></a>Oracle服务器  = 实例+进程</h2><h2 id="Oracle实例"><a href="#Oracle实例" class="headerlink" title="Oracle实例"></a>Oracle实例</h2><ul><li>有5个必须的后台进程：SMON PMON DBWR LGWR CKPT</li></ul><h2 id="数据库的文件："><a href="#数据库的文件：" class="headerlink" title="数据库的文件："></a>数据库的文件：</h2><ul><li>控制文件</li><li>重做日志文件</li><li>数据文件</li><li>初始化参数文件</li><li>密码文件</li><li>归档重做日志文件</li></ul><h2 id="与实例的连接"><a href="#与实例的连接" class="headerlink" title="与实例的连接"></a>与实例的连接</h2><ul><li>输入用户名和密码，就是一个用户进程，通过用户进程连接服务器进程，再连接到Oracle数据库上</li><li>一个用户可以同时拥有多个会话（用一套帐号登录多次）</li></ul><h2 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h2><ul><li>基于主机 本地模式</li><li>客户端 - 服务器模式</li><li>客户端 - 应用服务器 - 服务器</li></ul><h2 id="一个服务器进程就拥有单独的不共享的PGA-程序全局区"><a href="#一个服务器进程就拥有单独的不共享的PGA-程序全局区" class="headerlink" title="一个服务器进程就拥有单独的不共享的PGA 程序全局区"></a>一个服务器进程就拥有单独的不共享的PGA 程序全局区</h2><ul><li>排序区</li><li>Cursor状态区</li><li>会话信息区</li><li>堆栈区</li></ul><h2 id="共享池"><a href="#共享池" class="headerlink" title="共享池"></a>共享池</h2><ul><li>库高速缓存区（存放共享的SQL代码） LRU（least recently used）</li><li>数据字典高速缓存区</li></ul><h3 id="数据库高速缓冲区"><a href="#数据库高速缓冲区" class="headerlink" title="数据库高速缓冲区"></a>数据库高速缓冲区</h3><h3 id="内存缓冲区顾问"><a href="#内存缓冲区顾问" class="headerlink" title="内存缓冲区顾问"></a>内存缓冲区顾问</h3><h3 id="重做日志缓冲区"><a href="#重做日志缓冲区" class="headerlink" title="重做日志缓冲区"></a>重做日志缓冲区</h3><h3 id="大池和Java池"><a href="#大池和Java池" class="headerlink" title="大池和Java池"></a>大池和Java池</h3><h3 id="内存缓冲区"><a href="#内存缓冲区" class="headerlink" title="内存缓冲区"></a>内存缓冲区</h3><hr><h1 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h1><h1 id="3-Oracle实例的管理"><a href="#3-Oracle实例的管理" class="headerlink" title="3.Oracle实例的管理"></a>3.Oracle实例的管理</h1><h2 id="初始化参数文件"><a href="#初始化参数文件" class="headerlink" title="初始化参数文件"></a>初始化参数文件</h2><ul><li>pfile 静态参数文件（文本文件） 文件名： initSID.ora</li><li>spfile 动态参数文件（二进制文件）文件名：spfileSID.ora</li></ul><h4 id="内容-："><a href="#内容-：" class="headerlink" title="内容 ："></a>内容 ：</h4><h3 id="静态参数文件-（文本文件）"><a href="#静态参数文件-（文本文件）" class="headerlink" title="静态参数文件 （文本文件）"></a>静态参数文件 （文本文件）</h3><h3 id="动态参数文件-（二进制文件）"><a href="#动态参数文件-（二进制文件）" class="headerlink" title="动态参数文件 （二进制文件）"></a>动态参数文件 （二进制文件）</h3><h2 id="3-6-启动数据库"><a href="#3-6-启动数据库" class="headerlink" title="3.6 启动数据库"></a>3.6 启动数据库</h2><p>startup <strong>[force]</strong>[restrict]<strong>[pfile=文件名]</strong><br>[ <strong>open[recover][database]</strong> | mount | <strong>nomount</strong>]</p><h2 id="3-7-将数据库设为限制模式（杀死普通用户，利于维护）"><a href="#3-7-将数据库设为限制模式（杀死普通用户，利于维护）" class="headerlink" title="3.7 将数据库设为限制模式（杀死普通用户，利于维护）"></a>3.7 将数据库设为限制模式（杀死普通用户，利于维护）</h2><p>startup restrict 限制模式的启动<br>alter system enable restricted session 将已运行的实例切换成限制模式<br>alter system kill session 杀死用户进程</p><h2 id="3-9-关闭数据库的四种方式："><a href="#3-9-关闭数据库的四种方式：" class="headerlink" title="3.9 关闭数据库的四种方式："></a>3.9 关闭数据库的四种方式：</h2><ul><li>A shutdown abort 强制停库，启动需要做数据库恢复</li><li>I shutdown immediate 中断事务，中断会话，关闭文件，启动需要恢复事务</li><li>T shutdown transactional 中断会话，等待事务关闭，关闭文件</li><li>N shutdown normal 等待会话，事务关闭，关闭文件</li></ul><h1 id="4-数据字典和控制文件"><a href="#4-数据字典和控制文件" class="headerlink" title="4 数据字典和控制文件"></a>4 数据字典和控制文件</h1><h2 id="数据字典简介"><a href="#数据字典简介" class="headerlink" title="数据字典简介"></a>数据字典简介</h2><ul><li>数据字典是一组只读的系统表（AUD$开头的是可修改的），数据字典中存放了有关数据库和数据库对象的信息</li></ul><h2 id="数据字典中存放的信息"><a href="#数据字典中存放的信息" class="headerlink" title="数据字典中存放的信息"></a>数据字典中存放的信息</h2><ul><li>数据库的逻辑结构和物理结构</li><li>所有数据库对象定义的信息</li><li>所有数据库对象的磁盘空间分配的信息</li><li>Oracle用户名</li><li>每个用户被授予的权限和角色</li><li>完整性约束的信息</li><li>列的默认值</li><li>审计信息</li></ul><h2 id="数据字典部分使用"><a href="#数据字典部分使用" class="headerlink" title="数据字典部分使用"></a>数据字典部分使用</h2><ul><li>user_tables </li><li>all_tables</li><li>user_catalog / cat</li></ul><h2 id="动态视图-v-开头"><a href="#动态视图-v-开头" class="headerlink" title="动态视图(v$开头)"></a>动态视图(v$开头)</h2><ul><li><h2 id="移动控制文件的示例"><a href="#移动控制文件的示例" class="headerlink" title="移动控制文件的示例"></a>移动控制文件的示例</h2></li><li>查看当前位置： select * from v$controlfile;</li><li>修改数据库的参数文件映射到目标地址：alter system set contro_files=’路径1’,’路径2’ scope=spfile;</li><li>停库 shutdown immediate</li><li>使用命令复制 host copy ‘原地址’ ‘目标地址’ 或者直接快捷键</li><li>启动数据库，再查看控制文件的位置</li></ul><h1 id="5-重做日志文件"><a href="#5-重做日志文件" class="headerlink" title="5.重做日志文件"></a>5.重做日志文件</h1><h2 id="5-2-重做日志组"><a href="#5-2-重做日志组" class="headerlink" title="5.2 重做日志组"></a>5.2 重做日志组</h2><ul><li>Oracle至少需要两个重做日志文件组（每个组最少一个重做日志文件）</li><li>重做日志写进程只能同时写一个组，写是循环写的<ul><li>写满一个就切换下一个，写满的这个组就会复制到归档日志里保存</li><li>称为两级日志结构</li></ul></li></ul><h2 id="5-5-获取重做日志的信息"><a href="#5-5-获取重做日志的信息" class="headerlink" title="5.5 获取重做日志的信息"></a>5.5 获取重做日志的信息</h2><ul><li>重做日志组：</li><li>select group#,sequence#,members,bytes,status,archived from v$log;</li><li>重做日志组成员：</li><li>select group#,status,type,member from v$logfile;</li></ul><hr><h2 id="5-11-重做日志应用示例"><a href="#5-11-重做日志应用示例" class="headerlink" title="5.11 重做日志应用示例"></a>5.11 重做日志应用示例</h2><ul><li>select * from v$logfile; 查看日志的状态</li></ul><h4 id="1-添加重做日志组"><a href="#1-添加重做日志组" class="headerlink" title="1.添加重做日志组"></a>1.添加重做日志组</h4><ul><li>alter database add logfile(‘F:\DB\Oracle\Data\Log\REDO04A.log’,’F:\DB\Oracle\Data\Log\REDO04B.log’)size 10m;</li></ul><h4 id="2-重建原有的group-3（不活动状态）"><a href="#2-重建原有的group-3（不活动状态）" class="headerlink" title="2.重建原有的group 3（不活动状态）"></a>2.重建原有的group 3（不活动状态）</h4><ul><li>alter database drop logfile group 3;</li><li>alter database add logfile group 3(‘F:\DB\Oracle\Data\Log\REDO03A.log’,<br>‘F:\DB\Oracle\Data\Log\REDO03B.log’,’F:\DB\Oracle\Data\Log\REDO03C.log’)size 15m;</li></ul><h4 id="3-强制切换日志组-将当前组（group-1）多切换几次成inactive状态时再删除"><a href="#3-强制切换日志组-将当前组（group-1）多切换几次成inactive状态时再删除" class="headerlink" title="3.强制切换日志组 将当前组（group 1）多切换几次成inactive状态时再删除"></a>3.强制切换日志组 将当前组（group 1）多切换几次成inactive状态时再删除</h4><p>alter system switch logfile;</p><h4 id="4-操作原本的当前组，删除group-1-再添加1-不能修改1"><a href="#4-操作原本的当前组，删除group-1-再添加1-不能修改1" class="headerlink" title="4.操作原本的当前组，删除group 1 再添加1 不能修改1"></a>4.操作原本的当前组，删除group 1 再添加1 不能修改1</h4><ul><li>alter database drop logfile group 1;</li><li>alter database add logfile group 1(‘F:\DB\Oracle\Data\Log\REDO01A.log’,<br>‘F:\DB\Oracle\Data\Log\REDO01B.log’,’F:\DB\Oracle\Data\Log\REDO01C.log’)size 15m;</li></ul><hr><h2 id="6-表空间和数据文件的管理"><a href="#6-表空间和数据文件的管理" class="headerlink" title="6.表空间和数据文件的管理"></a>6.表空间和数据文件的管理</h2><h3 id="6-5-创建本地管理的表空间"><a href="#6-5-创建本地管理的表空间" class="headerlink" title="6.5 创建本地管理的表空间"></a>6.5 创建本地管理的表空间</h3><ul><li>create tablespace 名字 </li><li>datafile ‘’ size 50m,’’ size 30m </li><li>extent management local </li><li>uniform size 1m;</li></ul><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><ul><li>select tablespace_name,block_size,extent_management,segment_space_management from dba_tablespaces</li><li>where tablespace_name like ‘myth%’;</li></ul><h3 id="6-8-默认临时表空间"><a href="#6-8-默认临时表空间" class="headerlink" title="6.8 默认临时表空间"></a>6.8 默认临时表空间</h3><ul><li>oracle 是默认的temp表空间</li><li>修改： alter database default temporary tablespace myth_temp;</li><li><strong>注意</strong>：数据库只有一个默认的临时表空间，要根据实际需要来调整</li></ul><h3 id="6-9-设置表空间脱机"><a href="#6-9-设置表空间脱机" class="headerlink" title="6.9 设置表空间脱机"></a>6.9 设置表空间脱机</h3><ul><li>alter tablespace myth offline;</li></ul><h3 id="6-10-设置只读表空间"><a href="#6-10-设置只读表空间" class="headerlink" title="6.10 设置只读表空间"></a>6.10 设置只读表空间</h3><ul><li>alter tablespace myth read only ;</li><li>alter tablespace myth read write; 正常状态</li></ul><h4 id="6-11-重置表空间的大小"><a href="#6-11-重置表空间的大小" class="headerlink" title="6.11 重置表空间的大小"></a>6.11 重置表空间的大小</h4><ul><li>数据字典管理的表空间：<ul><li>alter tablespace 名 [minimum extent 2[k|m]] | [default 存储子句]</li></ul></li><li>本地管理的表空间：<ul><li>不能更改存储设置，但是可以重置大小：</li><li>改变数据文件的大小<ul><li>创建表空间时使用autoextent on 自动改变数据文件的大小</li><li>在创建表空间之后，使用带有autoextent on 选项的alter database 命令手动开启自动扩展功能</li></ul></li><li>使用alter tablespace 添加数据文件 </li></ul></li></ul><hr><ul><li>自动扩展<ul><li>alter database datafile ‘’ autoextent on next 1m;</li></ul></li><li>手动重置数据文件大小<ul><li>alter database datafile ‘’ resize 100m;</li></ul></li><li>添加数据文件<ul><li>alter tablespace myth add datafile ‘’ size 80m;</li></ul></li></ul><h4 id="6-13-移动数据文件的方法"><a href="#6-13-移动数据文件的方法" class="headerlink" title="6.13 移动数据文件的方法"></a>6.13 移动数据文件的方法</h4><h5 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h5><p>该语句适用于没有活动的还原数据或者是临时段的非系统表空间中的数据文件，使用语句中表空间必须是脱机且目标数据文件必须存在</p><ul><li>alter tablespace 表空间名 rename datafile ‘’[,’’] to ‘’[,’’]<ul><li>1.使用数据字典查询所需信息</li><li>2.将表空间置为脱机</li><li>3.使用命令或操作系统移动或复制数据文件</li><li>4.执行alter tablespace…. 命令</li><li>5.将表空间联机</li><li>6.使用数据字典查询信息</li><li>7.使用操作系统删除无用的文件</li></ul></li></ul><h5 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h5><p>该语句适用于系统表空间和不能置为脱机的表空间的数据文件，要求使用该语句时数据库处于mount状态</p><ul><li>alter database 数据库名 rename file ‘’[,’’] to ‘’[,’’]<ul><li>1.使用数据字典查询信息</li><li>2.关闭数据库</li><li>3.使用命令或操作系统移动或复制文件</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#1oracle的体系结构&quot;&gt;1.Oracle的体系结构&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#因为太详细但是没有一个给出各个模块之间的关系显得特别凌乱所以还要参考大二下的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redis.md</title>
    <link href="http://blog.kuangcp.top/2018/12/13/Memo-Database-Redis/"/>
    <id>http://blog.kuangcp.top/2018/12/13/Memo-Database-Redis/</id>
    <published>2018-12-13T11:53:28.399Z</published>
    <updated>2018-12-13T11:53:28.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 start</strong></p><ol><li><a href="#redis">Redis</a></li><li><a href="#book">Book</a></li><li><a href="#安装和配置">安装和配置</a><ol><li><a href="#windows">Windows</a></li><li><a href="#linux">Linux</a><ol><li><a href="#docker安装redis">docker安装redis</a></li><li><a href="#命令安装">命令安装</a></li><li><a href="#解压即用">解压即用</a></li></ol></li><li><a href="#redis配置文件">Redis配置文件</a></li></ol></li><li><a href="#数据类型">数据类型</a><ol><li><a href="#字符串string">字符串String</a></li><li><a href="#列表list">列表List</a></li><li><a href="#集合set">集合Set</a></li><li><a href="#有序集合zset">有序集合Zset</a></li><li><a href="#散列hash">散列Hash</a></li><li><a href="#hyperloglog">HyperLogLog</a></li><li><a href="#geo地理位置">GEO地理位置</a></li></ol></li><li><a href="#pubsub发布和订阅">Pub/Sub发布和订阅</a></li><li><a href="#编程语言的使用">编程语言的使用</a><ol><li><a href="#java使用">Java使用</a></li><li><a href="#python使用">Python使用</a></li></ol></li><li><a href="#project">Project</a><ol><li><a href="#webdis">webdis</a></li></ol></li></ol><p><strong>目录 end</strong>|<em>2018-12-13 12:06</em>| <a href="https://gitee.com/gin9" target="_blank" rel="noopener">码云</a> | <a href="http://blog.csdn.net/kcp606" target="_blank" rel="noopener">CSDN</a> | <a href="https://my.oschina.net/kcp1104" target="_blank" rel="noopener">OSChina</a> | <a href="http://www.cnblogs.com/kuangcp" target="_blank" rel="noopener">cnblogs</a></p><hr><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><blockquote><p><a href="https://redis.io/" target="_blank" rel="noopener">Official Site</a> | <a href="http://www.redis.cn/" target="_blank" rel="noopener">Redis中文社区</a> | <a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">Redis教程</a> </p></blockquote><ul><li><a href="http://redisdoc.com/index.html" target="_blank" rel="noopener">Redis Official doc zh</a></li></ul><h1 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h1><blockquote><p><a href="http://www.shouce.ren/api/view/a/13483" target="_blank" rel="noopener">Redis设计与实现 第二版</a></p></blockquote><h1 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ul><li>注册为服务<ul><li><code>redis-server --service-install redis.windows.conf --loglevel verbose</code></li></ul></li><li>使用cmder<ul><li>cmd 中运行 <code>E:/redis/redis-server.exe E:/redis/redis.windows.conf</code></li></ul></li><li>配置密码<ul><li><code>requirepass redis1104</code></li><li>客户端登录 <code>auth redis1104</code></li></ul></li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h3><blockquote><p><a href="/Linux/Container/DockerSoft.md#redis">docker-install-redis</a></p></blockquote><h3 id="命令安装"><a href="#命令安装" class="headerlink" title="命令安装"></a>命令安装</h3><blockquote><p>这样不太好做多个redis, 个人不喜欢这种方式</p></blockquote><ul><li>安装 <code>apt install redis</code></li><li>开启数据库服务 <code>redis-server</code></li><li>打开客户端 <code>redis-cli</code></li></ul><h3 id="解压即用"><a href="#解压即用" class="headerlink" title="解压即用"></a>解压即用</h3><blockquote><p><a href="https://github.com/Kuangcp/Configs/tree/master/Database/redis" target="_blank" rel="noopener">下载我打包好的(仅适用于Linux平台)</a><br><a href="https://bin-1253378665.cos.ap-guangzhou.myqcloud.com/redis/redis-5.0.0.tar.gz" target="_blank" rel="noopener">5.0.0</a>  | <a href="http://cloud.kuangcp.top/redis-4.0.2.zip" target="_blank" rel="noopener">4.0.2</a> | <a href="http://cloud.kuangcp.top/redis-3.2.8.zip" target="_blank" rel="noopener">3.2.8</a></p></blockquote><p><code>个人配置步骤:</code></p><ol><li>从源码编译: 官网下载源码，src下执行<code>make</code>进行编译，编译完成后，复制src目录中的<code>redis-cli redis-server</code>就可以用了，<code>redis-benchmark</code> 可选，测性能</li><li>配置文件: 再复制下面的简化配置文件，或者使用源码中根目录下的配置文件自己配置下<ul><li><a href="https://raw.githubusercontent.com/Kuangcp/Configs/master/Database/redis/simple_redis.conf" target="_blank" rel="noopener">简化配置文件</a></li></ul></li><li>再创建以下两个脚本就可以便捷的使用redis了</li></ol><p><code>server_redis.sh</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">basepath=$(<span class="built_in">cd</span> `dirname <span class="variable">$0</span>`; <span class="built_in">pwd</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$basepath</span></span><br><span class="line"><span class="variable">$basepath</span>/redis-server <span class="variable">$basepath</span>/redis.conf&gt;redis.log &amp;</span><br></pre></td></tr></table></figure></p><p><code>client_redis.sh</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">basepath=$(<span class="built_in">cd</span> `dirname <span class="variable">$0</span>`; <span class="built_in">pwd</span>)</span><br><span class="line"><span class="variable">$basepath</span>/redis-cli -p 6379</span><br></pre></td></tr></table></figure></p><hr><h2 id="Redis配置文件"><a href="#Redis配置文件" class="headerlink" title="Redis配置文件"></a>Redis配置文件</h2><ul><li><p><a href="https://github.com/Kuangcp/Configs/blob/master/Database/redis/explain_redis.conf" target="_blank" rel="noopener">配置文件讲解</a> | <a href="https://github.com/Kuangcp/Configs/blob/master/Database/redis/redis.conf" target="_blank" rel="noopener">原始配置文件</a></p></li><li><p><code>使用ing</code><a href="https://github.com/Kuangcp/Configs/blob/master/Database/redis/simple_redis.conf" target="_blank" rel="noopener">简化配置文件</a> </p></li></ul><hr><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><blockquote><p><a href="http://redisdoc.com/index.html" target="_blank" rel="noopener">社区: 中文文档</a></p></blockquote><h2 id="字符串String"><a href="#字符串String" class="headerlink" title="字符串String"></a>字符串String</h2><blockquote><p>字符串就是字节组成的序列 可以放字节串，整数，浮点数</p></blockquote><ul><li><code>set key newval nx</code>存在则set失败</li><li><code>set key newval xx</code>不存在则set失败</li><li><code>incr incrby decr decrby</code>  只要存入的String能被解析为数值,就能执行这些命令: 递增或者递减</li><li><code>incr</code> 是原子操作即并发的情况下不会有脏读(可用于主键生成策略)</li><li><code>getset key val</code> get旧值并且set新值</li><li><code>mset mget</code><ul><li><code>mset key val key val</code> </li><li><code>mget key key key</code> 返回值组成的数组</li></ul></li><li><code>exists key</code> 有该值就返回1否则0</li><li><code>del key</code> 返回1被删除，0 key不存在</li><li><code>type key</code> 返回值的类型</li><li><code>expire key secondes</code> 设置或改变超时时间，精度是秒或毫秒<ul><li><code>set key val ex secondes</code> set时设置超时时间</li></ul></li><li><code>persist key</code> 去除超时时间</li><li><code>ttl key</code> 查看剩余存活时间 -1表示永久 -2表示没有该key</li></ul><h2 id="列表List"><a href="#列表List" class="headerlink" title="列表List"></a>列表List</h2><ul><li><code>rpush key val val val</code>右/尾添加元素 lpush是左/头，若表不存在就新建</li><li><code>rpushx key value</code> 若表不存在就什么都不做，否则尾插元素</li><li><code>rpop key</code> 从list右/尾端中删除元素返回元素值 没有了就返回null</li><li><code>lrange key 0 -1</code> 取指定长度的list -1表示全部</li><li><code>ltrim key 0 2</code> 截取当前的list</li><li><code>lindex key index</code>   返回偏移量为index的元素(提到偏移量一般都是0开始)</li><li><code>linsert key BEFORE|AFTER pivot value</code><ul><li>将值 value 插入到列表 key 当中，位于值 pivot 之前或之后。</li><li>当 pivot 不存在于列表 key 时，不执行任何操作。当 key 不存在时， key 被视为空列表，不执行任何操作。</li><li>如果 key 不是列表类型，返回一个错误。</li></ul></li><li><code>lrem key count value</code> 根据参数 count 的值，移除列表中与参数 value 相等的元素。</li><li>阻塞式的列表弹出命令(block) <code>队列很有用</code><ul><li><code>blpop</code></li><li><code>brpop</code></li><li><code>bpoplpush</code></li><li><code>brpoplpush</code> 阻塞式先右弹再左进</li></ul></li></ul><h2 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h2><ul><li><code>SADD key member [member ...]</code></li><li><code>SCARD key</code> 返回集合 key 的基数(集合中元素的数量)。</li><li><code>SDIFF key [key ...]</code>  返回一个集合的全部成员，该集合是所有给定集合之间的差集。不存在的 key 被视为空集。</li><li><code>SDIFFSTORE destination key [key ...]</code>  这个命令的作用和 SDIFF 类似，但它将结果保存到 destination 集合，而不是简单地返回结果集。如果 destination 集合已经存在，则将其覆盖。destination 可以是 key 本身。</li><li><code>SINTER key [key ...]</code> 返回一个集合的全部成员，该集合是所有给定集合的交集。不存在的 key 被视为空集。当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。</li><li><code>SINTERSTORE destination key [key ...]</code> 与sdiffstore类似</li><li><code>SISMEMBER key member</code> 判断 member 元素是否集合 key 的成员。</li><li><code>SMEMBERS key</code> 获取某Set所有元素</li><li><code>SMOVE source destination member</code> 将 member 元素从 source 集合移动到 destination 集合。 SMOVE 是原子性操作。</li><li><code>SPOP key</code> 移除并返回集合中的一个随机元素</li><li><code>SRANDMEMBER key [count]</code> 如果命令执行时，只提供了 key 参数，那么返回集合中的一个随机元素</li><li><code>SREM key member [member ...]</code> 移除集合 key 中的一个或多个 member 元素，不存在的 member 元素会被忽略。</li><li><code>SUNION key [key ...]</code> 返回一个集合的全部成员，该集合是所有给定集合的并集。</li><li><code>SUNIONSTORE destination key [key ...]</code></li><li><code>SSCAN key cursor [MATCH pattern] [COUNT count]</code> 参考 SCAN 命令</li></ul><h2 id="有序集合Zset"><a href="#有序集合Zset" class="headerlink" title="有序集合Zset"></a>有序集合Zset</h2><blockquote><p>元素是键值对，键是member成员，值是score分值必须是浮点数</p></blockquote><ul><li>ZADD 将一个给定分值的成员添加到有序集合里</li><li>ZCARD 获取有序集合的成员数</li><li>ZCOUNT min max 计算在有序集合中指定区间分数的成员数</li><li><p>ZINCRBY key increment member 自增</p></li><li><p>ZRANGE 根据元素在有序集合中的位置，从有序集合中从小到大获取多个元素</p><ul><li><code>zrange name 0 -1 withscores</code> 获取所有并获取分值</li><li><code>zrange name 0 3 withscores</code>  获取分数最少的4个键值对</li></ul></li><li><p>ZREVRANGE 相反的, 从大到小</p></li><li><p><em>zrangebyscore</em> 获取有序集合在给定范围中的所有元素</p><ul><li><code>zrangebyscore name 0 200 withscores</code></li></ul></li><li>ZRANK</li><li>ZREM</li><li>ZREMRANGEBYRANK</li><li>ZREMRANGEBYSCORE</li><li>ZREVRANGEBYSCORE</li><li>ZREVRANK</li><li>ZSCORE</li><li>ZUNIONSTORE</li><li><code>zinterstore</code> 进行集合之间的并集（可以看作关系型数据库的多表连接）</li><li>ZSCAN</li><li>ZRANGEBYLEX</li><li>ZLEXCOUNT</li><li>ZREMRANGEBYLEX</li></ul><h2 id="散列Hash"><a href="#散列Hash" class="headerlink" title="散列Hash"></a>散列Hash</h2><blockquote><p>(类似Map 嵌套，一个内置的微型redis)</p></blockquote><ul><li>HDEL 删除散列中指定的K</li><li>HEXISTS</li><li>HGET</li><li>HGETALL</li><li>HINCRBY</li><li>HINCRBYFLOAT</li><li>HKEYS</li><li>HLEN</li><li>HMGET</li><li>HMSET</li><li>HSET</li><li>HSETNX</li><li>HVALS</li><li>HSCAN</li><li>HSTRLEN</li></ul><h2 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h2><ul><li>PFADD</li><li>PFCOUNT</li><li>PFMERGE</li></ul><h2 id="GEO地理位置"><a href="#GEO地理位置" class="headerlink" title="GEO地理位置"></a>GEO地理位置</h2><ul><li>GEOADD</li><li>GEOPOS</li><li>GEODIST</li><li>GEORADIUS</li><li>GEORADIUSBYMEMBER</li><li>GEOHASH</li></ul><hr><h1 id="Pub-Sub发布和订阅"><a href="#Pub-Sub发布和订阅" class="headerlink" title="Pub/Sub发布和订阅"></a>Pub/Sub发布和订阅</h1><ul><li><code>PSUBSCRIBE pattern [pattern ...]</code><ul><li>订阅一个或多个符合给定模式的频道。每个模式以 <em> 作为匹配符，比如 it</em> 匹配所有以 it 开头的频道( it.news 、 it.blog 、 it.tweets 等等)，</li><li>news.* 匹配所有以 news. 开头的频道( news.it 、 news.global.today 等等)，诸如此类。</li></ul></li><li><code>PUBLISH channel message</code><ul><li>将信息 message 发送到指定的频道 channel 。</li></ul></li><li><code>PUBSUB &lt;subcommand&gt; [argument [argument ...]]</code><ul><li>PUBSUB 是一个查看订阅与发布系统状态的内省命令， 它由数个不同格式的子命令组成， 以下将分别对这些子命令进行介绍。</li><li><code>PUBSUB CHANNELS [pattern]</code> 列出当前的活跃频道。设置pattern参数就会匹配活跃频道，否则是列出所有频道</li><li><code>PUBSUB NUMSUB [channel-1 ... channel-N]</code> 返回给定频道的订阅者数量， 订阅模式的客户端不计算在内。</li><li><code>PUBSUB NUMPAT</code> 返回订阅模式的数量。注意， 这个命令返回的不是订阅模式的客户端的数量， 而是客户端订阅的所有模式的数量总和。</li></ul></li><li><code>PUNSUBSCRIBE [pattern [pattern ...]]</code><ul><li>指示客户端退订所有给定模式。如果没有模式被指定，也即是，一个无参数的 PUNSUBSCRIBE 调用被执行，</li><li>那么客户端使用 PSUBSCRIBE 命令订阅的所有模式都会被退订。在这种情况下，命令会返回一个信息，告知客户端所有被退订的模式。</li></ul></li><li><code>SUBSCRIBE channel [channel ...]</code><ul><li>订阅给定的一个或多个频道的信息。</li></ul></li><li><code>UNSUBSCRIBE [channel [channel ...]]</code><ul><li>指示客户端退订给定的频道。如果没有频道被指定，也即是，一个无参数的 UNSUBSCRIBE 调用被执行，</li><li>那么客户端使用 SUBSCRIBE 命令订阅的所有频道都会被退订。在这种情况下，命令会返回一个信息，告知客户端所有被退订的频道。</li></ul></li></ul><hr><h1 id="编程语言的使用"><a href="#编程语言的使用" class="headerlink" title="编程语言的使用"></a>编程语言的使用</h1><h2 id="Java使用"><a href="#Java使用" class="headerlink" title="Java使用"></a>Java使用</h2><blockquote><p><a href="/Java/Ecosystem/JavaRedis.md">详细</a></p></blockquote><hr><h2 id="Python使用"><a href="#Python使用" class="headerlink" title="Python使用"></a>Python使用</h2><blockquote><p>pip install redis 该模块和redis命令的用法几乎一模一样, 上手很快</p><ul><li><a href="https://pypi.python.org/pypi/redis/" target="_blank" rel="noopener">redis文档</a> <code>python操作redis的库的文档</code></li></ul></blockquote><h1 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h1><blockquote><p>衍生项目 </p></blockquote><h2 id="webdis"><a href="#webdis" class="headerlink" title="webdis"></a>webdis</h2><blockquote><p>将redis变为一个简单的web接口  </p></blockquote><blockquote><p><a href="http://webd.is/" target="_blank" rel="noopener">官网</a> | <a href="https://github.com/nicolasff/webdis" target="_blank" rel="noopener">Github地址</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录 start&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#redis&quot;&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#book&quot;&gt;Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#安装和配置&quot;&gt;安装和配置&lt;/a&gt;&lt;o
      
    
    </summary>
    
    
  </entry>
  
</feed>
